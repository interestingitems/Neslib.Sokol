unit MrtPixelFormatsShader;
{ #version:1# (machine generated, don't edit!)

  Generated by sokol-shdc (https://github.com/floooh/sokol-tools)
  With Delphi modifications (https://github.com/neslib/Neslib.Sokol.Tools)

  Cmdline: sokol-shdc --input MrtPixelFormatsShader.glsl --output MrtPixelFormatsShader.pas

  Overview:

    Shader program 'offscreen':
      Get shader desc: OffscreenShaderDesc()
      Vertex shader: vs_offscreen
        Attribute slots:
          ATTR_VS_OFFSCREEN_IN_POS = 0
          ATTR_VS_OFFSCREEN_IN_NORMAL = 1
          ATTR_VS_OFFSCREEN_IN_COLOR = 2
        Uniform block 'offscreen_params':
          Delphi record: TOffscreenParams
          Bind slot: SLOT_OFFSCREEN_PARAMS = 0
      Fragment shader: fs_offscreen

    Shader program 'quad':
      Get shader desc: QuadShaderDesc()
      Vertex shader: vs_quad
        Attribute slots:
          ATTR_VS_QUAD_POS = 0
      Fragment shader: fs_quad
        Uniform block 'quad_params':
          Delphi record: TQuadParams
          Bind slot: SLOT_QUAD_PARAMS = 0
        Image 'tex':
          Type: _SG_IMAGETYPE_2D
          Component Type: _SG_SAMPLERTYPE_FLOAT
          Bind slot: SLOT_TEX = 0


  Shader descriptor records:

    var OffscreenShader := TShader.Create(OffscreenShaderDesc);
    var QuadShader := TShader.Create(QuadShaderDesc);

  Vertex attribute locations for vertex shader 'vs_offscreen':

    var PipDesc: TPipelineDesc;
    PipDesc.Init;
    PipDesc.Attrs[ATTR_VS_OFFSCREEN_IN_POS]. ...
    PipDesc.Attrs[ATTR_VS_OFFSCREEN_IN_NORMAL]. ...
    PipDesc.Attrs[ATTR_VS_OFFSCREEN_IN_COLOR]. ...
    PipDesc. ...
    var Pip := TPipeline.Create(PipDesc);

  Vertex attribute locations for vertex shader 'vs_quad':

    var PipDesc: TPipelineDesc;
    PipDesc.Init;
    PipDesc.Attrs[ATTR_VS_QUAD_POS]. ...
    PipDesc. ...
    var Pip := TPipeline.Create(PipDesc);

  Image bind slots, use as index in TBindings.VSImages[] or .FSImages[]:

    SLOT_TEX = 0;

  Bind slot and Delphi record for uniform block 'OffscreenParams':

    OffscreenParams: TOffscreenParams;
    OffscreenParams.Mvp := ...;
    TGfx.ApplyUniforms(TShaderStage.[VertexShader|FragmentShader], SLOT_OFFSCREEN_PARAMS, TRange.Create(OffscreenParams));

  Bind slot and Delphi record for uniform block 'QuadParams':

    QuadParams: TQuadParams;
    QuadParams.ColorBias := ...;
    QuadParams.ColorScale := ...;
    TGfx.ApplyUniforms(TShaderStage.[VertexShader|FragmentShader], SLOT_QUAD_PARAMS, TRange.Create(QuadParams));

}

{$INCLUDE 'Neslib.Sokol.inc'}

interface

uses
  Neslib.FastMath,
  Neslib.Sokol.Gfx;

const
  ATTR_VS_OFFSCREEN_IN_POS = 0;
  ATTR_VS_OFFSCREEN_IN_NORMAL = 1;
  ATTR_VS_OFFSCREEN_IN_COLOR = 2;
  ATTR_VS_QUAD_POS = 0;

const
  SLOT_TEX = 0;

const
  SLOT_OFFSCREEN_PARAMS = 0;

type
  TOffscreenParams = packed record
  public
    Mvp: TMatrix4;
  end;

const
  SLOT_QUAD_PARAMS = 0;

type
  TQuadParams = packed record
  public
    ColorBias: Single;
    ColorScale: Single;
    _Pad8: array [0..7] of UInt8;
  end;

function OffscreenShaderDesc: PNativeShaderDesc;
function QuadShaderDesc: PNativeShaderDesc;

implementation

uses
  Neslib.Sokol.Api;

{$IFDEF SOKOL_GLCORE33}
const
  VS_OFFSCREEN_SOURCE_GLSL330 =
    '#version 330'#10+

    'uniform vec4 offscreen_params[4];'#10+
    'layout(location = 0) in vec4 in_pos;'#10+
    'out vec4 vs_proj;'#10+
    'out vec4 vs_normal;'#10+
    'layout(location = 1) in vec3 in_normal;'#10+
    'out vec4 vs_color;'#10+
    'layout(location = 2) in vec4 in_color;'#10+

    'void main()'#10+
    '{'#10+
    '    mat4 _24 = mat4(offscreen_params[0], offscreen_params[1], offscreen_params[2], offscreen_params[3]);'#10+
    '    gl_Position = _24 * in_pos;'#10+
    '    vs_proj = gl_Position;'#10+
    '    vs_normal = _24 * vec4(in_normal, 0.0);'#10+
    '    vs_color = in_color;'#10+
    '}';

const
  FS_OFFSCREEN_SOURCE_GLSL330 =
    '#version 330'#10+

    'layout(location = 0) out vec4 frag_depth;'#10+
    'in vec4 vs_proj;'#10+
    'layout(location = 1) out vec4 frag_normal;'#10+
    'in vec4 vs_normal;'#10+
    'layout(location = 2) out vec4 frag_color;'#10+
    'in vec4 vs_color;'#10+

    'void main()'#10+
    '{'#10+
    '    frag_depth = vec4(vs_proj.z);'#10+
    '    frag_normal = vs_normal;'#10+
    '    frag_color = vs_color;'#10+
    '}';

const
  VS_QUAD_SOURCE_GLSL330 =
    '#version 330'#10+

    'layout(location = 0) in vec2 pos;'#10+
    'out vec2 uv;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_Position = vec4((pos * 2.0) - vec2(1.0), 0.5, 1.0);'#10+
    '    uv = pos;'#10+
    '    gl_Position.y = -gl_Position.y;'#10+
    '}';

const
  FS_QUAD_SOURCE_GLSL330 =
    '#version 330'#10+

    'uniform vec4 quad_params[1];'#10+
    'uniform sampler2D tex;'#10+

    'layout(location = 0) out vec4 frag_color;'#10+
    'in vec2 uv;'#10+

    'void main()'#10+
    '{'#10+
    '    frag_color = vec4((texture(tex, uv).xyz + vec3(quad_params[0].x)) * quad_params[0].y, 1.0);'#10+
    '}';

{$ENDIF !SOKOL_GLCORE33}

{$IFDEF SOKOL_GLES2}
const
  VS_OFFSCREEN_SOURCE_GLSL100 =
    '#version 100'#10+

    'uniform vec4 offscreen_params[4];'#10+
    'attribute vec4 in_pos;'#10+
    'varying vec4 vs_proj;'#10+
    'varying vec4 vs_normal;'#10+
    'attribute vec3 in_normal;'#10+
    'varying vec4 vs_color;'#10+
    'attribute vec4 in_color;'#10+

    'void main()'#10+
    '{'#10+
    '    mat4 _24 = mat4(offscreen_params[0], offscreen_params[1], offscreen_params[2], offscreen_params[3]);'#10+
    '    gl_Position = _24 * in_pos;'#10+
    '    vs_proj = gl_Position;'#10+
    '    vs_normal = _24 * vec4(in_normal, 0.0);'#10+
    '    vs_color = in_color;'#10+
    '}';

const
  FS_OFFSCREEN_SOURCE_GLSL100 =
    '#version 100'#10+
    '#extension GL_EXT_draw_buffers : require'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'varying highp vec4 vs_proj;'#10+
    'varying highp vec4 vs_normal;'#10+
    'varying highp vec4 vs_color;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_FragData[0] = vec4(vs_proj.z);'#10+
    '    gl_FragData[1] = vs_normal;'#10+
    '    gl_FragData[2] = vs_color;'#10+
    '}';

const
  VS_QUAD_SOURCE_GLSL100 =
    '#version 100'#10+

    'attribute vec2 pos;'#10+
    'varying vec2 uv;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_Position = vec4((pos * 2.0) - vec2(1.0), 0.5, 1.0);'#10+
    '    uv = pos;'#10+
    '    gl_Position.y = -gl_Position.y;'#10+
    '}';

const
  FS_QUAD_SOURCE_GLSL100 =
    '#version 100'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'uniform highp vec4 quad_params[1];'#10+
    'uniform highp sampler2D tex;'#10+

    'varying highp vec2 uv;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_FragData[0] = vec4((texture2D(tex, uv).xyz + vec3(quad_params[0].x)) * quad_params[0].y, 1.0);'#10+
    '}';

{$ENDIF !SOKOL_GLES2}

{$IFDEF SOKOL_GLES3}
const
  VS_OFFSCREEN_SOURCE_GLSL300ES =
    '#version 300 es'#10+

    'uniform vec4 offscreen_params[4];'#10+
    'layout(location = 0) in vec4 in_pos;'#10+
    'out vec4 vs_proj;'#10+
    'out vec4 vs_normal;'#10+
    'layout(location = 1) in vec3 in_normal;'#10+
    'out vec4 vs_color;'#10+
    'layout(location = 2) in vec4 in_color;'#10+

    'void main()'#10+
    '{'#10+
    '    mat4 _24 = mat4(offscreen_params[0], offscreen_params[1], offscreen_params[2], offscreen_params[3]);'#10+
    '    gl_Position = _24 * in_pos;'#10+
    '    vs_proj = gl_Position;'#10+
    '    vs_normal = _24 * vec4(in_normal, 0.0);'#10+
    '    vs_color = in_color;'#10+
    '}';

const
  FS_OFFSCREEN_SOURCE_GLSL300ES =
    '#version 300 es'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'layout(location = 0) out highp vec4 frag_depth;'#10+
    'in highp vec4 vs_proj;'#10+
    'layout(location = 1) out highp vec4 frag_normal;'#10+
    'in highp vec4 vs_normal;'#10+
    'layout(location = 2) out highp vec4 frag_color;'#10+
    'in highp vec4 vs_color;'#10+

    'void main()'#10+
    '{'#10+
    '    frag_depth = vec4(vs_proj.z);'#10+
    '    frag_normal = vs_normal;'#10+
    '    frag_color = vs_color;'#10+
    '}';

const
  VS_QUAD_SOURCE_GLSL300ES =
    '#version 300 es'#10+

    'layout(location = 0) in vec2 pos;'#10+
    'out vec2 uv;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_Position = vec4((pos * 2.0) - vec2(1.0), 0.5, 1.0);'#10+
    '    uv = pos;'#10+
    '    gl_Position.y = -gl_Position.y;'#10+
    '}';

const
  FS_QUAD_SOURCE_GLSL300ES =
    '#version 300 es'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'uniform highp vec4 quad_params[1];'#10+
    'uniform highp sampler2D tex;'#10+

    'layout(location = 0) out highp vec4 frag_color;'#10+
    'in highp vec2 uv;'#10+

    'void main()'#10+
    '{'#10+
    '    frag_color = vec4((texture(tex, uv).xyz + vec3(quad_params[0].x)) * quad_params[0].y, 1.0);'#10+
    '}';

{$ENDIF !SOKOL_GLES3}

{$IFDEF SOKOL_D3D11}
const
  VS_OFFSCREEN_SOURCE_HLSL5 =
    'cbuffer offscreen_params : register(b0)'#10+
    '{'#10+
    '    row_major float4x4 _21_mvp : packoffset(c0);'#10+
    '};'#10+


    'static float4 gl_Position;'#10+
    'static float4 in_pos;'#10+
    'static float4 vs_proj;'#10+
    'static float4 vs_normal;'#10+
    'static float3 in_normal;'#10+
    'static float4 vs_color;'#10+
    'static float4 in_color;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float4 in_pos : TEXCOORD0;'#10+
    '    float3 in_normal : TEXCOORD1;'#10+
    '    float4 in_color : TEXCOORD2;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float4 vs_proj : TEXCOORD0;'#10+
    '    float4 vs_normal : TEXCOORD1;'#10+
    '    float4 vs_color : TEXCOORD2;'#10+
    '    float4 gl_Position : SV_Position;'#10+
    '};'#10+

    'void vert_main()'#10+
    '{'#10+
    '    gl_Position = mul(in_pos, _21_mvp);'#10+
    '    vs_proj = gl_Position;'#10+
    '    vs_normal = mul(float4(in_normal, 0.0f), _21_mvp);'#10+
    '    vs_color = in_color;'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    in_pos = stage_input.in_pos;'#10+
    '    in_normal = stage_input.in_normal;'#10+
    '    in_color = stage_input.in_color;'#10+
    '    vert_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.gl_Position = gl_Position;'#10+
    '    stage_output.vs_proj = vs_proj;'#10+
    '    stage_output.vs_normal = vs_normal;'#10+
    '    stage_output.vs_color = vs_color;'#10+
    '    return stage_output;'#10+
    '}';

const
  FS_OFFSCREEN_SOURCE_HLSL5 =
    'static float4 frag_depth;'#10+
    'static float4 vs_proj;'#10+
    'static float4 frag_normal;'#10+
    'static float4 vs_normal;'#10+
    'static float4 frag_color;'#10+
    'static float4 vs_color;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float4 vs_proj : TEXCOORD0;'#10+
    '    float4 vs_normal : TEXCOORD1;'#10+
    '    float4 vs_color : TEXCOORD2;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float4 frag_depth : SV_Target0;'#10+
    '    float4 frag_normal : SV_Target1;'#10+
    '    float4 frag_color : SV_Target2;'#10+
    '};'#10+

    'void frag_main()'#10+
    '{'#10+
    '    frag_depth = vs_proj.z.xxxx;'#10+
    '    frag_normal = vs_normal;'#10+
    '    frag_color = vs_color;'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    vs_proj = stage_input.vs_proj;'#10+
    '    vs_normal = stage_input.vs_normal;'#10+
    '    vs_color = stage_input.vs_color;'#10+
    '    frag_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.frag_depth = frag_depth;'#10+
    '    stage_output.frag_normal = frag_normal;'#10+
    '    stage_output.frag_color = frag_color;'#10+
    '    return stage_output;'#10+
    '}';

const
  VS_QUAD_SOURCE_HLSL5 =
    'static float4 gl_Position;'#10+
    'static float2 pos;'#10+
    'static float2 uv;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float2 pos : TEXCOORD0;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float2 uv : TEXCOORD0;'#10+
    '    float4 gl_Position : SV_Position;'#10+
    '};'#10+

    'void vert_main()'#10+
    '{'#10+
    '    gl_Position = float4((pos * 2.0f) - 1.0f.xx, 0.5f, 1.0f);'#10+
    '    uv = pos;'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    pos = stage_input.pos;'#10+
    '    vert_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.gl_Position = gl_Position;'#10+
    '    stage_output.uv = uv;'#10+
    '    return stage_output;'#10+
    '}';

const
  FS_QUAD_SOURCE_HLSL5 =
    'cbuffer quad_params : register(b0)'#10+
    '{'#10+
    '    float _26_color_bias : packoffset(c0);'#10+
    '    float _26_color_scale : packoffset(c0.y);'#10+
    '};'#10+

    'Texture2D<float4> tex : register(t0);'#10+
    'SamplerState _tex_sampler : register(s0);'#10+

    'static float4 frag_color;'#10+
    'static float2 uv;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float2 uv : TEXCOORD0;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float4 frag_color : SV_Target0;'#10+
    '};'#10+

    'void frag_main()'#10+
    '{'#10+
    '    frag_color = float4((tex.Sample(_tex_sampler, uv).xyz + _26_color_bias.xxx) * _26_color_scale, 1.0f);'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    uv = stage_input.uv;'#10+
    '    frag_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.frag_color = frag_color;'#10+
    '    return stage_output;'#10+
    '}';

{$ENDIF !SOKOL_D3D11}

{$IFDEF SOKOL_METAL}
const
  VS_OFFSCREEN_SOURCE_METAL_MACOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct offscreen_params'#10+
    '{'#10+
    '    float4x4 mvp;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 vs_proj [[user(locn0)]];'#10+
    '    float4 vs_normal [[user(locn1)]];'#10+
    '    float4 vs_color [[user(locn2)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 in_pos [[attribute(0)]];'#10+
    '    float3 in_normal [[attribute(1)]];'#10+
    '    float4 in_color [[attribute(2)]];'#10+
    '};'#10+

    'vertex main0_out main0(main0_in in [[stage_in]], constant offscreen_params& _21 [[buffer(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.gl_Position = _21.mvp * in.in_pos;'#10+
    '    out.vs_proj = out.gl_Position;'#10+
    '    out.vs_normal = _21.mvp * float4(in.in_normal, 0.0);'#10+
    '    out.vs_color = in.in_color;'#10+
    '    return out;'#10+
    '}';

const
  FS_OFFSCREEN_SOURCE_METAL_MACOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_depth [[color(0)]];'#10+
    '    float4 frag_normal [[color(1)]];'#10+
    '    float4 frag_color [[color(2)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 vs_proj [[user(locn0)]];'#10+
    '    float4 vs_normal [[user(locn1)]];'#10+
    '    float4 vs_color [[user(locn2)]];'#10+
    '};'#10+

    'fragment main0_out main0(main0_in in [[stage_in]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.frag_depth = float4(in.vs_proj.z);'#10+
    '    out.frag_normal = in.vs_normal;'#10+
    '    out.frag_color = in.vs_color;'#10+
    '    return out;'#10+
    '}';

const
  VS_QUAD_SOURCE_METAL_MACOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float2 uv [[user(locn0)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float2 pos [[attribute(0)]];'#10+
    '};'#10+

    'vertex main0_out main0(main0_in in [[stage_in]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.gl_Position = float4((in.pos * 2.0) - float2(1.0), 0.5, 1.0);'#10+
    '    out.uv = in.pos;'#10+
    '    return out;'#10+
    '}';

const
  FS_QUAD_SOURCE_METAL_MACOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct quad_params'#10+
    '{'#10+
    '    float color_bias;'#10+
    '    float color_scale;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_color [[color(0)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float2 uv [[user(locn0)]];'#10+
    '};'#10+

    'fragment main0_out main0(main0_in in [[stage_in]], constant quad_params& _26 [[buffer(0)]], texture2d<float> tex [[texture(0)]], sampler texSmplr [[sampler(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.frag_color = float4((tex.sample(texSmplr, in.uv).xyz + float3(_26.color_bias)) * _26.color_scale, 1.0);'#10+
    '    return out;'#10+
    '}';

{$ENDIF !SOKOL_METAL}

{$IFDEF SOKOL_METAL}
const
  VS_OFFSCREEN_SOURCE_METAL_IOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct offscreen_params'#10+
    '{'#10+
    '    float4x4 mvp;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 vs_proj [[user(locn0)]];'#10+
    '    float4 vs_normal [[user(locn1)]];'#10+
    '    float4 vs_color [[user(locn2)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 in_pos [[attribute(0)]];'#10+
    '    float3 in_normal [[attribute(1)]];'#10+
    '    float4 in_color [[attribute(2)]];'#10+
    '};'#10+

    'vertex main0_out main0(main0_in in [[stage_in]], constant offscreen_params& _21 [[buffer(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.gl_Position = _21.mvp * in.in_pos;'#10+
    '    out.vs_proj = out.gl_Position;'#10+
    '    out.vs_normal = _21.mvp * float4(in.in_normal, 0.0);'#10+
    '    out.vs_color = in.in_color;'#10+
    '    return out;'#10+
    '}';

const
  FS_OFFSCREEN_SOURCE_METAL_IOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_depth [[color(0)]];'#10+
    '    float4 frag_normal [[color(1)]];'#10+
    '    float4 frag_color [[color(2)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 vs_proj [[user(locn0)]];'#10+
    '    float4 vs_normal [[user(locn1)]];'#10+
    '    float4 vs_color [[user(locn2)]];'#10+
    '};'#10+

    'fragment main0_out main0(main0_in in [[stage_in]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.frag_depth = float4(in.vs_proj.z);'#10+
    '    out.frag_normal = in.vs_normal;'#10+
    '    out.frag_color = in.vs_color;'#10+
    '    return out;'#10+
    '}';

const
  VS_QUAD_SOURCE_METAL_IOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float2 uv [[user(locn0)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float2 pos [[attribute(0)]];'#10+
    '};'#10+

    'vertex main0_out main0(main0_in in [[stage_in]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.gl_Position = float4((in.pos * 2.0) - float2(1.0), 0.5, 1.0);'#10+
    '    out.uv = in.pos;'#10+
    '    return out;'#10+
    '}';

const
  FS_QUAD_SOURCE_METAL_IOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct quad_params'#10+
    '{'#10+
    '    float color_bias;'#10+
    '    float color_scale;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_color [[color(0)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float2 uv [[user(locn0)]];'#10+
    '};'#10+

    'fragment main0_out main0(main0_in in [[stage_in]], constant quad_params& _26 [[buffer(0)]], texture2d<float> tex [[texture(0)]], sampler texSmplr [[sampler(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.frag_color = float4((tex.sample(texSmplr, in.uv).xyz + float3(_26.color_bias)) * _26.color_scale, 1.0);'#10+
    '    return out;'#10+
    '}';

{$ENDIF !SOKOL_METAL}

var
  GOffscreenShaderDesc: TNativeShaderDesc;

procedure InitOffscreenShaderDesc;
begin
  GOffscreenShaderDesc.Init;
  GOffscreenShaderDesc.Attrs[0].Init('in_pos', 'TEXCOORD', 0);
  GOffscreenShaderDesc.Attrs[1].Init('in_normal', 'TEXCOORD', 1);
  GOffscreenShaderDesc.Attrs[2].Init('in_color', 'TEXCOORD', 2);

  case TGfx.Backend of
    {$IFDEF SOKOL_GLCORE33}
    TBackend.GLCore33:
      begin
        GOffscreenShaderDesc.VS.Source := VS_OFFSCREEN_SOURCE_GLSL330;
        GOffscreenShaderDesc.FS.Source := FS_OFFSCREEN_SOURCE_GLSL330;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES2}
    TBackend.Gles2:
      begin
        GOffscreenShaderDesc.VS.Source := VS_OFFSCREEN_SOURCE_GLSL100;
        GOffscreenShaderDesc.FS.Source := FS_OFFSCREEN_SOURCE_GLSL100;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES3}
    TBackend.Gles3:
      begin
        GOffscreenShaderDesc.VS.Source := VS_OFFSCREEN_SOURCE_GLSL300ES;
        GOffscreenShaderDesc.FS.Source := FS_OFFSCREEN_SOURCE_GLSL300ES;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_D3D11}
    TBackend.D3D11:
      begin
        GOffscreenShaderDesc.VS.Source := VS_OFFSCREEN_SOURCE_HLSL5;
        GOffscreenShaderDesc.FS.Source := FS_OFFSCREEN_SOURCE_HLSL5;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalMacOS:
      begin
        GOffscreenShaderDesc.VS.Source := VS_OFFSCREEN_SOURCE_METAL_MACOS;
        GOffscreenShaderDesc.FS.Source := FS_OFFSCREEN_SOURCE_METAL_MACOS;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalIOS:
      begin
        GOffscreenShaderDesc.VS.Source := VS_OFFSCREEN_SOURCE_METAL_IOS;
        GOffscreenShaderDesc.FS.Source := FS_OFFSCREEN_SOURCE_METAL_IOS;
      end;
    {$ENDIF}
  else
    Assert(False)
  end;

  GOffscreenShaderDesc.vs.uniform_blocks[0].size := 64;
  GOffscreenShaderDesc.vs.uniform_blocks[0].layout := _SG_UNIFORMLAYOUT_STD140;
  if (TGfx.Backend.IsGL) then
    GOffscreenShaderDesc.vs.uniform_blocks[0].uniforms[0].Init('offscreen_params', _SG_UNIFORMTYPE_FLOAT4, 4);
  GOffscreenShaderDesc.&label := 'OffscreenShader';
end;

function OffscreenShaderDesc: PNativeShaderDesc;
begin
  if (GOffscreenShaderDesc.VS.Entry = nil) then
    InitOffscreenShaderDesc;

  Result := @GOffscreenShaderDesc;
end;


var
  GQuadShaderDesc: TNativeShaderDesc;

procedure InitQuadShaderDesc;
begin
  GQuadShaderDesc.Init;
  GQuadShaderDesc.Attrs[0].Init('pos', 'TEXCOORD', 0);

  case TGfx.Backend of
    {$IFDEF SOKOL_GLCORE33}
    TBackend.GLCore33:
      begin
        GQuadShaderDesc.VS.Source := VS_QUAD_SOURCE_GLSL330;
        GQuadShaderDesc.FS.Source := FS_QUAD_SOURCE_GLSL330;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES2}
    TBackend.Gles2:
      begin
        GQuadShaderDesc.VS.Source := VS_QUAD_SOURCE_GLSL100;
        GQuadShaderDesc.FS.Source := FS_QUAD_SOURCE_GLSL100;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES3}
    TBackend.Gles3:
      begin
        GQuadShaderDesc.VS.Source := VS_QUAD_SOURCE_GLSL300ES;
        GQuadShaderDesc.FS.Source := FS_QUAD_SOURCE_GLSL300ES;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_D3D11}
    TBackend.D3D11:
      begin
        GQuadShaderDesc.VS.Source := VS_QUAD_SOURCE_HLSL5;
        GQuadShaderDesc.FS.Source := FS_QUAD_SOURCE_HLSL5;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalMacOS:
      begin
        GQuadShaderDesc.VS.Source := VS_QUAD_SOURCE_METAL_MACOS;
        GQuadShaderDesc.FS.Source := FS_QUAD_SOURCE_METAL_MACOS;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalIOS:
      begin
        GQuadShaderDesc.VS.Source := VS_QUAD_SOURCE_METAL_IOS;
        GQuadShaderDesc.FS.Source := FS_QUAD_SOURCE_METAL_IOS;
      end;
    {$ENDIF}
  else
    Assert(False)
  end;

  GQuadShaderDesc.fs.uniform_blocks[0].size := 16;
  GQuadShaderDesc.fs.uniform_blocks[0].layout := _SG_UNIFORMLAYOUT_STD140;
  if (TGfx.Backend.IsGL) then
    GQuadShaderDesc.fs.uniform_blocks[0].uniforms[0].Init('quad_params', _SG_UNIFORMTYPE_FLOAT4, 1);
  GQuadShaderDesc.fs.images[0].Init('tex', _SG_IMAGETYPE_2D, _SG_SAMPLERTYPE_FLOAT);
  GQuadShaderDesc.&label := 'QuadShader';
end;

function QuadShaderDesc: PNativeShaderDesc;
begin
  if (GQuadShaderDesc.VS.Entry = nil) then
    InitQuadShaderDesc;

  Result := @GQuadShaderDesc;
end;

end.
