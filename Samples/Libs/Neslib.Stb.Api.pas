unit Neslib.Stb.Api;
{ This unit is automatically generated by Chet:
  https://github.com/neslib/Chet }

{$MINENUMSIZE 4}

interface

const
  {$IF Defined(WIN32)}
  _LIB_STB = 'stb32.dll';
  _PU = '';
  {$ELSEIF Defined(WIN64)}
  _LIB_STB = 'stb64.dll';
  _PU = '';
  {$ELSEIF Defined(MACOS64) and Defined(CPUX64) and not Defined(IOS)}
  _LIB_STB = 'libstb_macos_intel.a';
  _PU = '';
  {$ELSEIF Defined(IOS)}
  _LIB_STB = 'libstb_ios.a';
  _PU = '';
  {$ELSEIF Defined(ANDROID32)}
  _LIB_STB = 'libstb_android32.a';
  _PU = '';
  {$ELSEIF Defined(ANDROID64)}
  _LIB_STB = 'libstb_android64.a';
  _PU = '';
  {$ELSE}
    {$MESSAGE Error 'Unsupported platform'}
  {$ENDIF}

const
  _STBI_VERSION = 1;

const
  _STBI_default = 0;
  _STBI_grey = 1;
  _STBI_grey_alpha = 2;
  _STBI_rgb = 3;
  _STBI_rgb_alpha = 4;

type
  // Forward declarations
  PPInteger = ^PInteger;
  PPointer = ^Pointer;
  _Pstbi_io_callbacks = ^_stbi_io_callbacks;

  _stbi_uc = Byte;
  _Pstbi_uc = ^_stbi_uc;
  _stbi_us = Word;
  _Pstbi_us = ^_stbi_us;

  //////////////////////////////////////////////////////////////////////////////
  _stbi_io_callbacks = record
    read: function(user: Pointer; data: PUTF8Char; size: Integer): Integer; cdecl;
    skip: procedure(user: Pointer; n: Integer); cdecl;
    eof: function(user: Pointer): Integer; cdecl;
  end;

////////////////////////////////////
function _stbi_load_from_memory(const buffer: _Pstbi_uc; len: Integer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): _Pstbi_uc; cdecl;
  external _LIB_STB name _PU + 'stbi_load_from_memory';

function _stbi_load_from_callbacks(const clbk: _Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): _Pstbi_uc; cdecl;
  external _LIB_STB name _PU + 'stbi_load_from_callbacks';

function _stbi_load(const filename: PUTF8Char; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): _Pstbi_uc; cdecl;
  external _LIB_STB name _PU + 'stbi_load';

function _stbi_load_from_file(f: PPointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): _Pstbi_uc; cdecl;
  external _LIB_STB name _PU + 'stbi_load_from_file';

function _stbi_load_gif_from_memory(const buffer: _Pstbi_uc; len: Integer; delays: PPInteger; x: PInteger; y: PInteger; z: PInteger; comp: PInteger; req_comp: Integer): _Pstbi_uc; cdecl;
  external _LIB_STB name _PU + 'stbi_load_gif_from_memory';

////////////////////////////////////
function _stbi_load_16_from_memory(const buffer: _Pstbi_uc; len: Integer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): _Pstbi_us; cdecl;
  external _LIB_STB name _PU + 'stbi_load_16_from_memory';

function _stbi_load_16_from_callbacks(const clbk: _Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): _Pstbi_us; cdecl;
  external _LIB_STB name _PU + 'stbi_load_16_from_callbacks';

function _stbi_load_16(const filename: PUTF8Char; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): _Pstbi_us; cdecl;
  external _LIB_STB name _PU + 'stbi_load_16';

function _stbi_load_from_file_16(f: PPointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): _Pstbi_us; cdecl;
  external _LIB_STB name _PU + 'stbi_load_from_file_16';

function _stbi_loadf_from_memory(const buffer: _Pstbi_uc; len: Integer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  external _LIB_STB name _PU + 'stbi_loadf_from_memory';

function _stbi_loadf_from_callbacks(const clbk: _Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  external _LIB_STB name _PU + 'stbi_loadf_from_callbacks';

function _stbi_loadf(const filename: PUTF8Char; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  external _LIB_STB name _PU + 'stbi_loadf';

function _stbi_loadf_from_file(f: PPointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  external _LIB_STB name _PU + 'stbi_loadf_from_file';

procedure _stbi_hdr_to_ldr_gamma(gamma: Single); cdecl;
  external _LIB_STB name _PU + 'stbi_hdr_to_ldr_gamma';

procedure _stbi_hdr_to_ldr_scale(scale: Single); cdecl;
  external _LIB_STB name _PU + 'stbi_hdr_to_ldr_scale';

procedure _stbi_ldr_to_hdr_gamma(gamma: Single); cdecl;
  external _LIB_STB name _PU + 'stbi_ldr_to_hdr_gamma';

procedure _stbi_ldr_to_hdr_scale(scale: Single); cdecl;
  external _LIB_STB name _PU + 'stbi_ldr_to_hdr_scale';

function _stbi_is_hdr_from_callbacks(const clbk: _Pstbi_io_callbacks; user: Pointer): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_is_hdr_from_callbacks';

function _stbi_is_hdr_from_memory(const buffer: _Pstbi_uc; len: Integer): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_is_hdr_from_memory';

function _stbi_is_hdr(const filename: PUTF8Char): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_is_hdr';

function _stbi_is_hdr_from_file(f: PPointer): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_is_hdr_from_file';

function _stbi_failure_reason(): PUTF8Char; cdecl;
  external _LIB_STB name _PU + 'stbi_failure_reason';

procedure _stbi_image_free(retval_from_stbi_load: Pointer); cdecl;
  external _LIB_STB name _PU + 'stbi_image_free';

function _stbi_info_from_memory(const buffer: _Pstbi_uc; len: Integer; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_info_from_memory';

function _stbi_info_from_callbacks(const clbk: _Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_info_from_callbacks';

function _stbi_is_16_bit_from_memory(const buffer: _Pstbi_uc; len: Integer): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_is_16_bit_from_memory';

function _stbi_is_16_bit_from_callbacks(const clbk: _Pstbi_io_callbacks; user: Pointer): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_is_16_bit_from_callbacks';

function _stbi_info(const filename: PUTF8Char; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_info';

function _stbi_info_from_file(f: PPointer; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_info_from_file';

function _stbi_is_16_bit(const filename: PUTF8Char): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_is_16_bit';

function _stbi_is_16_bit_from_file(f: PPointer): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_is_16_bit_from_file';

procedure _stbi_set_unpremultiply_on_load(flag_true_if_should_unpremultiply: Integer); cdecl;
  external _LIB_STB name _PU + 'stbi_set_unpremultiply_on_load';

procedure _stbi_convert_iphone_png_to_rgb(flag_true_if_should_convert: Integer); cdecl;
  external _LIB_STB name _PU + 'stbi_convert_iphone_png_to_rgb';

procedure _stbi_set_flip_vertically_on_load(flag_true_if_should_flip: Integer); cdecl;
  external _LIB_STB name _PU + 'stbi_set_flip_vertically_on_load';

function _stbi_zlib_decode_malloc_guesssize(const buffer: PUTF8Char; len: Integer; initial_size: Integer; outlen: PInteger): PUTF8Char; cdecl;
  external _LIB_STB name _PU + 'stbi_zlib_decode_malloc_guesssize';

function _stbi_zlib_decode_malloc_guesssize_headerflag(const buffer: PUTF8Char; len: Integer; initial_size: Integer; outlen: PInteger; parse_header: Integer): PUTF8Char; cdecl;
  external _LIB_STB name _PU + 'stbi_zlib_decode_malloc_guesssize_headerflag';

function _stbi_zlib_decode_malloc(const buffer: PUTF8Char; len: Integer; outlen: PInteger): PUTF8Char; cdecl;
  external _LIB_STB name _PU + 'stbi_zlib_decode_malloc';

function _stbi_zlib_decode_buffer(obuffer: PUTF8Char; olen: Integer; const ibuffer: PUTF8Char; ilen: Integer): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_zlib_decode_buffer';

function _stbi_zlib_decode_noheader_malloc(const buffer: PUTF8Char; len: Integer; outlen: PInteger): PUTF8Char; cdecl;
  external _LIB_STB name _PU + 'stbi_zlib_decode_noheader_malloc';

function _stbi_zlib_decode_noheader_buffer(obuffer: PUTF8Char; olen: Integer; const ibuffer: PUTF8Char; ilen: Integer): Integer; cdecl;
  external _LIB_STB name _PU + 'stbi_zlib_decode_noheader_buffer';

implementation

end.