unit Neslib.Cgltf.Api;
{ This unit is automatically generated by Chet:
  https://github.com/neslib/Chet }

{$MINENUMSIZE 4}

interface

const
  {$IF Defined(WIN32)}
  _LIB_CGLTF = 'cgltf32.dll';
  _PU = '';
  {$ELSEIF Defined(WIN64)}
  _LIB_CGLTF = 'cgltf64.dll';
  _PU = '';
  {$ELSEIF Defined(MACOS64) and Defined(CPUX64) and not Defined(IOS)}
  _LIB_CGLTF = 'libcgltf_macos_intel.a';
  _PU = '';
  {$ELSEIF Defined(IOS)}
  _LIB_CGLTF = 'libcgltf_ios.a';
  _PU = '';
  {$ELSEIF Defined(ANDROID32)}
  _LIB_CGLTF = 'libcgltf_android32.a';
  _PU = '';
  {$ELSEIF Defined(ANDROID64)}
  _LIB_CGLTF = 'libcgltf_android64.a';
  _PU = '';
  {$ELSE}
    {$MESSAGE Error 'Unsupported platform'}
  {$ENDIF}

type
  _cgltf_file_type = Integer;
  _Pcgltf_file_type = ^_cgltf_file_type;

const
  _cgltf_file_type_invalid = 0;
  _cgltf_file_type_gltf = 1;
  _cgltf_file_type_glb = 2;

type
  _cgltf_result = Integer;
  _Pcgltf_result = ^_cgltf_result;

const
  _cgltf_result_success = 0;
  _cgltf_result_data_too_short = 1;
  _cgltf_result_unknown_format = 2;
  _cgltf_result_invalid_json = 3;
  _cgltf_result_invalid_gltf = 4;
  _cgltf_result_invalid_options = 5;
  _cgltf_result_file_not_found = 6;
  _cgltf_result_io_error = 7;
  _cgltf_result_out_of_memory = 8;

type
  _cgltf_buffer_view_type = Integer;
  _Pcgltf_buffer_view_type = ^_cgltf_buffer_view_type;

const
  _cgltf_buffer_view_type_invalid = 0;
  _cgltf_buffer_view_type_indices = 1;
  _cgltf_buffer_view_type_vertices = 2;

type
  _cgltf_attribute_type = Integer;
  _Pcgltf_attribute_type = ^_cgltf_attribute_type;

const
  _cgltf_attribute_type_invalid = 0;
  _cgltf_attribute_type_position = 1;
  _cgltf_attribute_type_normal = 2;
  _cgltf_attribute_type_tangent = 3;
  _cgltf_attribute_type_texcoord = 4;
  _cgltf_attribute_type_color = 5;
  _cgltf_attribute_type_joints = 6;
  _cgltf_attribute_type_weights = 7;

type
  _cgltf_component_type = Integer;
  _Pcgltf_component_type = ^_cgltf_component_type;

const
  _cgltf_component_type_invalid = 0;
  _cgltf_component_type_r_8 = 1;
  _cgltf_component_type_r_8u = 2;
  _cgltf_component_type_r_16 = 3;
  _cgltf_component_type_r_16u = 4;
  _cgltf_component_type_r_32u = 5;
  _cgltf_component_type_r_32f = 6;

type
  _cgltf_type = Integer;
  _Pcgltf_type = ^_cgltf_type;

const
  _cgltf_type_invalid = 0;
  _cgltf_type_scalar = 1;
  _cgltf_type_vec2 = 2;
  _cgltf_type_vec3 = 3;
  _cgltf_type_vec4 = 4;
  _cgltf_type_mat2 = 5;
  _cgltf_type_mat3 = 6;
  _cgltf_type_mat4 = 7;

type
  _cgltf_primitive_type = Integer;
  _Pcgltf_primitive_type = ^_cgltf_primitive_type;

const
  _cgltf_primitive_type_points = 0;
  _cgltf_primitive_type_lines = 1;
  _cgltf_primitive_type_line_loop = 2;
  _cgltf_primitive_type_line_strip = 3;
  _cgltf_primitive_type_triangles = 4;
  _cgltf_primitive_type_triangle_strip = 5;
  _cgltf_primitive_type_triangle_fan = 6;

type
  _cgltf_alpha_mode = Integer;
  _Pcgltf_alpha_mode = ^_cgltf_alpha_mode;

const
  _cgltf_alpha_mode_opaque = 0;
  _cgltf_alpha_mode_mask = 1;
  _cgltf_alpha_mode_blend = 2;

type
  _cgltf_animation_path_type = Integer;
  _Pcgltf_animation_path_type = ^_cgltf_animation_path_type;

const
  _cgltf_animation_path_type_invalid = 0;
  _cgltf_animation_path_type_translation = 1;
  _cgltf_animation_path_type_rotation = 2;
  _cgltf_animation_path_type_scale = 3;
  _cgltf_animation_path_type_weights = 4;

type
  _cgltf_interpolation_type = Integer;
  _Pcgltf_interpolation_type = ^_cgltf_interpolation_type;

const
  _cgltf_interpolation_type_linear = 0;
  _cgltf_interpolation_type_step = 1;
  _cgltf_interpolation_type_cubic_spline = 2;

type
  _cgltf_camera_type = Integer;
  _Pcgltf_camera_type = ^_cgltf_camera_type;

const
  _cgltf_camera_type_invalid = 0;
  _cgltf_camera_type_perspective = 1;
  _cgltf_camera_type_orthographic = 2;

type
  _cgltf_light_type = Integer;
  _Pcgltf_light_type = ^_cgltf_light_type;

const
  _cgltf_light_type_invalid = 0;
  _cgltf_light_type_directional = 1;
  _cgltf_light_type_point = 2;
  _cgltf_light_type_spot = 3;

type
  // Forward declarations
  PPUTF8Char = ^PUTF8Char;
  _Pcgltf_options = ^_cgltf_options;
  _Pcgltf_extras = ^_cgltf_extras;
  _Pcgltf_buffer = ^_cgltf_buffer;
  _Pcgltf_buffer_view = ^_cgltf_buffer_view;
  _Pcgltf_accessor_sparse = ^_cgltf_accessor_sparse;
  _Pcgltf_accessor = ^_cgltf_accessor;
  _Pcgltf_attribute = ^_cgltf_attribute;
  _Pcgltf_image = ^_cgltf_image;
  _Pcgltf_sampler = ^_cgltf_sampler;
  _Pcgltf_texture = ^_cgltf_texture;
  _Pcgltf_texture_transform = ^_cgltf_texture_transform;
  _Pcgltf_texture_view = ^_cgltf_texture_view;
  _Pcgltf_pbr_metallic_roughness = ^_cgltf_pbr_metallic_roughness;
  _Pcgltf_pbr_specular_glossiness = ^_cgltf_pbr_specular_glossiness;
  _Pcgltf_material = ^_cgltf_material;
  _Pcgltf_morph_target = ^_cgltf_morph_target;
  _Pcgltf_primitive = ^_cgltf_primitive;
  _Pcgltf_mesh = ^_cgltf_mesh;
  _Pcgltf_skin = ^_cgltf_skin;
  _Pcgltf_camera_perspective = ^_cgltf_camera_perspective;
  _Pcgltf_camera_orthographic = ^_cgltf_camera_orthographic;
  _Pcgltf_camera = ^_cgltf_camera;
  _Pcgltf_light = ^_cgltf_light;
  _Pcgltf_node = ^_cgltf_node;
  _PPcgltf_node = ^_Pcgltf_node;
  _Pcgltf_scene = ^_cgltf_scene;
  _Pcgltf_animation_sampler = ^_cgltf_animation_sampler;
  _Pcgltf_animation_channel = ^_cgltf_animation_channel;
  _Pcgltf_animation = ^_cgltf_animation;
  _Pcgltf_asset = ^_cgltf_asset;
  _Pcgltf_data = ^_cgltf_data;
  _PPcgltf_data = ^_Pcgltf_data;

  _cgltf_size = NativeUInt;
  _Pcgltf_size = ^_cgltf_size;
  _cgltf_float = Single;
  _Pcgltf_float = ^_cgltf_float;
  _cgltf_int = Integer;
  _cgltf_bool = Integer;

  _cgltf_options = record
    &type: _cgltf_file_type;
    json_token_count: _cgltf_size;
    memory_alloc: function(user: Pointer; size: _cgltf_size): Pointer; cdecl;
    memory_free: procedure(user: Pointer; ptr: Pointer); cdecl;
    memory_user_data: Pointer;
  end;

  _cgltf_extras = record
    start_offset: _cgltf_size;
    end_offset: _cgltf_size;
  end;

  _cgltf_buffer = record
    size: _cgltf_size;
    uri: PUTF8Char;
    data: Pointer;
    extras: _cgltf_extras;
  end;

  _cgltf_buffer_view = record
    buffer: _Pcgltf_buffer;
    offset: _cgltf_size;
    size: _cgltf_size;
    stride: _cgltf_size;
    &type: _cgltf_buffer_view_type;
    extras: _cgltf_extras;
  end;

  _cgltf_accessor_sparse = record
    count: _cgltf_size;
    indices_buffer_view: _Pcgltf_buffer_view;
    indices_byte_offset: _cgltf_size;
    indices_component_type: _cgltf_component_type;
    values_buffer_view: _Pcgltf_buffer_view;
    values_byte_offset: _cgltf_size;
    extras: _cgltf_extras;
    indices_extras: _cgltf_extras;
    values_extras: _cgltf_extras;
  end;

  _cgltf_accessor = record
    component_type: _cgltf_component_type;
    normalized: _cgltf_bool;
    &type: _cgltf_type;
    offset: _cgltf_size;
    count: _cgltf_size;
    stride: _cgltf_size;
    buffer_view: _Pcgltf_buffer_view;
    has_min: _cgltf_bool;
    min: array [0..15] of _cgltf_float;
    has_max: _cgltf_bool;
    max: array [0..15] of _cgltf_float;
    is_sparse: _cgltf_bool;
    sparse: _cgltf_accessor_sparse;
    extras: _cgltf_extras;
  end;

  _cgltf_attribute = record
    name: PUTF8Char;
    &type: _cgltf_attribute_type;
    index: _cgltf_int;
    data: _Pcgltf_accessor;
  end;

  _cgltf_image = record
    name: PUTF8Char;
    uri: PUTF8Char;
    buffer_view: _Pcgltf_buffer_view;
    mime_type: PUTF8Char;
    extras: _cgltf_extras;
  end;

  _cgltf_sampler = record
    mag_filter: _cgltf_int;
    min_filter: _cgltf_int;
    wrap_s: _cgltf_int;
    wrap_t: _cgltf_int;
    extras: _cgltf_extras;
  end;

  _cgltf_texture = record
    name: PUTF8Char;
    image: _Pcgltf_image;
    sampler: _Pcgltf_sampler;
    extras: _cgltf_extras;
  end;

  _cgltf_texture_transform = record
    offset: array [0..1] of _cgltf_float;
    rotation: _cgltf_float;
    scale: array [0..1] of _cgltf_float;
    texcoord: _cgltf_int;
  end;

  _cgltf_texture_view = record
    texture: _Pcgltf_texture;
    texcoord: _cgltf_int;
    scale: _cgltf_float;
    has_transform: _cgltf_bool;
    transform: _cgltf_texture_transform;
    extras: _cgltf_extras;
  end;

  _cgltf_pbr_metallic_roughness = record
    base_color_texture: _cgltf_texture_view;
    metallic_roughness_texture: _cgltf_texture_view;
    base_color_factor: array [0..3] of _cgltf_float;
    metallic_factor: _cgltf_float;
    roughness_factor: _cgltf_float;
    extras: _cgltf_extras;
  end;

  _cgltf_pbr_specular_glossiness = record
    diffuse_texture: _cgltf_texture_view;
    specular_glossiness_texture: _cgltf_texture_view;
    diffuse_factor: array [0..3] of _cgltf_float;
    specular_factor: array [0..2] of _cgltf_float;
    glossiness_factor: _cgltf_float;
  end;

  _cgltf_material = record
    name: PUTF8Char;
    has_pbr_metallic_roughness: _cgltf_bool;
    has_pbr_specular_glossiness: _cgltf_bool;
    pbr_metallic_roughness: _cgltf_pbr_metallic_roughness;
    pbr_specular_glossiness: _cgltf_pbr_specular_glossiness;
    normal_texture: _cgltf_texture_view;
    occlusion_texture: _cgltf_texture_view;
    emissive_texture: _cgltf_texture_view;
    emissive_factor: array [0..2] of _cgltf_float;
    alpha_mode: _cgltf_alpha_mode;
    alpha_cutoff: _cgltf_float;
    double_sided: _cgltf_bool;
    unlit: _cgltf_bool;
    extras: _cgltf_extras;
  end;

  _cgltf_morph_target = record
    attributes: _Pcgltf_attribute;
    attributes_count: _cgltf_size;
  end;

  _cgltf_primitive = record
    &type: _cgltf_primitive_type;
    indices: _Pcgltf_accessor;
    material: _Pcgltf_material;
    attributes: _Pcgltf_attribute;
    attributes_count: _cgltf_size;
    targets: _Pcgltf_morph_target;
    targets_count: _cgltf_size;
    extras: _cgltf_extras;
  end;

  _cgltf_mesh = record
    name: PUTF8Char;
    primitives: _Pcgltf_primitive;
    primitives_count: _cgltf_size;
    weights: _Pcgltf_float;
    weights_count: _cgltf_size;
    extras: _cgltf_extras;
  end;

  _cgltf_skin = record
    name: PUTF8Char;
    joints: _PPcgltf_node;
    joints_count: _cgltf_size;
    skeleton: _Pcgltf_node;
    inverse_bind_matrices: _Pcgltf_accessor;
    extras: _cgltf_extras;
  end;

  _cgltf_camera_perspective = record
    aspect_ratio: _cgltf_float;
    yfov: _cgltf_float;
    zfar: _cgltf_float;
    znear: _cgltf_float;
    extras: _cgltf_extras;
  end;

  _cgltf_camera_orthographic = record
    xmag: _cgltf_float;
    ymag: _cgltf_float;
    zfar: _cgltf_float;
    znear: _cgltf_float;
    extras: _cgltf_extras;
  end;

  _anonymous_type_1 = record
    case Integer of
      0: (perspective: _cgltf_camera_perspective);
      1: (orthographic: _cgltf_camera_orthographic);
  end;
  P_anonymous_type_1 = ^_anonymous_type_1;

  _cgltf_camera = record
    name: PUTF8Char;
    &type: _cgltf_camera_type;
    f3: _anonymous_type_1;
    extras: _cgltf_extras;
  end;

  _cgltf_light = record
    name: PUTF8Char;
    color: array [0..2] of _cgltf_float;
    intensity: _cgltf_float;
    &type: _cgltf_light_type;
    range: _cgltf_float;
    spot_inner_cone_angle: _cgltf_float;
    spot_outer_cone_angle: _cgltf_float;
  end;

  _cgltf_node = record
    name: PUTF8Char;
    parent: _Pcgltf_node;
    children: _PPcgltf_node;
    children_count: _cgltf_size;
    skin: _Pcgltf_skin;
    mesh: _Pcgltf_mesh;
    camera: _Pcgltf_camera;
    light: _Pcgltf_light;
    weights: _Pcgltf_float;
    weights_count: _cgltf_size;
    has_translation: _cgltf_bool;
    has_rotation: _cgltf_bool;
    has_scale: _cgltf_bool;
    has_matrix: _cgltf_bool;
    translation: array [0..2] of _cgltf_float;
    rotation: array [0..3] of _cgltf_float;
    scale: array [0..2] of _cgltf_float;
    matrix: array [0..15] of _cgltf_float;
    extras: _cgltf_extras;
  end;

  _cgltf_scene = record
    name: PUTF8Char;
    nodes: _PPcgltf_node;
    nodes_count: _cgltf_size;
    extras: _cgltf_extras;
  end;

  _cgltf_animation_sampler = record
    input: _Pcgltf_accessor;
    output: _Pcgltf_accessor;
    interpolation: _cgltf_interpolation_type;
    extras: _cgltf_extras;
  end;

  _cgltf_animation_channel = record
    sampler: _Pcgltf_animation_sampler;
    target_node: _Pcgltf_node;
    target_path: _cgltf_animation_path_type;
    extras: _cgltf_extras;
  end;

  _cgltf_animation = record
    name: PUTF8Char;
    samplers: _Pcgltf_animation_sampler;
    samplers_count: _cgltf_size;
    channels: _Pcgltf_animation_channel;
    channels_count: _cgltf_size;
    extras: _cgltf_extras;
  end;

  _cgltf_asset = record
    copyright: PUTF8Char;
    generator: PUTF8Char;
    version: PUTF8Char;
    min_version: PUTF8Char;
    extras: _cgltf_extras;
  end;

  _cgltf_data = record
    file_type: _cgltf_file_type;
    file_data: Pointer;
    asset: _cgltf_asset;
    meshes: _Pcgltf_mesh;
    meshes_count: _cgltf_size;
    materials: _Pcgltf_material;
    materials_count: _cgltf_size;
    accessors: _Pcgltf_accessor;
    accessors_count: _cgltf_size;
    buffer_views: _Pcgltf_buffer_view;
    buffer_views_count: _cgltf_size;
    buffers: _Pcgltf_buffer;
    buffers_count: _cgltf_size;
    images: _Pcgltf_image;
    images_count: _cgltf_size;
    textures: _Pcgltf_texture;
    textures_count: _cgltf_size;
    samplers: _Pcgltf_sampler;
    samplers_count: _cgltf_size;
    skins: _Pcgltf_skin;
    skins_count: _cgltf_size;
    cameras: _Pcgltf_camera;
    cameras_count: _cgltf_size;
    lights: _Pcgltf_light;
    lights_count: _cgltf_size;
    nodes: _Pcgltf_node;
    nodes_count: _cgltf_size;
    scenes: _Pcgltf_scene;
    scenes_count: _cgltf_size;
    scene: _Pcgltf_scene;
    animations: _Pcgltf_animation;
    animations_count: _cgltf_size;
    extras: _cgltf_extras;
    json: PUTF8Char;
    json_size: _cgltf_size;
    extensions_used: PPUTF8Char;
    extensions_used_count: _cgltf_size;
    extensions_required: PPUTF8Char;
    extensions_required_count: _cgltf_size;
    bin: Pointer;
    bin_size: _cgltf_size;
    memory_free: procedure(user: Pointer; ptr: Pointer); cdecl;
    memory_user_data: Pointer;
  end;

function _cgltf_parse(const options: _Pcgltf_options; const data: Pointer; size: _cgltf_size; out_data: _PPcgltf_data): _cgltf_result; cdecl;
  external _LIB_CGLTF name _PU + 'cgltf_parse';

function _cgltf_load_buffers(const options: _Pcgltf_options; data: _Pcgltf_data; const gltf_path: PUTF8Char): _cgltf_result; cdecl;
  external _LIB_CGLTF name _PU + 'cgltf_load_buffers';

function _cgltf_load_buffer_base64(const options: _Pcgltf_options; size: _cgltf_size; const base64: PUTF8Char; out_data: PPointer): _cgltf_result; cdecl;
  external _LIB_CGLTF name _PU + 'cgltf_load_buffer_base64';

function _cgltf_validate(data: _Pcgltf_data): _cgltf_result; cdecl;
  external _LIB_CGLTF name _PU + 'cgltf_validate';

procedure _cgltf_free(data: _Pcgltf_data); cdecl;
  external _LIB_CGLTF name _PU + 'cgltf_free';

procedure _cgltf_node_transform_local(const node: _Pcgltf_node; out_matrix: _Pcgltf_float); cdecl;
  external _LIB_CGLTF name _PU + 'cgltf_node_transform_local';

procedure _cgltf_node_transform_world(const node: _Pcgltf_node; out_matrix: _Pcgltf_float); cdecl;
  external _LIB_CGLTF name _PU + 'cgltf_node_transform_world';

function _cgltf_accessor_read_float(const accessor: _Pcgltf_accessor; index: _cgltf_size; &out: _Pcgltf_float; element_size: _cgltf_size): _cgltf_bool; cdecl;
  external _LIB_CGLTF name _PU + 'cgltf_accessor_read_float';

function _cgltf_accessor_read_index(const accessor: _Pcgltf_accessor; index: _cgltf_size): _cgltf_size; cdecl;
  external _LIB_CGLTF name _PU + 'cgltf_accessor_read_index';

function _cgltf_copy_extras_json(const data: _Pcgltf_data; const extras: _Pcgltf_extras; dest: PUTF8Char; dest_size: _Pcgltf_size): _cgltf_result; cdecl;
  external _LIB_CGLTF name _PU + 'cgltf_copy_extras_json';

implementation

end.