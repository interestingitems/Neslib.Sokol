unit UniformTypesShader;
{ #version:1# (machine generated, don't edit!)

  Generated by sokol-shdc (https://github.com/floooh/sokol-tools)
  With Delphi modifications (https://github.com/neslib/Neslib.Sokol.Tools)

  Cmdline: sokol-shdc --input UniformTypesShader.glsl --output UniformTypesShader.pas

  Overview:

    Shader program 'uniformtypes':
      Get shader desc: UniformtypesShaderDesc()
      Vertex shader: vs
        Attribute slots:
          ATTR_VS_POSITION = 0
        Uniform block 'vs_params':
          Delphi record: TVSParams
          Bind slot: SLOT_VS_PARAMS = 0
      Fragment shader: fs


  Shader descriptor records:

    var UniformtypesShader := TShader.Create(UniformtypesShaderDesc);

  Vertex attribute locations for vertex shader 'vs':

    var PipDesc: TPipelineDesc;
    PipDesc.Init;
    PipDesc.Attrs[ATTR_VS_POSITION]. ...
    PipDesc. ...
    var Pip := TPipeline.Create(PipDesc);

  Image bind slots, use as index in TBindings.VSImages[] or .FSImages[]:


  Bind slot and Delphi record for uniform block 'VSParams':

    VSParams: TVSParams;
    VSParams.Offset := ...;
    VSParams.Scale := ...;
    VSParams.Sel := ...;
    VSParams.I2 := ...;
    VSParams.I1 := ...;
    VSParams.I4 := ...;
    VSParams.Pal := ...;
    VSParams.I3 := ...;
    TGfx.ApplyUniforms(TShaderStage.[VertexShader|FragmentShader], SLOT_VS_PARAMS, TRange.Create(VSParams));

}

{$INCLUDE 'Neslib.Sokol.inc'}

interface

uses
  Neslib.FastMath,
  Neslib.Sokol.Gfx;

const
  ATTR_VS_POSITION = 0;

const
  SLOT_VS_PARAMS = 0;

type
  TVSParams = packed record
  public
    Offset: TVector2;
    Scale: TVector2;
    Sel: Integer;
    _Pad20: array [0..3] of UInt8;
    I2: TIVector2;
    I1: Integer;
    _Pad36: array [0..11] of UInt8;
    I4: TIVector4;
    Pal: array [0..9] of TVector4;
    I3: TIVector3;
    _Pad236: array [0..3] of UInt8;
  end;

function UniformtypesShaderDesc: PNativeShaderDesc;

implementation

uses
  Neslib.Sokol.Api;

{$IFDEF SOKOL_GLCORE33}
const
  VS_SOURCE_GLSL330 =
    '#version 330'#10+

    'struct vs_params'#10+
    '{'#10+
    '    vec2 offset;'#10+
    '    vec2 scale;'#10+
    '    int sel;'#10+
    '    ivec2 i2;'#10+
    '    int i1;'#10+
    '    ivec4 i4;'#10+
    '    vec4 pal[10];'#10+
    '    ivec3 i3;'#10+
    '};'#10+

    'uniform vs_params _29;'#10+

    'layout(location = 0) in vec2 position;'#10+
    'out vec4 color;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_Position = vec4((position * _29.scale) + _29.offset, 0.0, 1.0);'#10+
    '    if (_29.sel == 0)'#10+
    '    {'#10+
    '        color = _29.pal[_29.i1];'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        if (_29.sel == 1)'#10+
    '        {'#10+
    '            color = _29.pal[_29.i2.x];'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            if (_29.sel == 2)'#10+
    '            {'#10+
    '                color = _29.pal[_29.i2.y];'#10+
    '            }'#10+
    '            else'#10+
    '            {'#10+
    '                if (_29.sel == 3)'#10+
    '                {'#10+
    '                    color = _29.pal[_29.i3.x];'#10+
    '                }'#10+
    '                else'#10+
    '                {'#10+
    '                    if (_29.sel == 4)'#10+
    '                    {'#10+
    '                        color = _29.pal[_29.i3.y];'#10+
    '                    }'#10+
    '                    else'#10+
    '                    {'#10+
    '                        if (_29.sel == 5)'#10+
    '                        {'#10+
    '                            color = _29.pal[_29.i3.z];'#10+
    '                        }'#10+
    '                        else'#10+
    '                        {'#10+
    '                            if (_29.sel == 6)'#10+
    '                            {'#10+
    '                                color = _29.pal[_29.i4.x];'#10+
    '                            }'#10+
    '                            else'#10+
    '                            {'#10+
    '                                if (_29.sel == 7)'#10+
    '                                {'#10+
    '                                    color = _29.pal[_29.i4.y];'#10+
    '                                }'#10+
    '                                else'#10+
    '                                {'#10+
    '                                    if (_29.sel == 8)'#10+
    '                                    {'#10+
    '                                        color = _29.pal[_29.i4.z];'#10+
    '                                    }'#10+
    '                                    else'#10+
    '                                    {'#10+
    '                                        if (_29.sel == 9)'#10+
    '                                        {'#10+
    '                                            color = _29.pal[_29.i4.w];'#10+
    '                                        }'#10+
    '                                        else'#10+
    '                                        {'#10+
    '                                            color = vec4(1.0);'#10+
    '                                        }'#10+
    '                                    }'#10+
    '                                }'#10+
    '                            }'#10+
    '                        }'#10+
    '                    }'#10+
    '                }'#10+
    '            }'#10+
    '        }'#10+
    '    }'#10+
    '}';

const
  FS_SOURCE_GLSL330 =
    '#version 330'#10+

    'layout(location = 0) out vec4 frag_color;'#10+
    'in vec4 color;'#10+

    'void main()'#10+
    '{'#10+
    '    frag_color = color;'#10+
    '}';

{$ENDIF !SOKOL_GLCORE33}

{$IFDEF SOKOL_GLES2}
const
  VS_SOURCE_GLSL100 =
    '#version 100'#10+

    'struct vs_params'#10+
    '{'#10+
    '    vec2 offset;'#10+
    '    vec2 scale;'#10+
    '    int sel;'#10+
    '    ivec2 i2;'#10+
    '    int i1;'#10+
    '    ivec4 i4;'#10+
    '    vec4 pal[10];'#10+
    '    ivec3 i3;'#10+
    '};'#10+

    'uniform vs_params _29;'#10+

    'attribute vec2 position;'#10+
    'varying vec4 color;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_Position = vec4((position * _29.scale) + _29.offset, 0.0, 1.0);'#10+
    '    if (_29.sel == 0)'#10+
    '    {'#10+
    '        color = _29.pal[_29.i1];'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        if (_29.sel == 1)'#10+
    '        {'#10+
    '            color = _29.pal[_29.i2.x];'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            if (_29.sel == 2)'#10+
    '            {'#10+
    '                color = _29.pal[_29.i2.y];'#10+
    '            }'#10+
    '            else'#10+
    '            {'#10+
    '                if (_29.sel == 3)'#10+
    '                {'#10+
    '                    color = _29.pal[_29.i3.x];'#10+
    '                }'#10+
    '                else'#10+
    '                {'#10+
    '                    if (_29.sel == 4)'#10+
    '                    {'#10+
    '                        color = _29.pal[_29.i3.y];'#10+
    '                    }'#10+
    '                    else'#10+
    '                    {'#10+
    '                        if (_29.sel == 5)'#10+
    '                        {'#10+
    '                            color = _29.pal[_29.i3.z];'#10+
    '                        }'#10+
    '                        else'#10+
    '                        {'#10+
    '                            if (_29.sel == 6)'#10+
    '                            {'#10+
    '                                color = _29.pal[_29.i4.x];'#10+
    '                            }'#10+
    '                            else'#10+
    '                            {'#10+
    '                                if (_29.sel == 7)'#10+
    '                                {'#10+
    '                                    color = _29.pal[_29.i4.y];'#10+
    '                                }'#10+
    '                                else'#10+
    '                                {'#10+
    '                                    if (_29.sel == 8)'#10+
    '                                    {'#10+
    '                                        color = _29.pal[_29.i4.z];'#10+
    '                                    }'#10+
    '                                    else'#10+
    '                                    {'#10+
    '                                        if (_29.sel == 9)'#10+
    '                                        {'#10+
    '                                            color = _29.pal[_29.i4.w];'#10+
    '                                        }'#10+
    '                                        else'#10+
    '                                        {'#10+
    '                                            color = vec4(1.0);'#10+
    '                                        }'#10+
    '                                    }'#10+
    '                                }'#10+
    '                            }'#10+
    '                        }'#10+
    '                    }'#10+
    '                }'#10+
    '            }'#10+
    '        }'#10+
    '    }'#10+
    '}';

const
  FS_SOURCE_GLSL100 =
    '#version 100'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'varying highp vec4 color;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_FragData[0] = color;'#10+
    '}';

{$ENDIF !SOKOL_GLES2}

{$IFDEF SOKOL_GLES3}
const
  VS_SOURCE_GLSL300ES =
    '#version 300 es'#10+

    'struct vs_params'#10+
    '{'#10+
    '    vec2 offset;'#10+
    '    vec2 scale;'#10+
    '    int sel;'#10+
    '    ivec2 i2;'#10+
    '    int i1;'#10+
    '    ivec4 i4;'#10+
    '    vec4 pal[10];'#10+
    '    ivec3 i3;'#10+
    '};'#10+

    'uniform vs_params _29;'#10+

    'layout(location = 0) in vec2 position;'#10+
    'out vec4 color;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_Position = vec4((position * _29.scale) + _29.offset, 0.0, 1.0);'#10+
    '    if (_29.sel == 0)'#10+
    '    {'#10+
    '        color = _29.pal[_29.i1];'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        if (_29.sel == 1)'#10+
    '        {'#10+
    '            color = _29.pal[_29.i2.x];'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            if (_29.sel == 2)'#10+
    '            {'#10+
    '                color = _29.pal[_29.i2.y];'#10+
    '            }'#10+
    '            else'#10+
    '            {'#10+
    '                if (_29.sel == 3)'#10+
    '                {'#10+
    '                    color = _29.pal[_29.i3.x];'#10+
    '                }'#10+
    '                else'#10+
    '                {'#10+
    '                    if (_29.sel == 4)'#10+
    '                    {'#10+
    '                        color = _29.pal[_29.i3.y];'#10+
    '                    }'#10+
    '                    else'#10+
    '                    {'#10+
    '                        if (_29.sel == 5)'#10+
    '                        {'#10+
    '                            color = _29.pal[_29.i3.z];'#10+
    '                        }'#10+
    '                        else'#10+
    '                        {'#10+
    '                            if (_29.sel == 6)'#10+
    '                            {'#10+
    '                                color = _29.pal[_29.i4.x];'#10+
    '                            }'#10+
    '                            else'#10+
    '                            {'#10+
    '                                if (_29.sel == 7)'#10+
    '                                {'#10+
    '                                    color = _29.pal[_29.i4.y];'#10+
    '                                }'#10+
    '                                else'#10+
    '                                {'#10+
    '                                    if (_29.sel == 8)'#10+
    '                                    {'#10+
    '                                        color = _29.pal[_29.i4.z];'#10+
    '                                    }'#10+
    '                                    else'#10+
    '                                    {'#10+
    '                                        if (_29.sel == 9)'#10+
    '                                        {'#10+
    '                                            color = _29.pal[_29.i4.w];'#10+
    '                                        }'#10+
    '                                        else'#10+
    '                                        {'#10+
    '                                            color = vec4(1.0);'#10+
    '                                        }'#10+
    '                                    }'#10+
    '                                }'#10+
    '                            }'#10+
    '                        }'#10+
    '                    }'#10+
    '                }'#10+
    '            }'#10+
    '        }'#10+
    '    }'#10+
    '}';

const
  FS_SOURCE_GLSL300ES =
    '#version 300 es'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'layout(location = 0) out highp vec4 frag_color;'#10+
    'in highp vec4 color;'#10+

    'void main()'#10+
    '{'#10+
    '    frag_color = color;'#10+
    '}';

{$ENDIF !SOKOL_GLES3}

{$IFDEF SOKOL_D3D11}
const
  VS_SOURCE_HLSL5 =
    'cbuffer vs_params : register(b0)'#10+
    '{'#10+
    '    float2 _29_offset : packoffset(c0);'#10+
    '    float2 _29_scale : packoffset(c0.z);'#10+
    '    int _29_sel : packoffset(c1);'#10+
    '    int2 _29_i2 : packoffset(c1.z);'#10+
    '    int _29_i1 : packoffset(c2);'#10+
    '    int4 _29_i4 : packoffset(c3);'#10+
    '    float4 _29_pal[10] : packoffset(c4);'#10+
    '    int3 _29_i3 : packoffset(c14);'#10+
    '};'#10+


    'static float4 gl_Position;'#10+
    'static float2 position;'#10+
    'static float4 color;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float2 position : TEXCOORD0;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float4 color : TEXCOORD0;'#10+
    '    float4 gl_Position : SV_Position;'#10+
    '};'#10+

    'void vert_main()'#10+
    '{'#10+
    '    gl_Position = float4((position * _29_scale) + _29_offset, 0.0f, 1.0f);'#10+
    '    if (_29_sel == 0)'#10+
    '    {'#10+
    '        color = _29_pal[_29_i1];'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        if (_29_sel == 1)'#10+
    '        {'#10+
    '            color = _29_pal[_29_i2.x];'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            if (_29_sel == 2)'#10+
    '            {'#10+
    '                color = _29_pal[_29_i2.y];'#10+
    '            }'#10+
    '            else'#10+
    '            {'#10+
    '                if (_29_sel == 3)'#10+
    '                {'#10+
    '                    color = _29_pal[_29_i3.x];'#10+
    '                }'#10+
    '                else'#10+
    '                {'#10+
    '                    if (_29_sel == 4)'#10+
    '                    {'#10+
    '                        color = _29_pal[_29_i3.y];'#10+
    '                    }'#10+
    '                    else'#10+
    '                    {'#10+
    '                        if (_29_sel == 5)'#10+
    '                        {'#10+
    '                            color = _29_pal[_29_i3.z];'#10+
    '                        }'#10+
    '                        else'#10+
    '                        {'#10+
    '                            if (_29_sel == 6)'#10+
    '                            {'#10+
    '                                color = _29_pal[_29_i4.x];'#10+
    '                            }'#10+
    '                            else'#10+
    '                            {'#10+
    '                                if (_29_sel == 7)'#10+
    '                                {'#10+
    '                                    color = _29_pal[_29_i4.y];'#10+
    '                                }'#10+
    '                                else'#10+
    '                                {'#10+
    '                                    if (_29_sel == 8)'#10+
    '                                    {'#10+
    '                                        color = _29_pal[_29_i4.z];'#10+
    '                                    }'#10+
    '                                    else'#10+
    '                                    {'#10+
    '                                        if (_29_sel == 9)'#10+
    '                                        {'#10+
    '                                            color = _29_pal[_29_i4.w];'#10+
    '                                        }'#10+
    '                                        else'#10+
    '                                        {'#10+
    '                                            color = 1.0f.xxxx;'#10+
    '                                        }'#10+
    '                                    }'#10+
    '                                }'#10+
    '                            }'#10+
    '                        }'#10+
    '                    }'#10+
    '                }'#10+
    '            }'#10+
    '        }'#10+
    '    }'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    position = stage_input.position;'#10+
    '    vert_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.gl_Position = gl_Position;'#10+
    '    stage_output.color = color;'#10+
    '    return stage_output;'#10+
    '}';

const
  FS_SOURCE_HLSL5 =
    'static float4 frag_color;'#10+
    'static float4 color;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float4 color : TEXCOORD0;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float4 frag_color : SV_Target0;'#10+
    '};'#10+

    'void frag_main()'#10+
    '{'#10+
    '    frag_color = color;'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    color = stage_input.color;'#10+
    '    frag_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.frag_color = frag_color;'#10+
    '    return stage_output;'#10+
    '}';

{$ENDIF !SOKOL_D3D11}

{$IFDEF SOKOL_METAL}
const
  VS_SOURCE_METAL_MACOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct vs_params'#10+
    '{'#10+
    '    float2 offset;'#10+
    '    float2 scale;'#10+
    '    int sel;'#10+
    '    int2 i2;'#10+
    '    int i1;'#10+
    '    int4 i4;'#10+
    '    float4 pal[10];'#10+
    '    int3 i3;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 color [[user(locn0)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float2 position [[attribute(0)]];'#10+
    '};'#10+

    'vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _29 [[buffer(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.gl_Position = float4((in.position * _29.scale) + _29.offset, 0.0, 1.0);'#10+
    '    if (_29.sel == 0)'#10+
    '    {'#10+
    '        out.color = _29.pal[_29.i1];'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        if (_29.sel == 1)'#10+
    '        {'#10+
    '            out.color = _29.pal[_29.i2.x];'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            if (_29.sel == 2)'#10+
    '            {'#10+
    '                out.color = _29.pal[_29.i2.y];'#10+
    '            }'#10+
    '            else'#10+
    '            {'#10+
    '                if (_29.sel == 3)'#10+
    '                {'#10+
    '                    out.color = _29.pal[_29.i3.x];'#10+
    '                }'#10+
    '                else'#10+
    '                {'#10+
    '                    if (_29.sel == 4)'#10+
    '                    {'#10+
    '                        out.color = _29.pal[_29.i3.y];'#10+
    '                    }'#10+
    '                    else'#10+
    '                    {'#10+
    '                        if (_29.sel == 5)'#10+
    '                        {'#10+
    '                            out.color = _29.pal[_29.i3.z];'#10+
    '                        }'#10+
    '                        else'#10+
    '                        {'#10+
    '                            if (_29.sel == 6)'#10+
    '                            {'#10+
    '                                out.color = _29.pal[_29.i4.x];'#10+
    '                            }'#10+
    '                            else'#10+
    '                            {'#10+
    '                                if (_29.sel == 7)'#10+
    '                                {'#10+
    '                                    out.color = _29.pal[_29.i4.y];'#10+
    '                                }'#10+
    '                                else'#10+
    '                                {'#10+
    '                                    if (_29.sel == 8)'#10+
    '                                    {'#10+
    '                                        out.color = _29.pal[_29.i4.z];'#10+
    '                                    }'#10+
    '                                    else'#10+
    '                                    {'#10+
    '                                        if (_29.sel == 9)'#10+
    '                                        {'#10+
    '                                            out.color = _29.pal[_29.i4.w];'#10+
    '                                        }'#10+
    '                                        else'#10+
    '                                        {'#10+
    '                                            out.color = float4(1.0);'#10+
    '                                        }'#10+
    '                                    }'#10+
    '                                }'#10+
    '                            }'#10+
    '                        }'#10+
    '                    }'#10+
    '                }'#10+
    '            }'#10+
    '        }'#10+
    '    }'#10+
    '    return out;'#10+
    '}';

const
  FS_SOURCE_METAL_MACOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_color [[color(0)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 color [[user(locn0)]];'#10+
    '};'#10+

    'fragment main0_out main0(main0_in in [[stage_in]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.frag_color = in.color;'#10+
    '    return out;'#10+
    '}';

{$ENDIF !SOKOL_METAL}

{$IFDEF SOKOL_METAL}
const
  VS_SOURCE_METAL_IOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct vs_params'#10+
    '{'#10+
    '    float2 offset;'#10+
    '    float2 scale;'#10+
    '    int sel;'#10+
    '    int2 i2;'#10+
    '    int i1;'#10+
    '    int4 i4;'#10+
    '    float4 pal[10];'#10+
    '    int3 i3;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 color [[user(locn0)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float2 position [[attribute(0)]];'#10+
    '};'#10+

    'vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _29 [[buffer(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.gl_Position = float4((in.position * _29.scale) + _29.offset, 0.0, 1.0);'#10+
    '    if (_29.sel == 0)'#10+
    '    {'#10+
    '        out.color = _29.pal[_29.i1];'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        if (_29.sel == 1)'#10+
    '        {'#10+
    '            out.color = _29.pal[_29.i2.x];'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            if (_29.sel == 2)'#10+
    '            {'#10+
    '                out.color = _29.pal[_29.i2.y];'#10+
    '            }'#10+
    '            else'#10+
    '            {'#10+
    '                if (_29.sel == 3)'#10+
    '                {'#10+
    '                    out.color = _29.pal[_29.i3.x];'#10+
    '                }'#10+
    '                else'#10+
    '                {'#10+
    '                    if (_29.sel == 4)'#10+
    '                    {'#10+
    '                        out.color = _29.pal[_29.i3.y];'#10+
    '                    }'#10+
    '                    else'#10+
    '                    {'#10+
    '                        if (_29.sel == 5)'#10+
    '                        {'#10+
    '                            out.color = _29.pal[_29.i3.z];'#10+
    '                        }'#10+
    '                        else'#10+
    '                        {'#10+
    '                            if (_29.sel == 6)'#10+
    '                            {'#10+
    '                                out.color = _29.pal[_29.i4.x];'#10+
    '                            }'#10+
    '                            else'#10+
    '                            {'#10+
    '                                if (_29.sel == 7)'#10+
    '                                {'#10+
    '                                    out.color = _29.pal[_29.i4.y];'#10+
    '                                }'#10+
    '                                else'#10+
    '                                {'#10+
    '                                    if (_29.sel == 8)'#10+
    '                                    {'#10+
    '                                        out.color = _29.pal[_29.i4.z];'#10+
    '                                    }'#10+
    '                                    else'#10+
    '                                    {'#10+
    '                                        if (_29.sel == 9)'#10+
    '                                        {'#10+
    '                                            out.color = _29.pal[_29.i4.w];'#10+
    '                                        }'#10+
    '                                        else'#10+
    '                                        {'#10+
    '                                            out.color = float4(1.0);'#10+
    '                                        }'#10+
    '                                    }'#10+
    '                                }'#10+
    '                            }'#10+
    '                        }'#10+
    '                    }'#10+
    '                }'#10+
    '            }'#10+
    '        }'#10+
    '    }'#10+
    '    return out;'#10+
    '}';

const
  FS_SOURCE_METAL_IOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_color [[color(0)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 color [[user(locn0)]];'#10+
    '};'#10+

    'fragment main0_out main0(main0_in in [[stage_in]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.frag_color = in.color;'#10+
    '    return out;'#10+
    '}';

{$ENDIF !SOKOL_METAL}

var
  GUniformtypesShaderDesc: TNativeShaderDesc;

procedure InitUniformtypesShaderDesc;
begin
  GUniformtypesShaderDesc.Init;
  GUniformtypesShaderDesc.Attrs[0].Init('position', 'TEXCOORD', 0);

  case TGfx.Backend of
    {$IFDEF SOKOL_GLCORE33}
    TBackend.GLCore33:
      begin
        GUniformtypesShaderDesc.VS.Source := VS_SOURCE_GLSL330;
        GUniformtypesShaderDesc.FS.Source := FS_SOURCE_GLSL330;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES2}
    TBackend.Gles2:
      begin
        GUniformtypesShaderDesc.VS.Source := VS_SOURCE_GLSL100;
        GUniformtypesShaderDesc.FS.Source := FS_SOURCE_GLSL100;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES3}
    TBackend.Gles3:
      begin
        GUniformtypesShaderDesc.VS.Source := VS_SOURCE_GLSL300ES;
        GUniformtypesShaderDesc.FS.Source := FS_SOURCE_GLSL300ES;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_D3D11}
    TBackend.D3D11:
      begin
        GUniformtypesShaderDesc.VS.Source := VS_SOURCE_HLSL5;
        GUniformtypesShaderDesc.FS.Source := FS_SOURCE_HLSL5;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalMacOS:
      begin
        GUniformtypesShaderDesc.VS.Source := VS_SOURCE_METAL_MACOS;
        GUniformtypesShaderDesc.FS.Source := FS_SOURCE_METAL_MACOS;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalIOS:
      begin
        GUniformtypesShaderDesc.VS.Source := VS_SOURCE_METAL_IOS;
        GUniformtypesShaderDesc.FS.Source := FS_SOURCE_METAL_IOS;
      end;
    {$ENDIF}
  else
    Assert(False)
  end;

  GUniformtypesShaderDesc.vs.uniform_blocks[0].size := 240;
  GUniformtypesShaderDesc.vs.uniform_blocks[0].layout := _SG_UNIFORMLAYOUT_STD140;
  if (TGfx.Backend.IsGL) then
    GUniformtypesShaderDesc.vs.uniform_blocks[0].uniforms[0].Init('_29.offset', _SG_UNIFORMTYPE_FLOAT2, 1);
    GUniformtypesShaderDesc.vs.uniform_blocks[0].uniforms[1].Init('_29.scale', _SG_UNIFORMTYPE_FLOAT2, 1);
    GUniformtypesShaderDesc.vs.uniform_blocks[0].uniforms[2].Init('_29.sel', _SG_UNIFORMTYPE_INT, 1);
    GUniformtypesShaderDesc.vs.uniform_blocks[0].uniforms[3].Init('_29.i2', _SG_UNIFORMTYPE_INT2, 1);
    GUniformtypesShaderDesc.vs.uniform_blocks[0].uniforms[4].Init('_29.i1', _SG_UNIFORMTYPE_INT, 1);
    GUniformtypesShaderDesc.vs.uniform_blocks[0].uniforms[5].Init('_29.i4', _SG_UNIFORMTYPE_INT4, 1);
    GUniformtypesShaderDesc.vs.uniform_blocks[0].uniforms[6].Init('_29.pal', _SG_UNIFORMTYPE_FLOAT4, 10);
    GUniformtypesShaderDesc.vs.uniform_blocks[0].uniforms[7].Init('_29.i3', _SG_UNIFORMTYPE_INT3, 1);
  GUniformtypesShaderDesc.&label := 'UniformtypesShader';
end;

function UniformtypesShaderDesc: PNativeShaderDesc;
begin
  if (GUniformtypesShaderDesc.VS.Entry = nil) then
    InitUniformtypesShaderDesc;

  Result := @GUniformtypesShaderDesc;
end;

end.
