unit glTFShader;
{ #version:1# (machine generated, don't edit!)

  Generated by sokol-shdc (https://github.com/floooh/sokol-tools)
  With Delphi modifications (https://github.com/neslib/Neslib.Sokol.Tools)

  Cmdline: sokol-shdc --input glTFShader.glsl --output glTFShader.pas

  Overview:

    Shader program 'gltf_metallic':
      Get shader desc: GltfMetallicShaderDesc()
      Vertex shader: vs
        Attribute slots:
          ATTR_VS_POSITION = 0
          ATTR_VS_NORMAL = 1
          ATTR_VS_TEXCOORD = 2
        Uniform block 'vs_params':
          Delphi record: TVSParams
          Bind slot: SLOT_VS_PARAMS = 0
      Fragment shader: metallic_fs
        Uniform block 'light_params':
          Delphi record: TLightParams
          Bind slot: SLOT_LIGHT_PARAMS = 0
        Uniform block 'metallic_params':
          Delphi record: TMetallicParams
          Bind slot: SLOT_METALLIC_PARAMS = 1
        Image 'normal_texture':
          Type: _SG_IMAGETYPE_2D
          Component Type: _SG_SAMPLERTYPE_FLOAT
          Bind slot: SLOT_NORMAL_TEXTURE = 0
        Image 'metallic_roughness_texture':
          Type: _SG_IMAGETYPE_2D
          Component Type: _SG_SAMPLERTYPE_FLOAT
          Bind slot: SLOT_METALLIC_ROUGHNESS_TEXTURE = 1
        Image 'base_color_texture':
          Type: _SG_IMAGETYPE_2D
          Component Type: _SG_SAMPLERTYPE_FLOAT
          Bind slot: SLOT_BASE_COLOR_TEXTURE = 2
        Image 'occlusion_texture':
          Type: _SG_IMAGETYPE_2D
          Component Type: _SG_SAMPLERTYPE_FLOAT
          Bind slot: SLOT_OCCLUSION_TEXTURE = 3
        Image 'emissive_texture':
          Type: _SG_IMAGETYPE_2D
          Component Type: _SG_SAMPLERTYPE_FLOAT
          Bind slot: SLOT_EMISSIVE_TEXTURE = 4


  Shader descriptor records:

    var GltfMetallicShader := TShader.Create(GltfMetallicShaderDesc);

  Vertex attribute locations for vertex shader 'vs':

    var PipDesc: TPipelineDesc;
    PipDesc.Init;
    PipDesc.Attrs[ATTR_VS_POSITION]. ...
    PipDesc.Attrs[ATTR_VS_NORMAL]. ...
    PipDesc.Attrs[ATTR_VS_TEXCOORD]. ...
    PipDesc. ...
    var Pip := TPipeline.Create(PipDesc);

  Image bind slots, use as index in TBindings.VSImages[] or .FSImages[]:

    SLOT_NORMAL_TEXTURE = 0;
    SLOT_METALLIC_ROUGHNESS_TEXTURE = 1;
    SLOT_BASE_COLOR_TEXTURE = 2;
    SLOT_OCCLUSION_TEXTURE = 3;
    SLOT_EMISSIVE_TEXTURE = 4;

  Bind slot and Delphi record for uniform block 'VSParams':

    VSParams: TVSParams;
    VSParams.Model := ...;
    VSParams.ViewProj := ...;
    VSParams.EyePos := ...;
    TGfx.ApplyUniforms(TShaderStage.[VertexShader|FragmentShader], SLOT_VS_PARAMS, TRange.Create(VSParams));

  Bind slot and Delphi record for uniform block 'LightParams':

    LightParams: TLightParams;
    LightParams.LightPos := ...;
    LightParams.LightRange := ...;
    LightParams.LightColor := ...;
    LightParams.LightIntensity := ...;
    TGfx.ApplyUniforms(TShaderStage.[VertexShader|FragmentShader], SLOT_LIGHT_PARAMS, TRange.Create(LightParams));

  Bind slot and Delphi record for uniform block 'MetallicParams':

    MetallicParams: TMetallicParams;
    MetallicParams.BaseColorFactor := ...;
    MetallicParams.EmissiveFactor := ...;
    MetallicParams.MetallicFactor := ...;
    MetallicParams.RoughnessFactor := ...;
    TGfx.ApplyUniforms(TShaderStage.[VertexShader|FragmentShader], SLOT_METALLIC_PARAMS, TRange.Create(MetallicParams));

}

{$INCLUDE 'Neslib.Sokol.inc'}

interface

uses
  Neslib.FastMath,
  Neslib.Sokol.Gfx;

const
  ATTR_VS_POSITION = 0;
  ATTR_VS_NORMAL = 1;
  ATTR_VS_TEXCOORD = 2;

const
  SLOT_NORMAL_TEXTURE = 0;
  SLOT_METALLIC_ROUGHNESS_TEXTURE = 1;
  SLOT_BASE_COLOR_TEXTURE = 2;
  SLOT_OCCLUSION_TEXTURE = 3;
  SLOT_EMISSIVE_TEXTURE = 4;

const
  SLOT_VS_PARAMS = 0;

type
  TVSParams = packed record
  public
    Model: TMatrix4;
    ViewProj: TMatrix4;
    EyePos: TVector3;
    _Pad140: array [0..3] of UInt8;
  end;

const
  SLOT_LIGHT_PARAMS = 0;

type
  TLightParams = packed record
  public
    LightPos: TVector3;
    LightRange: Single;
    LightColor: TVector3;
    LightIntensity: Single;
  end;

const
  SLOT_METALLIC_PARAMS = 1;

type
  TMetallicParams = packed record
  public
    BaseColorFactor: TVector4;
    EmissiveFactor: TVector3;
    MetallicFactor: Single;
    RoughnessFactor: Single;
    _Pad36: array [0..11] of UInt8;
  end;

function GltfMetallicShaderDesc: PNativeShaderDesc;

implementation

uses
  Neslib.Sokol.Api;

{$IFDEF SOKOL_GLCORE33}
const
  VS_SOURCE_GLSL330 =
    '#version 330'#10+

    'uniform vec4 vs_params[9];'#10+
    'layout(location = 0) in vec4 position;'#10+
    'out vec3 v_pos;'#10+
    'out vec3 v_nrm;'#10+
    'layout(location = 1) in vec3 normal;'#10+
    'out vec2 v_uv;'#10+
    'layout(location = 2) in vec2 texcoord;'#10+
    'out vec3 v_eye_pos;'#10+

    'void main()'#10+
    '{'#10+
    '    mat4 _21 = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]);'#10+
    '    vec4 _25 = _21 * position;'#10+
    '    v_pos = _25.xyz / vec3(_25.w);'#10+
    '    v_nrm = (_21 * vec4(normal, 0.0)).xyz;'#10+
    '    v_uv = texcoord;'#10+
    '    v_eye_pos = vs_params[8].xyz;'#10+
    '    gl_Position = mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7]) * _25;'#10+
    '}';

const
  METALLIC_FS_SOURCE_GLSL330 =
    '#version 330'#10+

    'struct angular_info_t'#10+
    '{'#10+
    '    float n_dot_l;'#10+
    '    float n_dot_v;'#10+
    '    float n_dot_h;'#10+
    '    float l_dot_h;'#10+
    '    float v_dot_h;'#10+
    '    vec3 padding;'#10+
    '};'#10+

    'struct material_info_t'#10+
    '{'#10+
    '    float perceptual_roughness;'#10+
    '    vec3 reflectance0;'#10+
    '    float alpha_roughness;'#10+
    '    vec3 diffuse_color;'#10+
    '    vec3 reflectance90;'#10+
    '    vec3 specular_color;'#10+
    '};'#10+

    'uniform vec4 light_params[2];'#10+
    'uniform vec4 metallic_params[3];'#10+
    'uniform sampler2D normal_texture;'#10+
    'uniform sampler2D metallic_roughness_texture;'#10+
    'uniform sampler2D base_color_texture;'#10+
    'uniform sampler2D occlusion_texture;'#10+
    'uniform sampler2D emissive_texture;'#10+

    'in vec3 v_pos;'#10+
    'in vec2 v_uv;'#10+
    'in vec3 v_nrm;'#10+
    'in vec3 v_eye_pos;'#10+
    'layout(location = 0) out vec4 frag_color;'#10+

    'vec4 srgb_to_linear(vec4 srgb)'#10+
    '{'#10+
    '    return vec4(pow(srgb.xyz, vec3(2.2000000476837158203125)), srgb.w);'#10+
    '}'#10+

    'vec3 get_normal()'#10+
    '{'#10+
    '    vec3 _117 = vec3(v_uv, 0.0);'#10+
    '    vec3 _118 = dFdx(_117);'#10+
    '    vec3 _124 = dFdy(_117);'#10+
    '    float _128 = _124.y;'#10+
    '    float _132 = _118.y;'#10+
    '    vec3 _149 = ((dFdx(v_pos) * _128) - (dFdy(v_pos) * _132)) / vec3((_118.x * _128) - (_124.x * _132));'#10+
    '    vec3 _153 = normalize(v_nrm);'#10+
    '    vec3 _161 = normalize(_149 - (_153 * dot(_153, _149)));'#10+
    '    vec2 _200 = (texture(normal_texture, v_uv).xw * 2.0) - vec2(1.0);'#10+
    '    float _203 = _200.x;'#10+
    '    float _205 = _200.y;'#10+
    '    return normalize(mat3(_161, normalize(cross(_153, _161)), _153) * vec3(_203, _205, sqrt((1.0 - (_203 * _203)) - (_205 * _205))));'#10+
    '}'#10+

    'float get_range_attenuation(float range, float _distance)'#10+
    '{'#10+
    '    if (range < 0.0)'#10+
    '    {'#10+
    '        return 1.0;'#10+
    '    }'#10+
    '    return max(min(1.0 - pow(_distance / range, 4.0), 1.0), 0.0) / pow(_distance, 2.0);'#10+
    '}'#10+

    'angular_info_t get_angular_info(vec3 point_to_light, vec3 normal, vec3 view)'#10+
    '{'#10+
    '    vec3 _229 = normalize(normal);'#10+
    '    vec3 _232 = normalize(view);'#10+
    '    vec3 _235 = normalize(point_to_light);'#10+
    '    vec3 _240 = normalize(_235 + _232);'#10+
    '    return angular_info_t(clamp(dot(_229, _235), 0.0, 1.0), clamp(dot(_229, _232), 0.0, 1.0), clamp(dot(_229, _240), 0.0, 1.0), clamp(dot(_235, _240), 0.0, 1.0), clamp(dot(_232, _240), 0.0, 1.0), '+
      'vec3(0.0));'#10+
    '}'#10+

    'vec3 specular_reflection(material_info_t material_info, angular_info_t angular_info)'#10+
    '{'#10+
    '    return material_info.reflectance0 + ((material_info.reflectance90 - material_info.reflectance0) * pow(clamp(1.0 - angular_info.v_dot_h, 0.0, 1.0), 5.0));'#10+
    '}'#10+

    'float visibility_occlusion(material_info_t material_info, angular_info_t angular_info)'#10+
    '{'#10+
    '    float _308 = material_info.alpha_roughness * material_info.alpha_roughness;'#10+
    '    float _315 = 1.0 - _308;'#10+
    '    float _336 = (angular_info.n_dot_l * sqrt(((angular_info.n_dot_v * angular_info.n_dot_v) * _315) + _308)) + (angular_info.n_dot_v * sqrt(((angular_info.n_dot_l * angular_info.n_dot_v) * _315) + '+
      '_308));'#10+
    '    if (_336 > 0.0)'#10+
    '    {'#10+
    '        return 0.5 / _336;'#10+
    '    }'#10+
    '    return 0.0;'#10+
    '}'#10+

    'float microfacet_distribution(material_info_t material_info, angular_info_t angular_info)'#10+
    '{'#10+
    '    float _353 = material_info.alpha_roughness * material_info.alpha_roughness;'#10+
    '    float _365 = (((angular_info.n_dot_h * _353) - angular_info.n_dot_h) * angular_info.n_dot_h) + 1.0;'#10+
    '    return _353 / ((3.1415927410125732421875 * _365) * _365);'#10+
    '}'#10+

    'vec3 diffuse(material_info_t material_info)'#10+
    '{'#10+
    '    return material_info.diffuse_color * vec3(0.3183098733425140380859375);'#10+
    '}'#10+

    'vec3 get_point_shade(vec3 point_to_light, material_info_t material_info, vec3 normal, vec3 view)'#10+
    '{'#10+
    '    vec3 param = point_to_light;'#10+
    '    vec3 param_1 = normal;'#10+
    '    vec3 param_2 = view;'#10+
    '    angular_info_t _389 = get_angular_info(param, param_1, param_2);'#10+
    '    float _700 = _389.n_dot_l;'#10+
    '    bool _392 = _700 > 0.0;'#10+
    '    bool _399;'#10+
    '    if (!_392)'#10+
    '    {'#10+
    '        _399 = _389.n_dot_v > 0.0;'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        _399 = _392;'#10+
    '    }'#10+
    '    if (_399)'#10+
    '    {'#10+
    '        material_info_t param_3 = material_info;'#10+
    '        angular_info_t param_4 = _389;'#10+
    '        vec3 _407 = specular_reflection(param_3, param_4);'#10+
    '        material_info_t param_5 = material_info;'#10+
    '        angular_info_t param_6 = _389;'#10+
    '        material_info_t param_7 = material_info;'#10+
    '        angular_info_t param_8 = _389;'#10+
    '        material_info_t param_9 = material_info;'#10+
    '        return (((vec3(1.0) - _407) * diffuse(param_9)) + ((_407 * visibility_occlusion(param_5, param_6)) * microfacet_distribution(param_7, param_8))) * _700;'#10+
    '    }'#10+
    '    return vec3(0.0);'#10+
    '}'#10+

    'vec3 apply_point_light(material_info_t material_info, vec3 normal, vec3 view)'#10+
    '{'#10+
    '    vec3 _469 = light_params[0].xyz - v_pos;'#10+
    '    float param = light_params[0].w;'#10+
    '    float param_1 = length(_469);'#10+
    '    vec3 param_2 = _469;'#10+
    '    material_info_t param_3 = material_info;'#10+
    '    vec3 param_4 = normal;'#10+
    '    vec3 param_5 = view;'#10+
    '    return (light_params[1].xyz * (get_range_attenuation(param, param_1) * light_params[1].w)) * get_point_shade(param_2, param_3, param_4, param_5);'#10+
    '}'#10+

    'vec3 toneMapUncharted2Impl(vec3 color)'#10+
    '{'#10+
    '    return (((color * ((color * 0.1500000059604644775390625) + vec3(0.0500000007450580596923828125))) + vec3(0.0040000001899898052215576171875)) / ((color * ((color * 0.1500000059604644775390625) + '+
      'vec3(0.5))) + vec3(0.0599999986588954925537109375))) - vec3(0.066666670143604278564453125);'#10+
    '}'#10+

    'vec3 linear_to_srgb(vec3 linear)'#10+
    '{'#10+
    '    return pow(linear, vec3(0.4545454680919647216796875));'#10+
    '}'#10+

    'vec3 toneMapUncharted(inout vec3 color)'#10+
    '{'#10+
    '    vec3 param = color * 2.0;'#10+
    '    color = toneMapUncharted2Impl(param);'#10+
    '    vec3 param_1 = vec3(11.19999980926513671875);'#10+
    '    vec3 param_2 = color * (vec3(1.0) / toneMapUncharted2Impl(param_1));'#10+
    '    return linear_to_srgb(param_2);'#10+
    '}'#10+

    'vec3 tone_map(vec3 color)'#10+
    '{'#10+
    '    vec3 param = color;'#10+
    '    vec3 _548 = toneMapUncharted(param);'#10+
    '    return _548;'#10+
    '}'#10+

    'void main()'#10+
    '{'#10+
    '    vec4 _555 = texture(metallic_roughness_texture, v_uv);'#10+
    '    float _565 = clamp(_555.w * metallic_params[2].x, 0.0, 1.0);'#10+
    '    float _572 = clamp(_555.x * metallic_params[1].w, 0.0, 1.0);'#10+
    '    vec4 param = texture(base_color_texture, v_uv);'#10+
    '    vec3 _586 = (srgb_to_linear(param) * metallic_params[0]).xyz;'#10+
    '    vec3 _600 = mix(vec3(0.039999999105930328369140625), _586, vec3(_572));'#10+
    '    material_info_t param_1 = material_info_t(_565, _600, _565 * _565, (_586 * vec3(0.959999978542327880859375)) * (1.0 - _572), vec3(clamp(max(max(_600.x, _600.y), _600.z) * 50.0, 0.0, 1.0)), _600);'#10+
    '    vec3 param_2 = get_normal();'#10+
    '    vec3 param_3 = normalize(v_eye_pos - v_pos);'#10+
    '    vec3 color = apply_point_light(param_1, param_2, param_3) * texture(occlusion_texture, v_uv).x;'#10+
    '    vec4 param_4 = texture(emissive_texture, v_uv);'#10+
    '    vec3 _664 = color;'#10+
    '    vec3 _665 = _664 + (srgb_to_linear(param_4).xyz * metallic_params[1].xyz);'#10+
    '    color = _665;'#10+
    '    vec3 param_5 = _665;'#10+
    '    frag_color = vec4(tone_map(param_5), 1.0);'#10+
    '}';

{$ENDIF !SOKOL_GLCORE33}

{$IFDEF SOKOL_GLES2}
const
  VS_SOURCE_GLSL100 =
    '#version 100'#10+

    'uniform vec4 vs_params[9];'#10+
    'attribute vec4 position;'#10+
    'varying vec3 v_pos;'#10+
    'varying vec3 v_nrm;'#10+
    'attribute vec3 normal;'#10+
    'varying vec2 v_uv;'#10+
    'attribute vec2 texcoord;'#10+
    'varying vec3 v_eye_pos;'#10+

    'void main()'#10+
    '{'#10+
    '    mat4 _21 = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]);'#10+
    '    vec4 _25 = _21 * position;'#10+
    '    v_pos = _25.xyz / vec3(_25.w);'#10+
    '    v_nrm = (_21 * vec4(normal, 0.0)).xyz;'#10+
    '    v_uv = texcoord;'#10+
    '    v_eye_pos = vs_params[8].xyz;'#10+
    '    gl_Position = mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7]) * _25;'#10+
    '}';

const
  METALLIC_FS_SOURCE_GLSL100 =
    '#version 100'#10+
    '#extension GL_OES_standard_derivatives : require'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'struct angular_info_t'#10+
    '{'#10+
    '    highp float n_dot_l;'#10+
    '    highp float n_dot_v;'#10+
    '    highp float n_dot_h;'#10+
    '    highp float l_dot_h;'#10+
    '    highp float v_dot_h;'#10+
    '    highp vec3 padding;'#10+
    '};'#10+

    'struct material_info_t'#10+
    '{'#10+
    '    highp float perceptual_roughness;'#10+
    '    highp vec3 reflectance0;'#10+
    '    highp float alpha_roughness;'#10+
    '    highp vec3 diffuse_color;'#10+
    '    highp vec3 reflectance90;'#10+
    '    highp vec3 specular_color;'#10+
    '};'#10+

    'uniform highp vec4 light_params[2];'#10+
    'uniform highp vec4 metallic_params[3];'#10+
    'uniform highp sampler2D normal_texture;'#10+
    'uniform highp sampler2D metallic_roughness_texture;'#10+
    'uniform highp sampler2D base_color_texture;'#10+
    'uniform highp sampler2D occlusion_texture;'#10+
    'uniform highp sampler2D emissive_texture;'#10+

    'varying highp vec3 v_pos;'#10+
    'varying highp vec2 v_uv;'#10+
    'varying highp vec3 v_nrm;'#10+
    'varying highp vec3 v_eye_pos;'#10+

    'highp vec4 srgb_to_linear(highp vec4 srgb)'#10+
    '{'#10+
    '    return vec4(pow(srgb.xyz, vec3(2.2000000476837158203125)), srgb.w);'#10+
    '}'#10+

    'highp vec3 get_normal()'#10+
    '{'#10+
    '    highp vec3 _117 = vec3(v_uv, 0.0);'#10+
    '    highp vec3 _118 = dFdx(_117);'#10+
    '    highp vec3 _124 = dFdy(_117);'#10+
    '    highp float _128 = _124.y;'#10+
    '    highp float _132 = _118.y;'#10+
    '    highp vec3 _149 = ((dFdx(v_pos) * _128) - (dFdy(v_pos) * _132)) / vec3((_118.x * _128) - (_124.x * _132));'#10+
    '    highp vec3 _153 = normalize(v_nrm);'#10+
    '    highp vec3 _161 = normalize(_149 - (_153 * dot(_153, _149)));'#10+
    '    highp vec2 _200 = (texture2D(normal_texture, v_uv).xw * 2.0) - vec2(1.0);'#10+
    '    highp float _203 = _200.x;'#10+
    '    highp float _205 = _200.y;'#10+
    '    return normalize(mat3(_161, normalize(cross(_153, _161)), _153) * vec3(_203, _205, sqrt((1.0 - (_203 * _203)) - (_205 * _205))));'#10+
    '}'#10+

    'highp float get_range_attenuation(highp float range, highp float _distance)'#10+
    '{'#10+
    '    if (range < 0.0)'#10+
    '    {'#10+
    '        return 1.0;'#10+
    '    }'#10+
    '    return max(min(1.0 - pow(_distance / range, 4.0), 1.0), 0.0) / pow(_distance, 2.0);'#10+
    '}'#10+

    'angular_info_t get_angular_info(highp vec3 point_to_light, highp vec3 normal, highp vec3 view)'#10+
    '{'#10+
    '    highp vec3 _229 = normalize(normal);'#10+
    '    highp vec3 _232 = normalize(view);'#10+
    '    highp vec3 _235 = normalize(point_to_light);'#10+
    '    highp vec3 _240 = normalize(_235 + _232);'#10+
    '    return angular_info_t(clamp(dot(_229, _235), 0.0, 1.0), clamp(dot(_229, _232), 0.0, 1.0), clamp(dot(_229, _240), 0.0, 1.0), clamp(dot(_235, _240), 0.0, 1.0), clamp(dot(_232, _240), 0.0, 1.0), '+
      'vec3(0.0));'#10+
    '}'#10+

    'highp vec3 specular_reflection(material_info_t material_info, angular_info_t angular_info)'#10+
    '{'#10+
    '    return material_info.reflectance0 + ((material_info.reflectance90 - material_info.reflectance0) * pow(clamp(1.0 - angular_info.v_dot_h, 0.0, 1.0), 5.0));'#10+
    '}'#10+

    'highp float visibility_occlusion(material_info_t material_info, angular_info_t angular_info)'#10+
    '{'#10+
    '    highp float _308 = material_info.alpha_roughness * material_info.alpha_roughness;'#10+
    '    highp float _315 = 1.0 - _308;'#10+
    '    highp float _336 = (angular_info.n_dot_l * sqrt(((angular_info.n_dot_v * angular_info.n_dot_v) * _315) + _308)) + (angular_info.n_dot_v * sqrt(((angular_info.n_dot_l * angular_info.n_dot_v) * '+
      '_315) + _308));'#10+
    '    if (_336 > 0.0)'#10+
    '    {'#10+
    '        return 0.5 / _336;'#10+
    '    }'#10+
    '    return 0.0;'#10+
    '}'#10+

    'highp float microfacet_distribution(material_info_t material_info, angular_info_t angular_info)'#10+
    '{'#10+
    '    highp float _353 = material_info.alpha_roughness * material_info.alpha_roughness;'#10+
    '    highp float _365 = (((angular_info.n_dot_h * _353) - angular_info.n_dot_h) * angular_info.n_dot_h) + 1.0;'#10+
    '    return _353 / ((3.1415927410125732421875 * _365) * _365);'#10+
    '}'#10+

    'highp vec3 diffuse(material_info_t material_info)'#10+
    '{'#10+
    '    return material_info.diffuse_color * vec3(0.3183098733425140380859375);'#10+
    '}'#10+

    'highp vec3 get_point_shade(highp vec3 point_to_light, material_info_t material_info, highp vec3 normal, highp vec3 view)'#10+
    '{'#10+
    '    highp vec3 param = point_to_light;'#10+
    '    highp vec3 param_1 = normal;'#10+
    '    highp vec3 param_2 = view;'#10+
    '    angular_info_t _389 = get_angular_info(param, param_1, param_2);'#10+
    '    highp float _700 = _389.n_dot_l;'#10+
    '    bool _392 = _700 > 0.0;'#10+
    '    bool _399;'#10+
    '    if (!_392)'#10+
    '    {'#10+
    '        _399 = _389.n_dot_v > 0.0;'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        _399 = _392;'#10+
    '    }'#10+
    '    if (_399)'#10+
    '    {'#10+
    '        material_info_t param_3 = material_info;'#10+
    '        angular_info_t param_4 = _389;'#10+
    '        highp vec3 _407 = specular_reflection(param_3, param_4);'#10+
    '        material_info_t param_5 = material_info;'#10+
    '        angular_info_t param_6 = _389;'#10+
    '        material_info_t param_7 = material_info;'#10+
    '        angular_info_t param_8 = _389;'#10+
    '        material_info_t param_9 = material_info;'#10+
    '        return (((vec3(1.0) - _407) * diffuse(param_9)) + ((_407 * visibility_occlusion(param_5, param_6)) * microfacet_distribution(param_7, param_8))) * _700;'#10+
    '    }'#10+
    '    return vec3(0.0);'#10+
    '}'#10+

    'highp vec3 apply_point_light(material_info_t material_info, highp vec3 normal, highp vec3 view)'#10+
    '{'#10+
    '    highp vec3 _469 = light_params[0].xyz - v_pos;'#10+
    '    highp float param = light_params[0].w;'#10+
    '    highp float param_1 = length(_469);'#10+
    '    highp vec3 param_2 = _469;'#10+
    '    material_info_t param_3 = material_info;'#10+
    '    highp vec3 param_4 = normal;'#10+
    '    highp vec3 param_5 = view;'#10+
    '    return (light_params[1].xyz * (get_range_attenuation(param, param_1) * light_params[1].w)) * get_point_shade(param_2, param_3, param_4, param_5);'#10+
    '}'#10+

    'highp vec3 toneMapUncharted2Impl(highp vec3 color)'#10+
    '{'#10+
    '    return (((color * ((color * 0.1500000059604644775390625) + vec3(0.0500000007450580596923828125))) + vec3(0.0040000001899898052215576171875)) / ((color * ((color * 0.1500000059604644775390625) + '+
      'vec3(0.5))) + vec3(0.0599999986588954925537109375))) - vec3(0.066666670143604278564453125);'#10+
    '}'#10+

    'highp vec3 linear_to_srgb(highp vec3 linear)'#10+
    '{'#10+
    '    return pow(linear, vec3(0.4545454680919647216796875));'#10+
    '}'#10+

    'highp vec3 toneMapUncharted(inout highp vec3 color)'#10+
    '{'#10+
    '    highp vec3 param = color * 2.0;'#10+
    '    color = toneMapUncharted2Impl(param);'#10+
    '    highp vec3 param_1 = vec3(11.19999980926513671875);'#10+
    '    highp vec3 param_2 = color * (vec3(1.0) / toneMapUncharted2Impl(param_1));'#10+
    '    return linear_to_srgb(param_2);'#10+
    '}'#10+

    'highp vec3 tone_map(highp vec3 color)'#10+
    '{'#10+
    '    highp vec3 param = color;'#10+
    '    highp vec3 _548 = toneMapUncharted(param);'#10+
    '    return _548;'#10+
    '}'#10+

    'void main()'#10+
    '{'#10+
    '    highp vec4 _555 = texture2D(metallic_roughness_texture, v_uv);'#10+
    '    highp float _565 = clamp(_555.w * metallic_params[2].x, 0.0, 1.0);'#10+
    '    highp float _572 = clamp(_555.x * metallic_params[1].w, 0.0, 1.0);'#10+
    '    highp vec4 param = texture2D(base_color_texture, v_uv);'#10+
    '    highp vec3 _586 = (srgb_to_linear(param) * metallic_params[0]).xyz;'#10+
    '    highp vec3 _600 = mix(vec3(0.039999999105930328369140625), _586, vec3(_572));'#10+
    '    material_info_t param_1 = material_info_t(_565, _600, _565 * _565, (_586 * vec3(0.959999978542327880859375)) * (1.0 - _572), vec3(clamp(max(max(_600.x, _600.y), _600.z) * 50.0, 0.0, 1.0)), _600);'#10+
    '    highp vec3 param_2 = get_normal();'#10+
    '    highp vec3 param_3 = normalize(v_eye_pos - v_pos);'#10+
    '    highp vec3 color = apply_point_light(param_1, param_2, param_3) * texture2D(occlusion_texture, v_uv).x;'#10+
    '    highp vec4 param_4 = texture2D(emissive_texture, v_uv);'#10+
    '    highp vec3 _664 = color;'#10+
    '    highp vec3 _665 = _664 + (srgb_to_linear(param_4).xyz * metallic_params[1].xyz);'#10+
    '    color = _665;'#10+
    '    highp vec3 param_5 = _665;'#10+
    '    gl_FragData[0] = vec4(tone_map(param_5), 1.0);'#10+
    '}';

{$ENDIF !SOKOL_GLES2}

{$IFDEF SOKOL_GLES3}
const
  VS_SOURCE_GLSL300ES =
    '#version 300 es'#10+

    'uniform vec4 vs_params[9];'#10+
    'layout(location = 0) in vec4 position;'#10+
    'out vec3 v_pos;'#10+
    'out vec3 v_nrm;'#10+
    'layout(location = 1) in vec3 normal;'#10+
    'out vec2 v_uv;'#10+
    'layout(location = 2) in vec2 texcoord;'#10+
    'out vec3 v_eye_pos;'#10+

    'void main()'#10+
    '{'#10+
    '    mat4 _21 = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]);'#10+
    '    vec4 _25 = _21 * position;'#10+
    '    v_pos = _25.xyz / vec3(_25.w);'#10+
    '    v_nrm = (_21 * vec4(normal, 0.0)).xyz;'#10+
    '    v_uv = texcoord;'#10+
    '    v_eye_pos = vs_params[8].xyz;'#10+
    '    gl_Position = mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7]) * _25;'#10+
    '}';

const
  METALLIC_FS_SOURCE_GLSL300ES =
    '#version 300 es'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'struct angular_info_t'#10+
    '{'#10+
    '    highp float n_dot_l;'#10+
    '    highp float n_dot_v;'#10+
    '    highp float n_dot_h;'#10+
    '    highp float l_dot_h;'#10+
    '    highp float v_dot_h;'#10+
    '    highp vec3 padding;'#10+
    '};'#10+

    'struct material_info_t'#10+
    '{'#10+
    '    highp float perceptual_roughness;'#10+
    '    highp vec3 reflectance0;'#10+
    '    highp float alpha_roughness;'#10+
    '    highp vec3 diffuse_color;'#10+
    '    highp vec3 reflectance90;'#10+
    '    highp vec3 specular_color;'#10+
    '};'#10+

    'uniform highp vec4 light_params[2];'#10+
    'uniform highp vec4 metallic_params[3];'#10+
    'uniform highp sampler2D normal_texture;'#10+
    'uniform highp sampler2D metallic_roughness_texture;'#10+
    'uniform highp sampler2D base_color_texture;'#10+
    'uniform highp sampler2D occlusion_texture;'#10+
    'uniform highp sampler2D emissive_texture;'#10+

    'in highp vec3 v_pos;'#10+
    'in highp vec2 v_uv;'#10+
    'in highp vec3 v_nrm;'#10+
    'in highp vec3 v_eye_pos;'#10+
    'layout(location = 0) out highp vec4 frag_color;'#10+

    'highp vec4 srgb_to_linear(highp vec4 srgb)'#10+
    '{'#10+
    '    return vec4(pow(srgb.xyz, vec3(2.2000000476837158203125)), srgb.w);'#10+
    '}'#10+

    'highp vec3 get_normal()'#10+
    '{'#10+
    '    highp vec3 _117 = vec3(v_uv, 0.0);'#10+
    '    highp vec3 _118 = dFdx(_117);'#10+
    '    highp vec3 _124 = dFdy(_117);'#10+
    '    highp float _128 = _124.y;'#10+
    '    highp float _132 = _118.y;'#10+
    '    highp vec3 _149 = ((dFdx(v_pos) * _128) - (dFdy(v_pos) * _132)) / vec3((_118.x * _128) - (_124.x * _132));'#10+
    '    highp vec3 _153 = normalize(v_nrm);'#10+
    '    highp vec3 _161 = normalize(_149 - (_153 * dot(_153, _149)));'#10+
    '    highp vec2 _200 = (texture(normal_texture, v_uv).xw * 2.0) - vec2(1.0);'#10+
    '    highp float _203 = _200.x;'#10+
    '    highp float _205 = _200.y;'#10+
    '    return normalize(mat3(_161, normalize(cross(_153, _161)), _153) * vec3(_203, _205, sqrt((1.0 - (_203 * _203)) - (_205 * _205))));'#10+
    '}'#10+

    'highp float get_range_attenuation(highp float range, highp float _distance)'#10+
    '{'#10+
    '    if (range < 0.0)'#10+
    '    {'#10+
    '        return 1.0;'#10+
    '    }'#10+
    '    return max(min(1.0 - pow(_distance / range, 4.0), 1.0), 0.0) / pow(_distance, 2.0);'#10+
    '}'#10+

    'angular_info_t get_angular_info(highp vec3 point_to_light, highp vec3 normal, highp vec3 view)'#10+
    '{'#10+
    '    highp vec3 _229 = normalize(normal);'#10+
    '    highp vec3 _232 = normalize(view);'#10+
    '    highp vec3 _235 = normalize(point_to_light);'#10+
    '    highp vec3 _240 = normalize(_235 + _232);'#10+
    '    return angular_info_t(clamp(dot(_229, _235), 0.0, 1.0), clamp(dot(_229, _232), 0.0, 1.0), clamp(dot(_229, _240), 0.0, 1.0), clamp(dot(_235, _240), 0.0, 1.0), clamp(dot(_232, _240), 0.0, 1.0), '+
      'vec3(0.0));'#10+
    '}'#10+

    'highp vec3 specular_reflection(material_info_t material_info, angular_info_t angular_info)'#10+
    '{'#10+
    '    return material_info.reflectance0 + ((material_info.reflectance90 - material_info.reflectance0) * pow(clamp(1.0 - angular_info.v_dot_h, 0.0, 1.0), 5.0));'#10+
    '}'#10+

    'highp float visibility_occlusion(material_info_t material_info, angular_info_t angular_info)'#10+
    '{'#10+
    '    highp float _308 = material_info.alpha_roughness * material_info.alpha_roughness;'#10+
    '    highp float _315 = 1.0 - _308;'#10+
    '    highp float _336 = (angular_info.n_dot_l * sqrt(((angular_info.n_dot_v * angular_info.n_dot_v) * _315) + _308)) + (angular_info.n_dot_v * sqrt(((angular_info.n_dot_l * angular_info.n_dot_v) * '+
      '_315) + _308));'#10+
    '    if (_336 > 0.0)'#10+
    '    {'#10+
    '        return 0.5 / _336;'#10+
    '    }'#10+
    '    return 0.0;'#10+
    '}'#10+

    'highp float microfacet_distribution(material_info_t material_info, angular_info_t angular_info)'#10+
    '{'#10+
    '    highp float _353 = material_info.alpha_roughness * material_info.alpha_roughness;'#10+
    '    highp float _365 = (((angular_info.n_dot_h * _353) - angular_info.n_dot_h) * angular_info.n_dot_h) + 1.0;'#10+
    '    return _353 / ((3.1415927410125732421875 * _365) * _365);'#10+
    '}'#10+

    'highp vec3 diffuse(material_info_t material_info)'#10+
    '{'#10+
    '    return material_info.diffuse_color * vec3(0.3183098733425140380859375);'#10+
    '}'#10+

    'highp vec3 get_point_shade(highp vec3 point_to_light, material_info_t material_info, highp vec3 normal, highp vec3 view)'#10+
    '{'#10+
    '    highp vec3 param = point_to_light;'#10+
    '    highp vec3 param_1 = normal;'#10+
    '    highp vec3 param_2 = view;'#10+
    '    angular_info_t _389 = get_angular_info(param, param_1, param_2);'#10+
    '    highp float _700 = _389.n_dot_l;'#10+
    '    bool _392 = _700 > 0.0;'#10+
    '    bool _399;'#10+
    '    if (!_392)'#10+
    '    {'#10+
    '        _399 = _389.n_dot_v > 0.0;'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        _399 = _392;'#10+
    '    }'#10+
    '    if (_399)'#10+
    '    {'#10+
    '        material_info_t param_3 = material_info;'#10+
    '        angular_info_t param_4 = _389;'#10+
    '        highp vec3 _407 = specular_reflection(param_3, param_4);'#10+
    '        material_info_t param_5 = material_info;'#10+
    '        angular_info_t param_6 = _389;'#10+
    '        material_info_t param_7 = material_info;'#10+
    '        angular_info_t param_8 = _389;'#10+
    '        material_info_t param_9 = material_info;'#10+
    '        return (((vec3(1.0) - _407) * diffuse(param_9)) + ((_407 * visibility_occlusion(param_5, param_6)) * microfacet_distribution(param_7, param_8))) * _700;'#10+
    '    }'#10+
    '    return vec3(0.0);'#10+
    '}'#10+

    'highp vec3 apply_point_light(material_info_t material_info, highp vec3 normal, highp vec3 view)'#10+
    '{'#10+
    '    highp vec3 _469 = light_params[0].xyz - v_pos;'#10+
    '    highp float param = light_params[0].w;'#10+
    '    highp float param_1 = length(_469);'#10+
    '    highp vec3 param_2 = _469;'#10+
    '    material_info_t param_3 = material_info;'#10+
    '    highp vec3 param_4 = normal;'#10+
    '    highp vec3 param_5 = view;'#10+
    '    return (light_params[1].xyz * (get_range_attenuation(param, param_1) * light_params[1].w)) * get_point_shade(param_2, param_3, param_4, param_5);'#10+
    '}'#10+

    'highp vec3 toneMapUncharted2Impl(highp vec3 color)'#10+
    '{'#10+
    '    return (((color * ((color * 0.1500000059604644775390625) + vec3(0.0500000007450580596923828125))) + vec3(0.0040000001899898052215576171875)) / ((color * ((color * 0.1500000059604644775390625) + '+
      'vec3(0.5))) + vec3(0.0599999986588954925537109375))) - vec3(0.066666670143604278564453125);'#10+
    '}'#10+

    'highp vec3 linear_to_srgb(highp vec3 linear)'#10+
    '{'#10+
    '    return pow(linear, vec3(0.4545454680919647216796875));'#10+
    '}'#10+

    'highp vec3 toneMapUncharted(inout highp vec3 color)'#10+
    '{'#10+
    '    highp vec3 param = color * 2.0;'#10+
    '    color = toneMapUncharted2Impl(param);'#10+
    '    highp vec3 param_1 = vec3(11.19999980926513671875);'#10+
    '    highp vec3 param_2 = color * (vec3(1.0) / toneMapUncharted2Impl(param_1));'#10+
    '    return linear_to_srgb(param_2);'#10+
    '}'#10+

    'highp vec3 tone_map(highp vec3 color)'#10+
    '{'#10+
    '    highp vec3 param = color;'#10+
    '    highp vec3 _548 = toneMapUncharted(param);'#10+
    '    return _548;'#10+
    '}'#10+

    'void main()'#10+
    '{'#10+
    '    highp vec4 _555 = texture(metallic_roughness_texture, v_uv);'#10+
    '    highp float _565 = clamp(_555.w * metallic_params[2].x, 0.0, 1.0);'#10+
    '    highp float _572 = clamp(_555.x * metallic_params[1].w, 0.0, 1.0);'#10+
    '    highp vec4 param = texture(base_color_texture, v_uv);'#10+
    '    highp vec3 _586 = (srgb_to_linear(param) * metallic_params[0]).xyz;'#10+
    '    highp vec3 _600 = mix(vec3(0.039999999105930328369140625), _586, vec3(_572));'#10+
    '    material_info_t param_1 = material_info_t(_565, _600, _565 * _565, (_586 * vec3(0.959999978542327880859375)) * (1.0 - _572), vec3(clamp(max(max(_600.x, _600.y), _600.z) * 50.0, 0.0, 1.0)), _600);'#10+
    '    highp vec3 param_2 = get_normal();'#10+
    '    highp vec3 param_3 = normalize(v_eye_pos - v_pos);'#10+
    '    highp vec3 color = apply_point_light(param_1, param_2, param_3) * texture(occlusion_texture, v_uv).x;'#10+
    '    highp vec4 param_4 = texture(emissive_texture, v_uv);'#10+
    '    highp vec3 _664 = color;'#10+
    '    highp vec3 _665 = _664 + (srgb_to_linear(param_4).xyz * metallic_params[1].xyz);'#10+
    '    color = _665;'#10+
    '    highp vec3 param_5 = _665;'#10+
    '    frag_color = vec4(tone_map(param_5), 1.0);'#10+
    '}';

{$ENDIF !SOKOL_GLES3}

{$IFDEF SOKOL_D3D11}
const
  VS_SOURCE_HLSL5 =
    'cbuffer vs_params : register(b0)'#10+
    '{'#10+
    '    row_major float4x4 _16_model : packoffset(c0);'#10+
    '    row_major float4x4 _16_view_proj : packoffset(c4);'#10+
    '    float3 _16_eye_pos : packoffset(c8);'#10+
    '};'#10+


    'static float4 gl_Position;'#10+
    'static float4 position;'#10+
    'static float3 v_pos;'#10+
    'static float3 v_nrm;'#10+
    'static float3 normal;'#10+
    'static float2 v_uv;'#10+
    'static float2 texcoord;'#10+
    'static float3 v_eye_pos;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float4 position : TEXCOORD0;'#10+
    '    float3 normal : TEXCOORD1;'#10+
    '    float2 texcoord : TEXCOORD2;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float3 v_pos : TEXCOORD0;'#10+
    '    float3 v_nrm : TEXCOORD1;'#10+
    '    float2 v_uv : TEXCOORD2;'#10+
    '    float3 v_eye_pos : TEXCOORD3;'#10+
    '    float4 gl_Position : SV_Position;'#10+
    '};'#10+

    'void vert_main()'#10+
    '{'#10+
    '    float4 _25 = mul(position, _16_model);'#10+
    '    v_pos = _25.xyz / _25.w.xxx;'#10+
    '    v_nrm = mul(float4(normal, 0.0f), _16_model).xyz;'#10+
    '    v_uv = texcoord;'#10+
    '    v_eye_pos = _16_eye_pos;'#10+
    '    gl_Position = mul(_25, _16_view_proj);'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    position = stage_input.position;'#10+
    '    normal = stage_input.normal;'#10+
    '    texcoord = stage_input.texcoord;'#10+
    '    vert_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.gl_Position = gl_Position;'#10+
    '    stage_output.v_pos = v_pos;'#10+
    '    stage_output.v_nrm = v_nrm;'#10+
    '    stage_output.v_uv = v_uv;'#10+
    '    stage_output.v_eye_pos = v_eye_pos;'#10+
    '    return stage_output;'#10+
    '}';

const
  METALLIC_FS_SOURCE_HLSL5 =
    'struct angular_info_t'#10+
    '{'#10+
    '    float n_dot_l;'#10+
    '    float n_dot_v;'#10+
    '    float n_dot_h;'#10+
    '    float l_dot_h;'#10+
    '    float v_dot_h;'#10+
    '    float3 padding;'#10+
    '};'#10+

    'struct material_info_t'#10+
    '{'#10+
    '    float perceptual_roughness;'#10+
    '    float3 reflectance0;'#10+
    '    float alpha_roughness;'#10+
    '    float3 diffuse_color;'#10+
    '    float3 reflectance90;'#10+
    '    float3 specular_color;'#10+
    '};'#10+

    'cbuffer light_params : register(b0)'#10+
    '{'#10+
    '    float3 _464_light_pos : packoffset(c0);'#10+
    '    float _464_light_range : packoffset(c0.w);'#10+
    '    float3 _464_light_color : packoffset(c1);'#10+
    '    float _464_light_intensity : packoffset(c1.w);'#10+
    '};'#10+

    'cbuffer metallic_params : register(b1)'#10+
    '{'#10+
    '    float4 _561_base_color_factor : packoffset(c0);'#10+
    '    float3 _561_emissive_factor : packoffset(c1);'#10+
    '    float _561_metallic_factor : packoffset(c1.w);'#10+
    '    float _561_roughness_factor : packoffset(c2);'#10+
    '};'#10+

    'Texture2D<float4> normal_texture : register(t0);'#10+
    'SamplerState _normal_texture_sampler : register(s0);'#10+
    'Texture2D<float4> metallic_roughness_texture : register(t1);'#10+
    'SamplerState _metallic_roughness_texture_sampler : register(s1);'#10+
    'Texture2D<float4> base_color_texture : register(t2);'#10+
    'SamplerState _base_color_texture_sampler : register(s2);'#10+
    'Texture2D<float4> occlusion_texture : register(t3);'#10+
    'SamplerState _occlusion_texture_sampler : register(s3);'#10+
    'Texture2D<float4> emissive_texture : register(t4);'#10+
    'SamplerState _emissive_texture_sampler : register(s4);'#10+

    'static float3 v_pos;'#10+
    'static float2 v_uv;'#10+
    'static float3 v_nrm;'#10+
    'static float3 v_eye_pos;'#10+
    'static float4 frag_color;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float3 v_pos : TEXCOORD0;'#10+
    '    float3 v_nrm : TEXCOORD1;'#10+
    '    float2 v_uv : TEXCOORD2;'#10+
    '    float3 v_eye_pos : TEXCOORD3;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float4 frag_color : SV_Target0;'#10+
    '};'#10+

    'float4 srgb_to_linear(float4 srgb)'#10+
    '{'#10+
    '    return float4(pow(srgb.xyz, 2.2000000476837158203125f.xxx), srgb.w);'#10+
    '}'#10+

    'float3 get_normal()'#10+
    '{'#10+
    '    float3 _117 = float3(v_uv, 0.0f);'#10+
    '    float3 _118 = ddx(_117);'#10+
    '    float3 _124 = ddy(_117);'#10+
    '    float _128 = _124.y;'#10+
    '    float _132 = _118.y;'#10+
    '    float3 _149 = ((ddx(v_pos) * _128) - (ddy(v_pos) * _132)) / ((_118.x * _128) - (_124.x * _132)).xxx;'#10+
    '    float3 _153 = normalize(v_nrm);'#10+
    '    float3 _161 = normalize(_149 - (_153 * dot(_153, _149)));'#10+
    '    float2 _200 = (normal_texture.Sample(_normal_texture_sampler, v_uv).xw * 2.0f) - 1.0f.xx;'#10+
    '    float _203 = _200.x;'#10+
    '    float _205 = _200.y;'#10+
    '    return normalize(mul(float3(_203, _205, sqrt((1.0f - (_203 * _203)) - (_205 * _205))), float3x3(_161, normalize(cross(_153, _161)), _153)));'#10+
    '}'#10+

    'float get_range_attenuation(float range, float _distance)'#10+
    '{'#10+
    '    if (range < 0.0f)'#10+
    '    {'#10+
    '        return 1.0f;'#10+
    '    }'#10+
    '    return max(min(1.0f - pow(_distance / range, 4.0f), 1.0f), 0.0f) / pow(_distance, 2.0f);'#10+
    '}'#10+

    'angular_info_t get_angular_info(float3 point_to_light, float3 normal, float3 view)'#10+
    '{'#10+
    '    float3 _229 = normalize(normal);'#10+
    '    float3 _232 = normalize(view);'#10+
    '    float3 _235 = normalize(point_to_light);'#10+
    '    float3 _240 = normalize(_235 + _232);'#10+
    '    angular_info_t _272 = { clamp(dot(_229, _235), 0.0f, 1.0f), clamp(dot(_229, _232), 0.0f, 1.0f), clamp(dot(_229, _240), 0.0f, 1.0f), clamp(dot(_235, _240), 0.0f, 1.0f), clamp(dot(_232, _240), '+
      '0.0f, 1.0f), 0.0f.xxx };'#10+
    '    return _272;'#10+
    '}'#10+

    'float3 specular_reflection(material_info_t material_info, angular_info_t angular_info)'#10+
    '{'#10+
    '    return material_info.reflectance0 + ((material_info.reflectance90 - material_info.reflectance0) * pow(clamp(1.0f - angular_info.v_dot_h, 0.0f, 1.0f), 5.0f));'#10+
    '}'#10+

    'float visibility_occlusion(material_info_t material_info, angular_info_t angular_info)'#10+
    '{'#10+
    '    float _308 = material_info.alpha_roughness * material_info.alpha_roughness;'#10+
    '    float _315 = 1.0f - _308;'#10+
    '    float _336 = (angular_info.n_dot_l * sqrt(((angular_info.n_dot_v * angular_info.n_dot_v) * _315) + _308)) + (angular_info.n_dot_v * sqrt(((angular_info.n_dot_l * angular_info.n_dot_v) * _315) + '+
      '_308));'#10+
    '    if (_336 > 0.0f)'#10+
    '    {'#10+
    '        return 0.5f / _336;'#10+
    '    }'#10+
    '    return 0.0f;'#10+
    '}'#10+

    'float microfacet_distribution(material_info_t material_info, angular_info_t angular_info)'#10+
    '{'#10+
    '    float _353 = material_info.alpha_roughness * material_info.alpha_roughness;'#10+
    '    float _365 = (((angular_info.n_dot_h * _353) - angular_info.n_dot_h) * angular_info.n_dot_h) + 1.0f;'#10+
    '    return _353 / ((3.1415927410125732421875f * _365) * _365);'#10+
    '}'#10+

    'float3 diffuse(material_info_t material_info)'#10+
    '{'#10+
    '    return material_info.diffuse_color * 0.3183098733425140380859375f.xxx;'#10+
    '}'#10+

    'float3 get_point_shade(float3 point_to_light, material_info_t material_info, float3 normal, float3 view)'#10+
    '{'#10+
    '    float3 param = point_to_light;'#10+
    '    float3 param_1 = normal;'#10+
    '    float3 param_2 = view;'#10+
    '    angular_info_t _389 = get_angular_info(param, param_1, param_2);'#10+
    '    float _700 = _389.n_dot_l;'#10+
    '    bool _392 = _700 > 0.0f;'#10+
    '    bool _399;'#10+
    '    if (!_392)'#10+
    '    {'#10+
    '        _399 = _389.n_dot_v > 0.0f;'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        _399 = _392;'#10+
    '    }'#10+
    '    if (_399)'#10+
    '    {'#10+
    '        material_info_t param_3 = material_info;'#10+
    '        angular_info_t param_4 = _389;'#10+
    '        float3 _407 = specular_reflection(param_3, param_4);'#10+
    '        material_info_t param_5 = material_info;'#10+
    '        angular_info_t param_6 = _389;'#10+
    '        material_info_t param_7 = material_info;'#10+
    '        angular_info_t param_8 = _389;'#10+
    '        material_info_t param_9 = material_info;'#10+
    '        return (((1.0f.xxx - _407) * diffuse(param_9)) + ((_407 * visibility_occlusion(param_5, param_6)) * microfacet_distribution(param_7, param_8))) * _700;'#10+
    '    }'#10+
    '    return 0.0f.xxx;'#10+
    '}'#10+

    'float3 apply_point_light(material_info_t material_info, float3 normal, float3 view)'#10+
    '{'#10+
    '    float3 _469 = _464_light_pos - v_pos;'#10+
    '    float param = _464_light_range;'#10+
    '    float param_1 = length(_469);'#10+
    '    float3 param_2 = _469;'#10+
    '    material_info_t param_3 = material_info;'#10+
    '    float3 param_4 = normal;'#10+
    '    float3 param_5 = view;'#10+
    '    return (_464_light_color * (get_range_attenuation(param, param_1) * _464_light_intensity)) * get_point_shade(param_2, param_3, param_4, param_5);'#10+
    '}'#10+

    'float3 toneMapUncharted2Impl(float3 color)'#10+
    '{'#10+
    '    return (((color * ((color * 0.1500000059604644775390625f) + 0.0500000007450580596923828125f.xxx)) + 0.0040000001899898052215576171875f.xxx) / ((color * ((color * 0.1500000059604644775390625f) + '+
      '0.5f.xxx)) + 0.0599999986588954925537109375f.xxx)) - 0.066666670143604278564453125f.xxx;'#10+
    '}'#10+

    'float3 linear_to_srgb(float3 _linear)'#10+
    '{'#10+
    '    return pow(_linear, 0.4545454680919647216796875f.xxx);'#10+
    '}'#10+

    'float3 toneMapUncharted(inout float3 color)'#10+
    '{'#10+
    '    float3 param = color * 2.0f;'#10+
    '    color = toneMapUncharted2Impl(param);'#10+
    '    float3 param_1 = 11.19999980926513671875f.xxx;'#10+
    '    float3 param_2 = color * (1.0f.xxx / toneMapUncharted2Impl(param_1));'#10+
    '    return linear_to_srgb(param_2);'#10+
    '}'#10+

    'float3 tone_map(float3 color)'#10+
    '{'#10+
    '    float3 param = color;'#10+
    '    float3 _548 = toneMapUncharted(param);'#10+
    '    return _548;'#10+
    '}'#10+

    'void frag_main()'#10+
    '{'#10+
    '    float4 _555 = metallic_roughness_texture.Sample(_metallic_roughness_texture_sampler, v_uv);'#10+
    '    float _565 = clamp(_555.w * _561_roughness_factor, 0.0f, 1.0f);'#10+
    '    float _572 = clamp(_555.x * _561_metallic_factor, 0.0f, 1.0f);'#10+
    '    float4 param = base_color_texture.Sample(_base_color_texture_sampler, v_uv);'#10+
    '    float3 _586 = (srgb_to_linear(param) * _561_base_color_factor).xyz;'#10+
    '    float3 _600 = lerp(0.039999999105930328369140625f.xxx, _586, _572.xxx);'#10+
    '    material_info_t _693 = { _565, _600, _565 * _565, (_586 * 0.959999978542327880859375f.xxx) * (1.0f - _572), clamp(max(max(_600.x, _600.y), _600.z) * 50.0f, 0.0f, 1.0f).xxx, _600 };'#10+
    '    material_info_t param_1 = _693;'#10+
    '    float3 param_2 = get_normal();'#10+
    '    float3 param_3 = normalize(v_eye_pos - v_pos);'#10+
    '    float3 color = apply_point_light(param_1, param_2, param_3) * occlusion_texture.Sample(_occlusion_texture_sampler, v_uv).x;'#10+
    '    float4 param_4 = emissive_texture.Sample(_emissive_texture_sampler, v_uv);'#10+
    '    float3 _664 = color;'#10+
    '    float3 _665 = _664 + (srgb_to_linear(param_4).xyz * _561_emissive_factor);'#10+
    '    color = _665;'#10+
    '    float3 param_5 = _665;'#10+
    '    frag_color = float4(tone_map(param_5), 1.0f);'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    v_pos = stage_input.v_pos;'#10+
    '    v_uv = stage_input.v_uv;'#10+
    '    v_nrm = stage_input.v_nrm;'#10+
    '    v_eye_pos = stage_input.v_eye_pos;'#10+
    '    frag_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.frag_color = frag_color;'#10+
    '    return stage_output;'#10+
    '}';

{$ENDIF !SOKOL_D3D11}

{$IFDEF SOKOL_METAL}
const
  VS_SOURCE_METAL_MACOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct vs_params'#10+
    '{'#10+
    '    float4x4 model;'#10+
    '    float4x4 view_proj;'#10+
    '    float3 eye_pos;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float3 v_pos [[user(locn0)]];'#10+
    '    float3 v_nrm [[user(locn1)]];'#10+
    '    float2 v_uv [[user(locn2)]];'#10+
    '    float3 v_eye_pos [[user(locn3)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 position [[attribute(0)]];'#10+
    '    float3 normal [[attribute(1)]];'#10+
    '    float2 texcoord [[attribute(2)]];'#10+
    '};'#10+

    'vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _16 [[buffer(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    float4 _25 = _16.model * in.position;'#10+
    '    out.v_pos = _25.xyz / float3(_25.w);'#10+
    '    out.v_nrm = (_16.model * float4(in.normal, 0.0)).xyz;'#10+
    '    out.v_uv = in.texcoord;'#10+
    '    out.v_eye_pos = _16.eye_pos;'#10+
    '    out.gl_Position = _16.view_proj * _25;'#10+
    '    return out;'#10+
    '}';

const
  METALLIC_FS_SOURCE_METAL_MACOS =
    '#pragma clang diagnostic ignored "-Wmissing-prototypes"'#10+

    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct angular_info_t'#10+
    '{'#10+
    '    float n_dot_l;'#10+
    '    float n_dot_v;'#10+
    '    float n_dot_h;'#10+
    '    float l_dot_h;'#10+
    '    float v_dot_h;'#10+
    '    float3 padding;'#10+
    '};'#10+

    'struct material_info_t'#10+
    '{'#10+
    '    float perceptual_roughness;'#10+
    '    float3 reflectance0;'#10+
    '    float alpha_roughness;'#10+
    '    float3 diffuse_color;'#10+
    '    float3 reflectance90;'#10+
    '    float3 specular_color;'#10+
    '};'#10+

    'struct light_params'#10+
    '{'#10+
    '    packed_float3 light_pos;'#10+
    '    float light_range;'#10+
    '    packed_float3 light_color;'#10+
    '    float light_intensity;'#10+
    '};'#10+

    'struct metallic_params'#10+
    '{'#10+
    '    float4 base_color_factor;'#10+
    '    packed_float3 emissive_factor;'#10+
    '    float metallic_factor;'#10+
    '    float roughness_factor;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_color [[color(0)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float3 v_pos [[user(locn0)]];'#10+
    '    float3 v_nrm [[user(locn1)]];'#10+
    '    float2 v_uv [[user(locn2)]];'#10+
    '    float3 v_eye_pos [[user(locn3)]];'#10+
    '};'#10+

    'static inline __attribute__((always_inline))'#10+
    'float4 srgb_to_linear(thread const float4& srgb)'#10+
    '{'#10+
    '    return float4(pow(srgb.xyz, float3(2.2000000476837158203125)), srgb.w);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 get_normal(thread float3& v_pos, thread float2& v_uv, thread float3& v_nrm, thread texture2d<float> normal_texture, thread const sampler normal_textureSmplr)'#10+
    '{'#10+
    '    float3 _117 = float3(v_uv, 0.0);'#10+
    '    float3 _118 = dfdx(_117);'#10+
    '    float3 _124 = dfdy(_117);'#10+
    '    float _128 = _124.y;'#10+
    '    float _132 = _118.y;'#10+
    '    float3 _149 = ((dfdx(v_pos) * _128) - (dfdy(v_pos) * _132)) / float3((_118.x * _128) - (_124.x * _132));'#10+
    '    float3 _153 = fast::normalize(v_nrm);'#10+
    '    float3 _161 = fast::normalize(_149 - (_153 * dot(_153, _149)));'#10+
    '    float2 _200 = (normal_texture.sample(normal_textureSmplr, v_uv).xw * 2.0) - float2(1.0);'#10+
    '    float _203 = _200.x;'#10+
    '    float _205 = _200.y;'#10+
    '    return fast::normalize(float3x3(_161, fast::normalize(cross(_153, _161)), _153) * float3(_203, _205, sqrt((1.0 - (_203 * _203)) - (_205 * _205))));'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float get_range_attenuation(thread const float& range, thread const float& _distance)'#10+
    '{'#10+
    '    if (range < 0.0)'#10+
    '    {'#10+
    '        return 1.0;'#10+
    '    }'#10+
    '    return fast::max(fast::min(1.0 - pow(_distance / range, 4.0), 1.0), 0.0) / pow(_distance, 2.0);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'angular_info_t get_angular_info(thread const float3& point_to_light, thread const float3& normal, thread const float3& view)'#10+
    '{'#10+
    '    float3 _229 = fast::normalize(normal);'#10+
    '    float3 _232 = fast::normalize(view);'#10+
    '    float3 _235 = fast::normalize(point_to_light);'#10+
    '    float3 _240 = fast::normalize(_235 + _232);'#10+
    '    return angular_info_t{ fast::clamp(dot(_229, _235), 0.0, 1.0), fast::clamp(dot(_229, _232), 0.0, 1.0), fast::clamp(dot(_229, _240), 0.0, 1.0), fast::clamp(dot(_235, _240), 0.0, 1.0), '+
      'fast::clamp(dot(_232, _240), 0.0, 1.0), float3(0.0) };'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 specular_reflection(thread const material_info_t& material_info, thread const angular_info_t& angular_info)'#10+
    '{'#10+
    '    return material_info.reflectance0 + ((material_info.reflectance90 - material_info.reflectance0) * pow(fast::clamp(1.0 - angular_info.v_dot_h, 0.0, 1.0), 5.0));'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float visibility_occlusion(thread const material_info_t& material_info, thread const angular_info_t& angular_info)'#10+
    '{'#10+
    '    float _308 = material_info.alpha_roughness * material_info.alpha_roughness;'#10+
    '    float _315 = 1.0 - _308;'#10+
    '    float _336 = (angular_info.n_dot_l * sqrt(((angular_info.n_dot_v * angular_info.n_dot_v) * _315) + _308)) + (angular_info.n_dot_v * sqrt(((angular_info.n_dot_l * angular_info.n_dot_v) * _315) + '+
      '_308));'#10+
    '    if (_336 > 0.0)'#10+
    '    {'#10+
    '        return 0.5 / _336;'#10+
    '    }'#10+
    '    return 0.0;'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float microfacet_distribution(thread const material_info_t& material_info, thread const angular_info_t& angular_info)'#10+
    '{'#10+
    '    float _353 = material_info.alpha_roughness * material_info.alpha_roughness;'#10+
    '    float _365 = (((angular_info.n_dot_h * _353) - angular_info.n_dot_h) * angular_info.n_dot_h) + 1.0;'#10+
    '    return _353 / ((3.1415927410125732421875 * _365) * _365);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 diffuse(thread const material_info_t& material_info)'#10+
    '{'#10+
    '    return material_info.diffuse_color * float3(0.3183098733425140380859375);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 get_point_shade(thread const float3& point_to_light, thread const material_info_t& material_info, thread const float3& normal, thread const float3& view)'#10+
    '{'#10+
    '    float3 param = point_to_light;'#10+
    '    float3 param_1 = normal;'#10+
    '    float3 param_2 = view;'#10+
    '    angular_info_t _389 = get_angular_info(param, param_1, param_2);'#10+
    '    float _700 = _389.n_dot_l;'#10+
    '    bool _392 = _700 > 0.0;'#10+
    '    bool _399;'#10+
    '    if (!_392)'#10+
    '    {'#10+
    '        _399 = _389.n_dot_v > 0.0;'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        _399 = _392;'#10+
    '    }'#10+
    '    if (_399)'#10+
    '    {'#10+
    '        material_info_t param_3 = material_info;'#10+
    '        angular_info_t param_4 = _389;'#10+
    '        float3 _407 = specular_reflection(param_3, param_4);'#10+
    '        material_info_t param_5 = material_info;'#10+
    '        angular_info_t param_6 = _389;'#10+
    '        material_info_t param_7 = material_info;'#10+
    '        angular_info_t param_8 = _389;'#10+
    '        material_info_t param_9 = material_info;'#10+
    '        return (((float3(1.0) - _407) * diffuse(param_9)) + ((_407 * visibility_occlusion(param_5, param_6)) * microfacet_distribution(param_7, param_8))) * _700;'#10+
    '    }'#10+
    '    return float3(0.0);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 apply_point_light(thread const material_info_t& material_info, thread const float3& normal, thread const float3& view, thread float3& v_pos, constant light_params& v_464)'#10+
    '{'#10+
    '    float3 _469 = float3(v_464.light_pos) - v_pos;'#10+
    '    float param = v_464.light_range;'#10+
    '    float param_1 = length(_469);'#10+
    '    float3 param_2 = _469;'#10+
    '    material_info_t param_3 = material_info;'#10+
    '    float3 param_4 = normal;'#10+
    '    float3 param_5 = view;'#10+
    '    return (float3(v_464.light_color) * (get_range_attenuation(param, param_1) * v_464.light_intensity)) * get_point_shade(param_2, param_3, param_4, param_5);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 toneMapUncharted2Impl(thread const float3& color)'#10+
    '{'#10+
    '    return (((color * ((color * 0.1500000059604644775390625) + float3(0.0500000007450580596923828125))) + float3(0.0040000001899898052215576171875)) / ((color * ((color * 0.1500000059604644775390625) '+
      '+ float3(0.5))) + float3(0.0599999986588954925537109375))) - float3(0.066666670143604278564453125);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 linear_to_srgb(thread const float3& linear)'#10+
    '{'#10+
    '    return pow(linear, float3(0.4545454680919647216796875));'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 toneMapUncharted(thread float3& color)'#10+
    '{'#10+
    '    float3 param = color * 2.0;'#10+
    '    color = toneMapUncharted2Impl(param);'#10+
    '    float3 param_1 = float3(11.19999980926513671875);'#10+
    '    float3 param_2 = color * (float3(1.0) / toneMapUncharted2Impl(param_1));'#10+
    '    return linear_to_srgb(param_2);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 tone_map(thread const float3& color)'#10+
    '{'#10+
    '    float3 param = color;'#10+
    '    float3 _548 = toneMapUncharted(param);'#10+
    '    return _548;'#10+
    '}'#10+

    'fragment main0_out main0(main0_in in [[stage_in]], constant light_params& v_464 [[buffer(0)]], constant metallic_params& _561 [[buffer(1)]], texture2d<float> normal_texture [[texture(0)]], '+
      'texture2d<float> metallic_roughness_texture [[texture(1)]], texture2d<float> base_color_texture [[texture(2)]], texture2d<float> occlusion_texture [[texture(3)]], texture2d<float> emissive_texture '+
      '[[texture(4)]], sampler normal_textureSmplr [[sampler(0)]], sampler metallic_roughness_textureSmplr [[sampler(1)]], sampler base_color_textureSmplr [[sampler(2)]], sampler occlusion_textureSmplr '+
      '[[sampler(3)]], sampler emissive_textureSmplr [[sampler(4)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    float4 _555 = metallic_roughness_texture.sample(metallic_roughness_textureSmplr, in.v_uv);'#10+
    '    float _565 = fast::clamp(_555.w * _561.roughness_factor, 0.0, 1.0);'#10+
    '    float _572 = fast::clamp(_555.x * _561.metallic_factor, 0.0, 1.0);'#10+
    '    float4 param = base_color_texture.sample(base_color_textureSmplr, in.v_uv);'#10+
    '    float3 _586 = (srgb_to_linear(param) * _561.base_color_factor).xyz;'#10+
    '    float3 _600 = mix(float3(0.039999999105930328369140625), _586, float3(_572));'#10+
    '    material_info_t param_1 = material_info_t{ _565, _600, _565 * _565, (_586 * float3(0.959999978542327880859375)) * (1.0 - _572), float3(fast::clamp(fast::max(fast::max(_600.x, _600.y), _600.z) * '+
      '50.0, 0.0, 1.0)), _600 };'#10+
    '    float3 param_2 = get_normal(in.v_pos, in.v_uv, in.v_nrm, normal_texture, normal_textureSmplr);'#10+
    '    float3 param_3 = fast::normalize(in.v_eye_pos - in.v_pos);'#10+
    '    float3 color = apply_point_light(param_1, param_2, param_3, in.v_pos, v_464) * occlusion_texture.sample(occlusion_textureSmplr, in.v_uv).x;'#10+
    '    float4 param_4 = emissive_texture.sample(emissive_textureSmplr, in.v_uv);'#10+
    '    float3 _664 = color;'#10+
    '    float3 _665 = _664 + (srgb_to_linear(param_4).xyz * float3(_561.emissive_factor));'#10+
    '    color = _665;'#10+
    '    float3 param_5 = _665;'#10+
    '    out.frag_color = float4(tone_map(param_5), 1.0);'#10+
    '    return out;'#10+
    '}';

{$ENDIF !SOKOL_METAL}

{$IFDEF SOKOL_METAL}
const
  VS_SOURCE_METAL_IOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct vs_params'#10+
    '{'#10+
    '    float4x4 model;'#10+
    '    float4x4 view_proj;'#10+
    '    float3 eye_pos;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float3 v_pos [[user(locn0)]];'#10+
    '    float3 v_nrm [[user(locn1)]];'#10+
    '    float2 v_uv [[user(locn2)]];'#10+
    '    float3 v_eye_pos [[user(locn3)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 position [[attribute(0)]];'#10+
    '    float3 normal [[attribute(1)]];'#10+
    '    float2 texcoord [[attribute(2)]];'#10+
    '};'#10+

    'vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _16 [[buffer(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    float4 _25 = _16.model * in.position;'#10+
    '    out.v_pos = _25.xyz / float3(_25.w);'#10+
    '    out.v_nrm = (_16.model * float4(in.normal, 0.0)).xyz;'#10+
    '    out.v_uv = in.texcoord;'#10+
    '    out.v_eye_pos = _16.eye_pos;'#10+
    '    out.gl_Position = _16.view_proj * _25;'#10+
    '    return out;'#10+
    '}';

const
  METALLIC_FS_SOURCE_METAL_IOS =
    '#pragma clang diagnostic ignored "-Wmissing-prototypes"'#10+

    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct angular_info_t'#10+
    '{'#10+
    '    float n_dot_l;'#10+
    '    float n_dot_v;'#10+
    '    float n_dot_h;'#10+
    '    float l_dot_h;'#10+
    '    float v_dot_h;'#10+
    '    float3 padding;'#10+
    '};'#10+

    'struct material_info_t'#10+
    '{'#10+
    '    float perceptual_roughness;'#10+
    '    float3 reflectance0;'#10+
    '    float alpha_roughness;'#10+
    '    float3 diffuse_color;'#10+
    '    float3 reflectance90;'#10+
    '    float3 specular_color;'#10+
    '};'#10+

    'struct light_params'#10+
    '{'#10+
    '    packed_float3 light_pos;'#10+
    '    float light_range;'#10+
    '    packed_float3 light_color;'#10+
    '    float light_intensity;'#10+
    '};'#10+

    'struct metallic_params'#10+
    '{'#10+
    '    float4 base_color_factor;'#10+
    '    packed_float3 emissive_factor;'#10+
    '    float metallic_factor;'#10+
    '    float roughness_factor;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_color [[color(0)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float3 v_pos [[user(locn0)]];'#10+
    '    float3 v_nrm [[user(locn1)]];'#10+
    '    float2 v_uv [[user(locn2)]];'#10+
    '    float3 v_eye_pos [[user(locn3)]];'#10+
    '};'#10+

    'static inline __attribute__((always_inline))'#10+
    'float4 srgb_to_linear(thread const float4& srgb)'#10+
    '{'#10+
    '    return float4(pow(srgb.xyz, float3(2.2000000476837158203125)), srgb.w);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 get_normal(thread float3& v_pos, thread float2& v_uv, thread float3& v_nrm, thread texture2d<float> normal_texture, thread const sampler normal_textureSmplr)'#10+
    '{'#10+
    '    float3 _117 = float3(v_uv, 0.0);'#10+
    '    float3 _118 = dfdx(_117);'#10+
    '    float3 _124 = dfdy(_117);'#10+
    '    float _128 = _124.y;'#10+
    '    float _132 = _118.y;'#10+
    '    float3 _149 = ((dfdx(v_pos) * _128) - (dfdy(v_pos) * _132)) / float3((_118.x * _128) - (_124.x * _132));'#10+
    '    float3 _153 = fast::normalize(v_nrm);'#10+
    '    float3 _161 = fast::normalize(_149 - (_153 * dot(_153, _149)));'#10+
    '    float2 _200 = (normal_texture.sample(normal_textureSmplr, v_uv).xw * 2.0) - float2(1.0);'#10+
    '    float _203 = _200.x;'#10+
    '    float _205 = _200.y;'#10+
    '    return fast::normalize(float3x3(_161, fast::normalize(cross(_153, _161)), _153) * float3(_203, _205, sqrt((1.0 - (_203 * _203)) - (_205 * _205))));'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float get_range_attenuation(thread const float& range, thread const float& _distance)'#10+
    '{'#10+
    '    if (range < 0.0)'#10+
    '    {'#10+
    '        return 1.0;'#10+
    '    }'#10+
    '    return fast::max(fast::min(1.0 - pow(_distance / range, 4.0), 1.0), 0.0) / pow(_distance, 2.0);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'angular_info_t get_angular_info(thread const float3& point_to_light, thread const float3& normal, thread const float3& view)'#10+
    '{'#10+
    '    float3 _229 = fast::normalize(normal);'#10+
    '    float3 _232 = fast::normalize(view);'#10+
    '    float3 _235 = fast::normalize(point_to_light);'#10+
    '    float3 _240 = fast::normalize(_235 + _232);'#10+
    '    return angular_info_t{ fast::clamp(dot(_229, _235), 0.0, 1.0), fast::clamp(dot(_229, _232), 0.0, 1.0), fast::clamp(dot(_229, _240), 0.0, 1.0), fast::clamp(dot(_235, _240), 0.0, 1.0), '+
      'fast::clamp(dot(_232, _240), 0.0, 1.0), float3(0.0) };'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 specular_reflection(thread const material_info_t& material_info, thread const angular_info_t& angular_info)'#10+
    '{'#10+
    '    return material_info.reflectance0 + ((material_info.reflectance90 - material_info.reflectance0) * pow(fast::clamp(1.0 - angular_info.v_dot_h, 0.0, 1.0), 5.0));'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float visibility_occlusion(thread const material_info_t& material_info, thread const angular_info_t& angular_info)'#10+
    '{'#10+
    '    float _308 = material_info.alpha_roughness * material_info.alpha_roughness;'#10+
    '    float _315 = 1.0 - _308;'#10+
    '    float _336 = (angular_info.n_dot_l * sqrt(((angular_info.n_dot_v * angular_info.n_dot_v) * _315) + _308)) + (angular_info.n_dot_v * sqrt(((angular_info.n_dot_l * angular_info.n_dot_v) * _315) + '+
      '_308));'#10+
    '    if (_336 > 0.0)'#10+
    '    {'#10+
    '        return 0.5 / _336;'#10+
    '    }'#10+
    '    return 0.0;'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float microfacet_distribution(thread const material_info_t& material_info, thread const angular_info_t& angular_info)'#10+
    '{'#10+
    '    float _353 = material_info.alpha_roughness * material_info.alpha_roughness;'#10+
    '    float _365 = (((angular_info.n_dot_h * _353) - angular_info.n_dot_h) * angular_info.n_dot_h) + 1.0;'#10+
    '    return _353 / ((3.1415927410125732421875 * _365) * _365);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 diffuse(thread const material_info_t& material_info)'#10+
    '{'#10+
    '    return material_info.diffuse_color * float3(0.3183098733425140380859375);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 get_point_shade(thread const float3& point_to_light, thread const material_info_t& material_info, thread const float3& normal, thread const float3& view)'#10+
    '{'#10+
    '    float3 param = point_to_light;'#10+
    '    float3 param_1 = normal;'#10+
    '    float3 param_2 = view;'#10+
    '    angular_info_t _389 = get_angular_info(param, param_1, param_2);'#10+
    '    float _700 = _389.n_dot_l;'#10+
    '    bool _392 = _700 > 0.0;'#10+
    '    bool _399;'#10+
    '    if (!_392)'#10+
    '    {'#10+
    '        _399 = _389.n_dot_v > 0.0;'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        _399 = _392;'#10+
    '    }'#10+
    '    if (_399)'#10+
    '    {'#10+
    '        material_info_t param_3 = material_info;'#10+
    '        angular_info_t param_4 = _389;'#10+
    '        float3 _407 = specular_reflection(param_3, param_4);'#10+
    '        material_info_t param_5 = material_info;'#10+
    '        angular_info_t param_6 = _389;'#10+
    '        material_info_t param_7 = material_info;'#10+
    '        angular_info_t param_8 = _389;'#10+
    '        material_info_t param_9 = material_info;'#10+
    '        return (((float3(1.0) - _407) * diffuse(param_9)) + ((_407 * visibility_occlusion(param_5, param_6)) * microfacet_distribution(param_7, param_8))) * _700;'#10+
    '    }'#10+
    '    return float3(0.0);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 apply_point_light(thread const material_info_t& material_info, thread const float3& normal, thread const float3& view, thread float3& v_pos, constant light_params& v_464)'#10+
    '{'#10+
    '    float3 _469 = float3(v_464.light_pos) - v_pos;'#10+
    '    float param = v_464.light_range;'#10+
    '    float param_1 = length(_469);'#10+
    '    float3 param_2 = _469;'#10+
    '    material_info_t param_3 = material_info;'#10+
    '    float3 param_4 = normal;'#10+
    '    float3 param_5 = view;'#10+
    '    return (float3(v_464.light_color) * (get_range_attenuation(param, param_1) * v_464.light_intensity)) * get_point_shade(param_2, param_3, param_4, param_5);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 toneMapUncharted2Impl(thread const float3& color)'#10+
    '{'#10+
    '    return (((color * ((color * 0.1500000059604644775390625) + float3(0.0500000007450580596923828125))) + float3(0.0040000001899898052215576171875)) / ((color * ((color * 0.1500000059604644775390625) '+
      '+ float3(0.5))) + float3(0.0599999986588954925537109375))) - float3(0.066666670143604278564453125);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 linear_to_srgb(thread const float3& linear)'#10+
    '{'#10+
    '    return pow(linear, float3(0.4545454680919647216796875));'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 toneMapUncharted(thread float3& color)'#10+
    '{'#10+
    '    float3 param = color * 2.0;'#10+
    '    color = toneMapUncharted2Impl(param);'#10+
    '    float3 param_1 = float3(11.19999980926513671875);'#10+
    '    float3 param_2 = color * (float3(1.0) / toneMapUncharted2Impl(param_1));'#10+
    '    return linear_to_srgb(param_2);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 tone_map(thread const float3& color)'#10+
    '{'#10+
    '    float3 param = color;'#10+
    '    float3 _548 = toneMapUncharted(param);'#10+
    '    return _548;'#10+
    '}'#10+

    'fragment main0_out main0(main0_in in [[stage_in]], constant light_params& v_464 [[buffer(0)]], constant metallic_params& _561 [[buffer(1)]], texture2d<float> normal_texture [[texture(0)]], '+
      'texture2d<float> metallic_roughness_texture [[texture(1)]], texture2d<float> base_color_texture [[texture(2)]], texture2d<float> occlusion_texture [[texture(3)]], texture2d<float> emissive_texture '+
      '[[texture(4)]], sampler normal_textureSmplr [[sampler(0)]], sampler metallic_roughness_textureSmplr [[sampler(1)]], sampler base_color_textureSmplr [[sampler(2)]], sampler occlusion_textureSmplr '+
      '[[sampler(3)]], sampler emissive_textureSmplr [[sampler(4)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    float4 _555 = metallic_roughness_texture.sample(metallic_roughness_textureSmplr, in.v_uv);'#10+
    '    float _565 = fast::clamp(_555.w * _561.roughness_factor, 0.0, 1.0);'#10+
    '    float _572 = fast::clamp(_555.x * _561.metallic_factor, 0.0, 1.0);'#10+
    '    float4 param = base_color_texture.sample(base_color_textureSmplr, in.v_uv);'#10+
    '    float3 _586 = (srgb_to_linear(param) * _561.base_color_factor).xyz;'#10+
    '    float3 _600 = mix(float3(0.039999999105930328369140625), _586, float3(_572));'#10+
    '    material_info_t param_1 = material_info_t{ _565, _600, _565 * _565, (_586 * float3(0.959999978542327880859375)) * (1.0 - _572), float3(fast::clamp(fast::max(fast::max(_600.x, _600.y), _600.z) * '+
      '50.0, 0.0, 1.0)), _600 };'#10+
    '    float3 param_2 = get_normal(in.v_pos, in.v_uv, in.v_nrm, normal_texture, normal_textureSmplr);'#10+
    '    float3 param_3 = fast::normalize(in.v_eye_pos - in.v_pos);'#10+
    '    float3 color = apply_point_light(param_1, param_2, param_3, in.v_pos, v_464) * occlusion_texture.sample(occlusion_textureSmplr, in.v_uv).x;'#10+
    '    float4 param_4 = emissive_texture.sample(emissive_textureSmplr, in.v_uv);'#10+
    '    float3 _664 = color;'#10+
    '    float3 _665 = _664 + (srgb_to_linear(param_4).xyz * float3(_561.emissive_factor));'#10+
    '    color = _665;'#10+
    '    float3 param_5 = _665;'#10+
    '    out.frag_color = float4(tone_map(param_5), 1.0);'#10+
    '    return out;'#10+
    '}';

{$ENDIF !SOKOL_METAL}

var
  GGltfMetallicShaderDesc: TNativeShaderDesc;

procedure InitGltfMetallicShaderDesc;
begin
  GGltfMetallicShaderDesc.Init;
  GGltfMetallicShaderDesc.Attrs[0].Init('position', 'TEXCOORD', 0);
  GGltfMetallicShaderDesc.Attrs[1].Init('normal', 'TEXCOORD', 1);
  GGltfMetallicShaderDesc.Attrs[2].Init('texcoord', 'TEXCOORD', 2);

  case TGfx.Backend of
    {$IFDEF SOKOL_GLCORE33}
    TBackend.GLCore33:
      begin
        GGltfMetallicShaderDesc.VS.Source := VS_SOURCE_GLSL330;
        GGltfMetallicShaderDesc.FS.Source := METALLIC_FS_SOURCE_GLSL330;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES2}
    TBackend.Gles2:
      begin
        GGltfMetallicShaderDesc.VS.Source := VS_SOURCE_GLSL100;
        GGltfMetallicShaderDesc.FS.Source := METALLIC_FS_SOURCE_GLSL100;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES3}
    TBackend.Gles3:
      begin
        GGltfMetallicShaderDesc.VS.Source := VS_SOURCE_GLSL300ES;
        GGltfMetallicShaderDesc.FS.Source := METALLIC_FS_SOURCE_GLSL300ES;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_D3D11}
    TBackend.D3D11:
      begin
        GGltfMetallicShaderDesc.VS.Source := VS_SOURCE_HLSL5;
        GGltfMetallicShaderDesc.FS.Source := METALLIC_FS_SOURCE_HLSL5;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalMacOS:
      begin
        GGltfMetallicShaderDesc.VS.Source := VS_SOURCE_METAL_MACOS;
        GGltfMetallicShaderDesc.FS.Source := METALLIC_FS_SOURCE_METAL_MACOS;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalIOS:
      begin
        GGltfMetallicShaderDesc.VS.Source := VS_SOURCE_METAL_IOS;
        GGltfMetallicShaderDesc.FS.Source := METALLIC_FS_SOURCE_METAL_IOS;
      end;
    {$ENDIF}
  else
    Assert(False)
  end;

  GGltfMetallicShaderDesc.vs.uniform_blocks[0].size := 144;
  GGltfMetallicShaderDesc.vs.uniform_blocks[0].layout := _SG_UNIFORMLAYOUT_STD140;
  if (TGfx.Backend.IsGL) then
    GGltfMetallicShaderDesc.vs.uniform_blocks[0].uniforms[0].Init('vs_params', _SG_UNIFORMTYPE_FLOAT4, 9);
  GGltfMetallicShaderDesc.fs.uniform_blocks[0].size := 32;
  GGltfMetallicShaderDesc.fs.uniform_blocks[0].layout := _SG_UNIFORMLAYOUT_STD140;
  if (TGfx.Backend.IsGL) then
    GGltfMetallicShaderDesc.fs.uniform_blocks[0].uniforms[0].Init('light_params', _SG_UNIFORMTYPE_FLOAT4, 2);
  GGltfMetallicShaderDesc.fs.uniform_blocks[1].size := 48;
  GGltfMetallicShaderDesc.fs.uniform_blocks[1].layout := _SG_UNIFORMLAYOUT_STD140;
  if (TGfx.Backend.IsGL) then
    GGltfMetallicShaderDesc.fs.uniform_blocks[1].uniforms[0].Init('metallic_params', _SG_UNIFORMTYPE_FLOAT4, 3);
  GGltfMetallicShaderDesc.fs.images[0].Init('normal_texture', _SG_IMAGETYPE_2D, _SG_SAMPLERTYPE_FLOAT);
  GGltfMetallicShaderDesc.fs.images[1].Init('metallic_roughness_texture', _SG_IMAGETYPE_2D, _SG_SAMPLERTYPE_FLOAT);
  GGltfMetallicShaderDesc.fs.images[2].Init('base_color_texture', _SG_IMAGETYPE_2D, _SG_SAMPLERTYPE_FLOAT);
  GGltfMetallicShaderDesc.fs.images[3].Init('occlusion_texture', _SG_IMAGETYPE_2D, _SG_SAMPLERTYPE_FLOAT);
  GGltfMetallicShaderDesc.fs.images[4].Init('emissive_texture', _SG_IMAGETYPE_2D, _SG_SAMPLERTYPE_FLOAT);
  GGltfMetallicShaderDesc.&label := 'GltfMetallicShader';
end;

function GltfMetallicShaderDesc: PNativeShaderDesc;
begin
  if (GGltfMetallicShaderDesc.VS.Entry = nil) then
    InitGltfMetallicShaderDesc;

  Result := @GGltfMetallicShaderDesc;
end;

end.
