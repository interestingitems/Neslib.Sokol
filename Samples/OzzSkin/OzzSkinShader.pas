unit OzzSkinShader;
{ #version:1# (machine generated, don't edit!)

  Generated by sokol-shdc (https://github.com/floooh/sokol-tools)
  With Delphi modifications (https://github.com/neslib/Neslib.Sokol.Tools)

  Cmdline: sokol-shdc --input OzzSkinShader.glsl --output OzzSkinShader.pas

  Overview:

    Shader program 'skinned':
      Get shader desc: SkinnedShaderDesc()
      Vertex shader: vs
        Attribute slots:
          ATTR_VS_POSITION = 0
          ATTR_VS_NORMAL = 1
          ATTR_VS_JINDICES = 2
          ATTR_VS_JWEIGHTS = 3
          ATTR_VS_INST_XXXX = 4
          ATTR_VS_INST_YYYY = 5
          ATTR_VS_INST_ZZZZ = 6
          ATTR_VS_INST_JOINT_UV = 7
        Uniform block 'vs_params':
          Delphi record: TVSParams
          Bind slot: SLOT_VS_PARAMS = 0
        Image 'joint_tex':
          Type: _SG_IMAGETYPE_2D
          Component Type: _SG_SAMPLERTYPE_FLOAT
          Bind slot: SLOT_JOINT_TEX = 0
      Fragment shader: fs


  Shader descriptor records:

    var SkinnedShader := TShader.Create(SkinnedShaderDesc);

  Vertex attribute locations for vertex shader 'vs':

    var PipDesc: TPipelineDesc;
    PipDesc.Init;
    PipDesc.Attrs[ATTR_VS_POSITION]. ...
    PipDesc.Attrs[ATTR_VS_NORMAL]. ...
    PipDesc.Attrs[ATTR_VS_JINDICES]. ...
    PipDesc.Attrs[ATTR_VS_JWEIGHTS]. ...
    PipDesc.Attrs[ATTR_VS_INST_XXXX]. ...
    PipDesc.Attrs[ATTR_VS_INST_YYYY]. ...
    PipDesc.Attrs[ATTR_VS_INST_ZZZZ]. ...
    PipDesc.Attrs[ATTR_VS_INST_JOINT_UV]. ...
    PipDesc. ...
    var Pip := TPipeline.Create(PipDesc);

  Image bind slots, use as index in TBindings.VSImages[] or .FSImages[]:

    SLOT_JOINT_TEX = 0;

  Bind slot and Delphi record for uniform block 'VSParams':

    VSParams: TVSParams;
    VSParams.ViewProj := ...;
    VSParams.JointPixelWidth := ...;
    TGfx.ApplyUniforms(TShaderStage.[VertexShader|FragmentShader], SLOT_VS_PARAMS, TRange.Create(VSParams));

}

{$INCLUDE 'Neslib.Sokol.inc'}

interface

uses
  Neslib.FastMath,
  Neslib.Sokol.Gfx;

const
  ATTR_VS_POSITION = 0;
  ATTR_VS_NORMAL = 1;
  ATTR_VS_JINDICES = 2;
  ATTR_VS_JWEIGHTS = 3;
  ATTR_VS_INST_XXXX = 4;
  ATTR_VS_INST_YYYY = 5;
  ATTR_VS_INST_ZZZZ = 6;
  ATTR_VS_INST_JOINT_UV = 7;

const
  SLOT_JOINT_TEX = 0;

const
  SLOT_VS_PARAMS = 0;

type
  TVSParams = packed record
  public
    ViewProj: TMatrix4;
    JointPixelWidth: Single;
    _Pad68: array [0..11] of UInt8;
  end;

function SkinnedShaderDesc: PNativeShaderDesc;

implementation

uses
  Neslib.Sokol.Api;

{$IFDEF SOKOL_GLCORE33}
const
  VS_SOURCE_GLSL330 =
    '#version 330'#10+

    'uniform vec4 vs_params[5];'#10+
    'uniform sampler2D joint_tex;'#10+

    'layout(location = 0) in vec4 position;'#10+
    'layout(location = 1) in vec4 normal;'#10+
    'layout(location = 3) in vec4 jweights;'#10+
    'layout(location = 2) in vec4 jindices;'#10+
    'layout(location = 7) in vec2 inst_joint_uv;'#10+
    'layout(location = 4) in vec4 inst_xxxx;'#10+
    'layout(location = 5) in vec4 inst_yyyy;'#10+
    'layout(location = 6) in vec4 inst_zzzz;'#10+
    'out vec3 color;'#10+

    'void skinned_pos_nrm(vec4 pos, vec4 nrm, vec4 skin_weights, vec4 skin_indices, vec2 joint_uv, inout vec4 skin_pos, inout vec4 skin_nrm)'#10+
    '{'#10+
    '    skin_pos = vec4(0.0, 0.0, 0.0, 1.0);'#10+
    '    skin_nrm = vec4(0.0);'#10+
    '    vec4 _33 = skin_weights / vec4(dot(skin_weights, vec4(1.0)));'#10+
    '    vec2 _44 = vec2(vs_params[4].x, 0.0);'#10+
    '    float _49 = _33.x;'#10+
    '    if (_49 > 0.0)'#10+
    '    {'#10+
    '        vec2 _68 = vec2(joint_uv.x + ((3.0 * skin_indices.x) * vs_params[4].x), joint_uv.y);'#10+
    '        vec4 _76 = textureLod(joint_tex, _68, 0.0);'#10+
    '        vec4 _82 = textureLod(joint_tex, _68 + _44, 0.0);'#10+
    '        vec4 _90 = textureLod(joint_tex, _68 + (_44 * 2.0), 0.0);'#10+
    '        vec4 _105 = skin_pos;'#10+
    '        vec3 _107 = _105.xyz + (vec3(dot(pos, _76), dot(pos, _82), dot(pos, _90)) * _49);'#10+
    '        skin_pos.x = _107.x;'#10+
    '        skin_pos.y = _107.y;'#10+
    '        skin_pos.z = _107.z;'#10+
    '        vec4 _128 = skin_nrm;'#10+
    '        vec3 _130 = _128.xyz + (vec3(dot(nrm, _76), dot(nrm, _82), dot(nrm, _90)) * _49);'#10+
    '        skin_nrm.x = _130.x;'#10+
    '        skin_nrm.y = _130.y;'#10+
    '        skin_nrm.z = _130.z;'#10+
    '    }'#10+
    '    float _138 = _33.y;'#10+
    '    if (_138 > 0.0)'#10+
    '    {'#10+
    '        vec2 _153 = vec2(joint_uv.x + ((3.0 * skin_indices.y) * vs_params[4].x), joint_uv.y);'#10+
    '        vec4 _156 = textureLod(joint_tex, _153, 0.0);'#10+
    '        vec4 _161 = textureLod(joint_tex, _153 + _44, 0.0);'#10+
    '        vec4 _167 = textureLod(joint_tex, _153 + (_44 * 2.0), 0.0);'#10+
    '        vec4 _181 = skin_pos;'#10+
    '        vec3 _183 = _181.xyz + (vec3(dot(pos, _156), dot(pos, _161), dot(pos, _167)) * _138);'#10+
    '        skin_pos.x = _183.x;'#10+
    '        skin_pos.y = _183.y;'#10+
    '        skin_pos.z = _183.z;'#10+
    '        vec4 _203 = skin_nrm;'#10+
    '        vec3 _205 = _203.xyz + (vec3(dot(nrm, _156), dot(nrm, _161), dot(nrm, _167)) * _138);'#10+
    '        skin_nrm.x = _205.x;'#10+
    '        skin_nrm.y = _205.y;'#10+
    '        skin_nrm.z = _205.z;'#10+
    '    }'#10+
    '    float _213 = _33.z;'#10+
    '    if (_213 > 0.0)'#10+
    '    {'#10+
    '        vec2 _228 = vec2(joint_uv.x + ((3.0 * skin_indices.z) * vs_params[4].x), joint_uv.y);'#10+
    '        vec4 _231 = textureLod(joint_tex, _228, 0.0);'#10+
    '        vec4 _236 = textureLod(joint_tex, _228 + _44, 0.0);'#10+
    '        vec4 _242 = textureLod(joint_tex, _228 + (_44 * 2.0), 0.0);'#10+
    '        vec4 _256 = skin_pos;'#10+
    '        vec3 _258 = _256.xyz + (vec3(dot(pos, _231), dot(pos, _236), dot(pos, _242)) * _213);'#10+
    '        skin_pos.x = _258.x;'#10+
    '        skin_pos.y = _258.y;'#10+
    '        skin_pos.z = _258.z;'#10+
    '        vec4 _278 = skin_nrm;'#10+
    '        vec3 _280 = _278.xyz + (vec3(dot(nrm, _231), dot(nrm, _236), dot(nrm, _242)) * _213);'#10+
    '        skin_nrm.x = _280.x;'#10+
    '        skin_nrm.y = _280.y;'#10+
    '        skin_nrm.z = _280.z;'#10+
    '    }'#10+
    '    float _289 = _33.w;'#10+
    '    if (_289 > 0.0)'#10+
    '    {'#10+
    '        vec2 _304 = vec2(joint_uv.x + ((3.0 * skin_indices.w) * vs_params[4].x), joint_uv.y);'#10+
    '        vec4 _307 = textureLod(joint_tex, _304, 0.0);'#10+
    '        vec4 _312 = textureLod(joint_tex, _304 + _44, 0.0);'#10+
    '        vec4 _318 = textureLod(joint_tex, _304 + (_44 * 2.0), 0.0);'#10+
    '        vec4 _332 = skin_pos;'#10+
    '        vec3 _334 = _332.xyz + (vec3(dot(pos, _307), dot(pos, _312), dot(pos, _318)) * _289);'#10+
    '        skin_pos.x = _334.x;'#10+
    '        skin_pos.y = _334.y;'#10+
    '        skin_pos.z = _334.z;'#10+
    '        vec4 _354 = skin_nrm;'#10+
    '        vec3 _356 = _354.xyz + (vec3(dot(nrm, _307), dot(nrm, _312), dot(nrm, _318)) * _289);'#10+
    '        skin_nrm.x = _356.x;'#10+
    '        skin_nrm.y = _356.y;'#10+
    '        skin_nrm.z = _356.z;'#10+
    '    }'#10+
    '}'#10+

    'void main()'#10+
    '{'#10+
    '    vec4 param = position;'#10+
    '    vec4 param_1 = normal;'#10+
    '    vec4 param_2 = jweights;'#10+
    '    vec4 param_3 = jindices * 255.0;'#10+
    '    vec2 param_4 = inst_joint_uv;'#10+
    '    vec4 param_5;'#10+
    '    vec4 param_6;'#10+
    '    skinned_pos_nrm(param, param_1, param_2, param_3, param_4, param_5, param_6);'#10+
    '    gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(dot(param_5, inst_xxxx), dot(param_5, inst_yyyy), dot(param_5, inst_zzzz), 1.0);'#10+
    '    color = (vec4(dot(param_6, inst_xxxx), dot(param_6, inst_yyyy), dot(param_6, inst_zzzz), 0.0).xyz + vec3(1.0)) * 0.5;'#10+
    '}';

const
  FS_SOURCE_GLSL330 =
    '#version 330'#10+

    'layout(location = 0) out vec4 frag_color;'#10+
    'in vec3 color;'#10+

    'void main()'#10+
    '{'#10+
    '    frag_color = vec4(color, 1.0);'#10+
    '}';

{$ENDIF !SOKOL_GLCORE33}

{$IFDEF SOKOL_GLES2}
const
  VS_SOURCE_GLSL100 =
    '#version 100'#10+

    'uniform vec4 vs_params[5];'#10+
    'uniform highp sampler2D joint_tex;'#10+

    'attribute vec4 position;'#10+
    'attribute vec4 normal;'#10+
    'attribute vec4 jweights;'#10+
    'attribute vec4 jindices;'#10+
    'attribute vec2 inst_joint_uv;'#10+
    'attribute vec4 inst_xxxx;'#10+
    'attribute vec4 inst_yyyy;'#10+
    'attribute vec4 inst_zzzz;'#10+
    'varying vec3 color;'#10+

    'void skinned_pos_nrm(vec4 pos, vec4 nrm, vec4 skin_weights, vec4 skin_indices, vec2 joint_uv, inout vec4 skin_pos, inout vec4 skin_nrm)'#10+
    '{'#10+
    '    skin_pos = vec4(0.0, 0.0, 0.0, 1.0);'#10+
    '    skin_nrm = vec4(0.0);'#10+
    '    vec4 _33 = skin_weights / vec4(dot(skin_weights, vec4(1.0)));'#10+
    '    vec2 _44 = vec2(vs_params[4].x, 0.0);'#10+
    '    float _49 = _33.x;'#10+
    '    if (_49 > 0.0)'#10+
    '    {'#10+
    '        vec2 _68 = vec2(joint_uv.x + ((3.0 * skin_indices.x) * vs_params[4].x), joint_uv.y);'#10+
    '        vec4 _76 = texture2DLod(joint_tex, _68, 0.0);'#10+
    '        vec4 _82 = texture2DLod(joint_tex, _68 + _44, 0.0);'#10+
    '        vec4 _90 = texture2DLod(joint_tex, _68 + (_44 * 2.0), 0.0);'#10+
    '        vec4 _105 = skin_pos;'#10+
    '        vec3 _107 = _105.xyz + (vec3(dot(pos, _76), dot(pos, _82), dot(pos, _90)) * _49);'#10+
    '        skin_pos.x = _107.x;'#10+
    '        skin_pos.y = _107.y;'#10+
    '        skin_pos.z = _107.z;'#10+
    '        vec4 _128 = skin_nrm;'#10+
    '        vec3 _130 = _128.xyz + (vec3(dot(nrm, _76), dot(nrm, _82), dot(nrm, _90)) * _49);'#10+
    '        skin_nrm.x = _130.x;'#10+
    '        skin_nrm.y = _130.y;'#10+
    '        skin_nrm.z = _130.z;'#10+
    '    }'#10+
    '    float _138 = _33.y;'#10+
    '    if (_138 > 0.0)'#10+
    '    {'#10+
    '        vec2 _153 = vec2(joint_uv.x + ((3.0 * skin_indices.y) * vs_params[4].x), joint_uv.y);'#10+
    '        vec4 _156 = texture2DLod(joint_tex, _153, 0.0);'#10+
    '        vec4 _161 = texture2DLod(joint_tex, _153 + _44, 0.0);'#10+
    '        vec4 _167 = texture2DLod(joint_tex, _153 + (_44 * 2.0), 0.0);'#10+
    '        vec4 _181 = skin_pos;'#10+
    '        vec3 _183 = _181.xyz + (vec3(dot(pos, _156), dot(pos, _161), dot(pos, _167)) * _138);'#10+
    '        skin_pos.x = _183.x;'#10+
    '        skin_pos.y = _183.y;'#10+
    '        skin_pos.z = _183.z;'#10+
    '        vec4 _203 = skin_nrm;'#10+
    '        vec3 _205 = _203.xyz + (vec3(dot(nrm, _156), dot(nrm, _161), dot(nrm, _167)) * _138);'#10+
    '        skin_nrm.x = _205.x;'#10+
    '        skin_nrm.y = _205.y;'#10+
    '        skin_nrm.z = _205.z;'#10+
    '    }'#10+
    '    float _213 = _33.z;'#10+
    '    if (_213 > 0.0)'#10+
    '    {'#10+
    '        vec2 _228 = vec2(joint_uv.x + ((3.0 * skin_indices.z) * vs_params[4].x), joint_uv.y);'#10+
    '        vec4 _231 = texture2DLod(joint_tex, _228, 0.0);'#10+
    '        vec4 _236 = texture2DLod(joint_tex, _228 + _44, 0.0);'#10+
    '        vec4 _242 = texture2DLod(joint_tex, _228 + (_44 * 2.0), 0.0);'#10+
    '        vec4 _256 = skin_pos;'#10+
    '        vec3 _258 = _256.xyz + (vec3(dot(pos, _231), dot(pos, _236), dot(pos, _242)) * _213);'#10+
    '        skin_pos.x = _258.x;'#10+
    '        skin_pos.y = _258.y;'#10+
    '        skin_pos.z = _258.z;'#10+
    '        vec4 _278 = skin_nrm;'#10+
    '        vec3 _280 = _278.xyz + (vec3(dot(nrm, _231), dot(nrm, _236), dot(nrm, _242)) * _213);'#10+
    '        skin_nrm.x = _280.x;'#10+
    '        skin_nrm.y = _280.y;'#10+
    '        skin_nrm.z = _280.z;'#10+
    '    }'#10+
    '    float _289 = _33.w;'#10+
    '    if (_289 > 0.0)'#10+
    '    {'#10+
    '        vec2 _304 = vec2(joint_uv.x + ((3.0 * skin_indices.w) * vs_params[4].x), joint_uv.y);'#10+
    '        vec4 _307 = texture2DLod(joint_tex, _304, 0.0);'#10+
    '        vec4 _312 = texture2DLod(joint_tex, _304 + _44, 0.0);'#10+
    '        vec4 _318 = texture2DLod(joint_tex, _304 + (_44 * 2.0), 0.0);'#10+
    '        vec4 _332 = skin_pos;'#10+
    '        vec3 _334 = _332.xyz + (vec3(dot(pos, _307), dot(pos, _312), dot(pos, _318)) * _289);'#10+
    '        skin_pos.x = _334.x;'#10+
    '        skin_pos.y = _334.y;'#10+
    '        skin_pos.z = _334.z;'#10+
    '        vec4 _354 = skin_nrm;'#10+
    '        vec3 _356 = _354.xyz + (vec3(dot(nrm, _307), dot(nrm, _312), dot(nrm, _318)) * _289);'#10+
    '        skin_nrm.x = _356.x;'#10+
    '        skin_nrm.y = _356.y;'#10+
    '        skin_nrm.z = _356.z;'#10+
    '    }'#10+
    '}'#10+

    'void main()'#10+
    '{'#10+
    '    vec4 param = position;'#10+
    '    vec4 param_1 = normal;'#10+
    '    vec4 param_2 = jweights;'#10+
    '    vec4 param_3 = jindices * 255.0;'#10+
    '    vec2 param_4 = inst_joint_uv;'#10+
    '    vec4 param_5;'#10+
    '    vec4 param_6;'#10+
    '    skinned_pos_nrm(param, param_1, param_2, param_3, param_4, param_5, param_6);'#10+
    '    gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(dot(param_5, inst_xxxx), dot(param_5, inst_yyyy), dot(param_5, inst_zzzz), 1.0);'#10+
    '    color = (vec4(dot(param_6, inst_xxxx), dot(param_6, inst_yyyy), dot(param_6, inst_zzzz), 0.0).xyz + vec3(1.0)) * 0.5;'#10+
    '}';

const
  FS_SOURCE_GLSL100 =
    '#version 100'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'varying highp vec3 color;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_FragData[0] = vec4(color, 1.0);'#10+
    '}';

{$ENDIF !SOKOL_GLES2}

{$IFDEF SOKOL_GLES3}
const
  VS_SOURCE_GLSL300ES =
    '#version 300 es'#10+

    'uniform vec4 vs_params[5];'#10+
    'uniform highp sampler2D joint_tex;'#10+

    'layout(location = 0) in vec4 position;'#10+
    'layout(location = 1) in vec4 normal;'#10+
    'layout(location = 3) in vec4 jweights;'#10+
    'layout(location = 2) in vec4 jindices;'#10+
    'layout(location = 7) in vec2 inst_joint_uv;'#10+
    'layout(location = 4) in vec4 inst_xxxx;'#10+
    'layout(location = 5) in vec4 inst_yyyy;'#10+
    'layout(location = 6) in vec4 inst_zzzz;'#10+
    'out vec3 color;'#10+

    'void skinned_pos_nrm(vec4 pos, vec4 nrm, vec4 skin_weights, vec4 skin_indices, vec2 joint_uv, inout vec4 skin_pos, inout vec4 skin_nrm)'#10+
    '{'#10+
    '    skin_pos = vec4(0.0, 0.0, 0.0, 1.0);'#10+
    '    skin_nrm = vec4(0.0);'#10+
    '    vec4 _33 = skin_weights / vec4(dot(skin_weights, vec4(1.0)));'#10+
    '    vec2 _44 = vec2(vs_params[4].x, 0.0);'#10+
    '    float _49 = _33.x;'#10+
    '    if (_49 > 0.0)'#10+
    '    {'#10+
    '        vec2 _68 = vec2(joint_uv.x + ((3.0 * skin_indices.x) * vs_params[4].x), joint_uv.y);'#10+
    '        vec4 _76 = textureLod(joint_tex, _68, 0.0);'#10+
    '        vec4 _82 = textureLod(joint_tex, _68 + _44, 0.0);'#10+
    '        vec4 _90 = textureLod(joint_tex, _68 + (_44 * 2.0), 0.0);'#10+
    '        vec4 _105 = skin_pos;'#10+
    '        vec3 _107 = _105.xyz + (vec3(dot(pos, _76), dot(pos, _82), dot(pos, _90)) * _49);'#10+
    '        skin_pos.x = _107.x;'#10+
    '        skin_pos.y = _107.y;'#10+
    '        skin_pos.z = _107.z;'#10+
    '        vec4 _128 = skin_nrm;'#10+
    '        vec3 _130 = _128.xyz + (vec3(dot(nrm, _76), dot(nrm, _82), dot(nrm, _90)) * _49);'#10+
    '        skin_nrm.x = _130.x;'#10+
    '        skin_nrm.y = _130.y;'#10+
    '        skin_nrm.z = _130.z;'#10+
    '    }'#10+
    '    float _138 = _33.y;'#10+
    '    if (_138 > 0.0)'#10+
    '    {'#10+
    '        vec2 _153 = vec2(joint_uv.x + ((3.0 * skin_indices.y) * vs_params[4].x), joint_uv.y);'#10+
    '        vec4 _156 = textureLod(joint_tex, _153, 0.0);'#10+
    '        vec4 _161 = textureLod(joint_tex, _153 + _44, 0.0);'#10+
    '        vec4 _167 = textureLod(joint_tex, _153 + (_44 * 2.0), 0.0);'#10+
    '        vec4 _181 = skin_pos;'#10+
    '        vec3 _183 = _181.xyz + (vec3(dot(pos, _156), dot(pos, _161), dot(pos, _167)) * _138);'#10+
    '        skin_pos.x = _183.x;'#10+
    '        skin_pos.y = _183.y;'#10+
    '        skin_pos.z = _183.z;'#10+
    '        vec4 _203 = skin_nrm;'#10+
    '        vec3 _205 = _203.xyz + (vec3(dot(nrm, _156), dot(nrm, _161), dot(nrm, _167)) * _138);'#10+
    '        skin_nrm.x = _205.x;'#10+
    '        skin_nrm.y = _205.y;'#10+
    '        skin_nrm.z = _205.z;'#10+
    '    }'#10+
    '    float _213 = _33.z;'#10+
    '    if (_213 > 0.0)'#10+
    '    {'#10+
    '        vec2 _228 = vec2(joint_uv.x + ((3.0 * skin_indices.z) * vs_params[4].x), joint_uv.y);'#10+
    '        vec4 _231 = textureLod(joint_tex, _228, 0.0);'#10+
    '        vec4 _236 = textureLod(joint_tex, _228 + _44, 0.0);'#10+
    '        vec4 _242 = textureLod(joint_tex, _228 + (_44 * 2.0), 0.0);'#10+
    '        vec4 _256 = skin_pos;'#10+
    '        vec3 _258 = _256.xyz + (vec3(dot(pos, _231), dot(pos, _236), dot(pos, _242)) * _213);'#10+
    '        skin_pos.x = _258.x;'#10+
    '        skin_pos.y = _258.y;'#10+
    '        skin_pos.z = _258.z;'#10+
    '        vec4 _278 = skin_nrm;'#10+
    '        vec3 _280 = _278.xyz + (vec3(dot(nrm, _231), dot(nrm, _236), dot(nrm, _242)) * _213);'#10+
    '        skin_nrm.x = _280.x;'#10+
    '        skin_nrm.y = _280.y;'#10+
    '        skin_nrm.z = _280.z;'#10+
    '    }'#10+
    '    float _289 = _33.w;'#10+
    '    if (_289 > 0.0)'#10+
    '    {'#10+
    '        vec2 _304 = vec2(joint_uv.x + ((3.0 * skin_indices.w) * vs_params[4].x), joint_uv.y);'#10+
    '        vec4 _307 = textureLod(joint_tex, _304, 0.0);'#10+
    '        vec4 _312 = textureLod(joint_tex, _304 + _44, 0.0);'#10+
    '        vec4 _318 = textureLod(joint_tex, _304 + (_44 * 2.0), 0.0);'#10+
    '        vec4 _332 = skin_pos;'#10+
    '        vec3 _334 = _332.xyz + (vec3(dot(pos, _307), dot(pos, _312), dot(pos, _318)) * _289);'#10+
    '        skin_pos.x = _334.x;'#10+
    '        skin_pos.y = _334.y;'#10+
    '        skin_pos.z = _334.z;'#10+
    '        vec4 _354 = skin_nrm;'#10+
    '        vec3 _356 = _354.xyz + (vec3(dot(nrm, _307), dot(nrm, _312), dot(nrm, _318)) * _289);'#10+
    '        skin_nrm.x = _356.x;'#10+
    '        skin_nrm.y = _356.y;'#10+
    '        skin_nrm.z = _356.z;'#10+
    '    }'#10+
    '}'#10+

    'void main()'#10+
    '{'#10+
    '    vec4 param = position;'#10+
    '    vec4 param_1 = normal;'#10+
    '    vec4 param_2 = jweights;'#10+
    '    vec4 param_3 = jindices * 255.0;'#10+
    '    vec2 param_4 = inst_joint_uv;'#10+
    '    vec4 param_5;'#10+
    '    vec4 param_6;'#10+
    '    skinned_pos_nrm(param, param_1, param_2, param_3, param_4, param_5, param_6);'#10+
    '    gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(dot(param_5, inst_xxxx), dot(param_5, inst_yyyy), dot(param_5, inst_zzzz), 1.0);'#10+
    '    color = (vec4(dot(param_6, inst_xxxx), dot(param_6, inst_yyyy), dot(param_6, inst_zzzz), 0.0).xyz + vec3(1.0)) * 0.5;'#10+
    '}';

const
  FS_SOURCE_GLSL300ES =
    '#version 300 es'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'layout(location = 0) out highp vec4 frag_color;'#10+
    'in highp vec3 color;'#10+

    'void main()'#10+
    '{'#10+
    '    frag_color = vec4(color, 1.0);'#10+
    '}';

{$ENDIF !SOKOL_GLES3}

{$IFDEF SOKOL_D3D11}
const
  VS_SOURCE_HLSL5 =
    'cbuffer vs_params : register(b0)'#10+
    '{'#10+
    '    row_major float4x4 _38_view_proj : packoffset(c0);'#10+
    '    float _38_joint_pixel_width : packoffset(c4);'#10+
    '};'#10+

    'Texture2D<float4> joint_tex : register(t0);'#10+
    'SamplerState _joint_tex_sampler : register(s0);'#10+

    'static float4 gl_Position;'#10+
    'static float4 position;'#10+
    'static float4 normal;'#10+
    'static float4 jweights;'#10+
    'static float4 jindices;'#10+
    'static float2 inst_joint_uv;'#10+
    'static float4 inst_xxxx;'#10+
    'static float4 inst_yyyy;'#10+
    'static float4 inst_zzzz;'#10+
    'static float3 color;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float4 position : TEXCOORD0;'#10+
    '    float4 normal : TEXCOORD1;'#10+
    '    float4 jindices : TEXCOORD2;'#10+
    '    float4 jweights : TEXCOORD3;'#10+
    '    float4 inst_xxxx : TEXCOORD4;'#10+
    '    float4 inst_yyyy : TEXCOORD5;'#10+
    '    float4 inst_zzzz : TEXCOORD6;'#10+
    '    float2 inst_joint_uv : TEXCOORD7;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float3 color : TEXCOORD0;'#10+
    '    float4 gl_Position : SV_Position;'#10+
    '};'#10+

    'void skinned_pos_nrm(float4 pos, float4 nrm, float4 skin_weights, float4 skin_indices, float2 joint_uv, inout float4 skin_pos, inout float4 skin_nrm)'#10+
    '{'#10+
    '    skin_pos = float4(0.0f, 0.0f, 0.0f, 1.0f);'#10+
    '    skin_nrm = 0.0f.xxxx;'#10+
    '    float4 _33 = skin_weights / dot(skin_weights, 1.0f.xxxx).xxxx;'#10+
    '    float2 _44 = float2(_38_joint_pixel_width, 0.0f);'#10+
    '    float _49 = _33.x;'#10+
    '    if (_49 > 0.0f)'#10+
    '    {'#10+
    '        float2 _68 = float2(joint_uv.x + ((3.0f * skin_indices.x) * _38_joint_pixel_width), joint_uv.y);'#10+
    '        float4 _76 = joint_tex.SampleLevel(_joint_tex_sampler, _68, 0.0f);'#10+
    '        float4 _82 = joint_tex.SampleLevel(_joint_tex_sampler, _68 + _44, 0.0f);'#10+
    '        float4 _90 = joint_tex.SampleLevel(_joint_tex_sampler, _68 + (_44 * 2.0f), 0.0f);'#10+
    '        float4 _105 = skin_pos;'#10+
    '        float3 _107 = _105.xyz + (float3(dot(pos, _76), dot(pos, _82), dot(pos, _90)) * _49);'#10+
    '        skin_pos.x = _107.x;'#10+
    '        skin_pos.y = _107.y;'#10+
    '        skin_pos.z = _107.z;'#10+
    '        float4 _128 = skin_nrm;'#10+
    '        float3 _130 = _128.xyz + (float3(dot(nrm, _76), dot(nrm, _82), dot(nrm, _90)) * _49);'#10+
    '        skin_nrm.x = _130.x;'#10+
    '        skin_nrm.y = _130.y;'#10+
    '        skin_nrm.z = _130.z;'#10+
    '    }'#10+
    '    float _138 = _33.y;'#10+
    '    if (_138 > 0.0f)'#10+
    '    {'#10+
    '        float2 _153 = float2(joint_uv.x + ((3.0f * skin_indices.y) * _38_joint_pixel_width), joint_uv.y);'#10+
    '        float4 _156 = joint_tex.SampleLevel(_joint_tex_sampler, _153, 0.0f);'#10+
    '        float4 _161 = joint_tex.SampleLevel(_joint_tex_sampler, _153 + _44, 0.0f);'#10+
    '        float4 _167 = joint_tex.SampleLevel(_joint_tex_sampler, _153 + (_44 * 2.0f), 0.0f);'#10+
    '        float4 _181 = skin_pos;'#10+
    '        float3 _183 = _181.xyz + (float3(dot(pos, _156), dot(pos, _161), dot(pos, _167)) * _138);'#10+
    '        skin_pos.x = _183.x;'#10+
    '        skin_pos.y = _183.y;'#10+
    '        skin_pos.z = _183.z;'#10+
    '        float4 _203 = skin_nrm;'#10+
    '        float3 _205 = _203.xyz + (float3(dot(nrm, _156), dot(nrm, _161), dot(nrm, _167)) * _138);'#10+
    '        skin_nrm.x = _205.x;'#10+
    '        skin_nrm.y = _205.y;'#10+
    '        skin_nrm.z = _205.z;'#10+
    '    }'#10+
    '    float _213 = _33.z;'#10+
    '    if (_213 > 0.0f)'#10+
    '    {'#10+
    '        float2 _228 = float2(joint_uv.x + ((3.0f * skin_indices.z) * _38_joint_pixel_width), joint_uv.y);'#10+
    '        float4 _231 = joint_tex.SampleLevel(_joint_tex_sampler, _228, 0.0f);'#10+
    '        float4 _236 = joint_tex.SampleLevel(_joint_tex_sampler, _228 + _44, 0.0f);'#10+
    '        float4 _242 = joint_tex.SampleLevel(_joint_tex_sampler, _228 + (_44 * 2.0f), 0.0f);'#10+
    '        float4 _256 = skin_pos;'#10+
    '        float3 _258 = _256.xyz + (float3(dot(pos, _231), dot(pos, _236), dot(pos, _242)) * _213);'#10+
    '        skin_pos.x = _258.x;'#10+
    '        skin_pos.y = _258.y;'#10+
    '        skin_pos.z = _258.z;'#10+
    '        float4 _278 = skin_nrm;'#10+
    '        float3 _280 = _278.xyz + (float3(dot(nrm, _231), dot(nrm, _236), dot(nrm, _242)) * _213);'#10+
    '        skin_nrm.x = _280.x;'#10+
    '        skin_nrm.y = _280.y;'#10+
    '        skin_nrm.z = _280.z;'#10+
    '    }'#10+
    '    float _289 = _33.w;'#10+
    '    if (_289 > 0.0f)'#10+
    '    {'#10+
    '        float2 _304 = float2(joint_uv.x + ((3.0f * skin_indices.w) * _38_joint_pixel_width), joint_uv.y);'#10+
    '        float4 _307 = joint_tex.SampleLevel(_joint_tex_sampler, _304, 0.0f);'#10+
    '        float4 _312 = joint_tex.SampleLevel(_joint_tex_sampler, _304 + _44, 0.0f);'#10+
    '        float4 _318 = joint_tex.SampleLevel(_joint_tex_sampler, _304 + (_44 * 2.0f), 0.0f);'#10+
    '        float4 _332 = skin_pos;'#10+
    '        float3 _334 = _332.xyz + (float3(dot(pos, _307), dot(pos, _312), dot(pos, _318)) * _289);'#10+
    '        skin_pos.x = _334.x;'#10+
    '        skin_pos.y = _334.y;'#10+
    '        skin_pos.z = _334.z;'#10+
    '        float4 _354 = skin_nrm;'#10+
    '        float3 _356 = _354.xyz + (float3(dot(nrm, _307), dot(nrm, _312), dot(nrm, _318)) * _289);'#10+
    '        skin_nrm.x = _356.x;'#10+
    '        skin_nrm.y = _356.y;'#10+
    '        skin_nrm.z = _356.z;'#10+
    '    }'#10+
    '}'#10+

    'void vert_main()'#10+
    '{'#10+
    '    float4 param = position;'#10+
    '    float4 param_1 = normal;'#10+
    '    float4 param_2 = jweights;'#10+
    '    float4 param_3 = jindices * 255.0f;'#10+
    '    float2 param_4 = inst_joint_uv;'#10+
    '    float4 param_5;'#10+
    '    float4 param_6;'#10+
    '    skinned_pos_nrm(param, param_1, param_2, param_3, param_4, param_5, param_6);'#10+
    '    gl_Position = mul(float4(dot(param_5, inst_xxxx), dot(param_5, inst_yyyy), dot(param_5, inst_zzzz), 1.0f), _38_view_proj);'#10+
    '    color = (float4(dot(param_6, inst_xxxx), dot(param_6, inst_yyyy), dot(param_6, inst_zzzz), 0.0f).xyz + 1.0f.xxx) * 0.5f;'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    position = stage_input.position;'#10+
    '    normal = stage_input.normal;'#10+
    '    jweights = stage_input.jweights;'#10+
    '    jindices = stage_input.jindices;'#10+
    '    inst_joint_uv = stage_input.inst_joint_uv;'#10+
    '    inst_xxxx = stage_input.inst_xxxx;'#10+
    '    inst_yyyy = stage_input.inst_yyyy;'#10+
    '    inst_zzzz = stage_input.inst_zzzz;'#10+
    '    vert_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.gl_Position = gl_Position;'#10+
    '    stage_output.color = color;'#10+
    '    return stage_output;'#10+
    '}';

const
  FS_SOURCE_HLSL5 =
    'static float4 frag_color;'#10+
    'static float3 color;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float3 color : TEXCOORD0;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float4 frag_color : SV_Target0;'#10+
    '};'#10+

    'void frag_main()'#10+
    '{'#10+
    '    frag_color = float4(color, 1.0f);'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    color = stage_input.color;'#10+
    '    frag_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.frag_color = frag_color;'#10+
    '    return stage_output;'#10+
    '}';

{$ENDIF !SOKOL_D3D11}

{$IFDEF SOKOL_METAL}
const
  VS_SOURCE_METAL_MACOS =
    '#pragma clang diagnostic ignored "-Wmissing-prototypes"'#10+

    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct vs_params'#10+
    '{'#10+
    '    float4x4 view_proj;'#10+
    '    float joint_pixel_width;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float3 color [[user(locn0)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 position [[attribute(0)]];'#10+
    '    float4 normal [[attribute(1)]];'#10+
    '    float4 jindices [[attribute(2)]];'#10+
    '    float4 jweights [[attribute(3)]];'#10+
    '    float4 inst_xxxx [[attribute(4)]];'#10+
    '    float4 inst_yyyy [[attribute(5)]];'#10+
    '    float4 inst_zzzz [[attribute(6)]];'#10+
    '    float2 inst_joint_uv [[attribute(7)]];'#10+
    '};'#10+

    'static inline __attribute__((always_inline))'#10+
    'void skinned_pos_nrm(thread const float4& pos, thread const float4& nrm, thread const float4& skin_weights, thread const float4& skin_indices, thread const float2& joint_uv, thread float4& skin_pos, '+
      'thread float4& skin_nrm, constant vs_params& v_38, thread texture2d<float> joint_tex, thread const sampler joint_texSmplr)'#10+
    '{'#10+
    '    skin_pos = float4(0.0, 0.0, 0.0, 1.0);'#10+
    '    skin_nrm = float4(0.0);'#10+
    '    float4 _33 = skin_weights / float4(dot(skin_weights, float4(1.0)));'#10+
    '    float2 _44 = float2(v_38.joint_pixel_width, 0.0);'#10+
    '    float _49 = _33.x;'#10+
    '    if (_49 > 0.0)'#10+
    '    {'#10+
    '        float2 _68 = float2(joint_uv.x + ((3.0 * skin_indices.x) * v_38.joint_pixel_width), joint_uv.y);'#10+
    '        float4 _76 = joint_tex.sample(joint_texSmplr, _68, level(0.0));'#10+
    '        float4 _82 = joint_tex.sample(joint_texSmplr, (_68 + _44), level(0.0));'#10+
    '        float4 _90 = joint_tex.sample(joint_texSmplr, (_68 + (_44 * 2.0)), level(0.0));'#10+
    '        float4 _105 = skin_pos;'#10+
    '        float3 _107 = _105.xyz + (float3(dot(pos, _76), dot(pos, _82), dot(pos, _90)) * _49);'#10+
    '        skin_pos.x = _107.x;'#10+
    '        skin_pos.y = _107.y;'#10+
    '        skin_pos.z = _107.z;'#10+
    '        float4 _128 = skin_nrm;'#10+
    '        float3 _130 = _128.xyz + (float3(dot(nrm, _76), dot(nrm, _82), dot(nrm, _90)) * _49);'#10+
    '        skin_nrm.x = _130.x;'#10+
    '        skin_nrm.y = _130.y;'#10+
    '        skin_nrm.z = _130.z;'#10+
    '    }'#10+
    '    float _138 = _33.y;'#10+
    '    if (_138 > 0.0)'#10+
    '    {'#10+
    '        float2 _153 = float2(joint_uv.x + ((3.0 * skin_indices.y) * v_38.joint_pixel_width), joint_uv.y);'#10+
    '        float4 _156 = joint_tex.sample(joint_texSmplr, _153, level(0.0));'#10+
    '        float4 _161 = joint_tex.sample(joint_texSmplr, (_153 + _44), level(0.0));'#10+
    '        float4 _167 = joint_tex.sample(joint_texSmplr, (_153 + (_44 * 2.0)), level(0.0));'#10+
    '        float4 _181 = skin_pos;'#10+
    '        float3 _183 = _181.xyz + (float3(dot(pos, _156), dot(pos, _161), dot(pos, _167)) * _138);'#10+
    '        skin_pos.x = _183.x;'#10+
    '        skin_pos.y = _183.y;'#10+
    '        skin_pos.z = _183.z;'#10+
    '        float4 _203 = skin_nrm;'#10+
    '        float3 _205 = _203.xyz + (float3(dot(nrm, _156), dot(nrm, _161), dot(nrm, _167)) * _138);'#10+
    '        skin_nrm.x = _205.x;'#10+
    '        skin_nrm.y = _205.y;'#10+
    '        skin_nrm.z = _205.z;'#10+
    '    }'#10+
    '    float _213 = _33.z;'#10+
    '    if (_213 > 0.0)'#10+
    '    {'#10+
    '        float2 _228 = float2(joint_uv.x + ((3.0 * skin_indices.z) * v_38.joint_pixel_width), joint_uv.y);'#10+
    '        float4 _231 = joint_tex.sample(joint_texSmplr, _228, level(0.0));'#10+
    '        float4 _236 = joint_tex.sample(joint_texSmplr, (_228 + _44), level(0.0));'#10+
    '        float4 _242 = joint_tex.sample(joint_texSmplr, (_228 + (_44 * 2.0)), level(0.0));'#10+
    '        float4 _256 = skin_pos;'#10+
    '        float3 _258 = _256.xyz + (float3(dot(pos, _231), dot(pos, _236), dot(pos, _242)) * _213);'#10+
    '        skin_pos.x = _258.x;'#10+
    '        skin_pos.y = _258.y;'#10+
    '        skin_pos.z = _258.z;'#10+
    '        float4 _278 = skin_nrm;'#10+
    '        float3 _280 = _278.xyz + (float3(dot(nrm, _231), dot(nrm, _236), dot(nrm, _242)) * _213);'#10+
    '        skin_nrm.x = _280.x;'#10+
    '        skin_nrm.y = _280.y;'#10+
    '        skin_nrm.z = _280.z;'#10+
    '    }'#10+
    '    float _289 = _33.w;'#10+
    '    if (_289 > 0.0)'#10+
    '    {'#10+
    '        float2 _304 = float2(joint_uv.x + ((3.0 * skin_indices.w) * v_38.joint_pixel_width), joint_uv.y);'#10+
    '        float4 _307 = joint_tex.sample(joint_texSmplr, _304, level(0.0));'#10+
    '        float4 _312 = joint_tex.sample(joint_texSmplr, (_304 + _44), level(0.0));'#10+
    '        float4 _318 = joint_tex.sample(joint_texSmplr, (_304 + (_44 * 2.0)), level(0.0));'#10+
    '        float4 _332 = skin_pos;'#10+
    '        float3 _334 = _332.xyz + (float3(dot(pos, _307), dot(pos, _312), dot(pos, _318)) * _289);'#10+
    '        skin_pos.x = _334.x;'#10+
    '        skin_pos.y = _334.y;'#10+
    '        skin_pos.z = _334.z;'#10+
    '        float4 _354 = skin_nrm;'#10+
    '        float3 _356 = _354.xyz + (float3(dot(nrm, _307), dot(nrm, _312), dot(nrm, _318)) * _289);'#10+
    '        skin_nrm.x = _356.x;'#10+
    '        skin_nrm.y = _356.y;'#10+
    '        skin_nrm.z = _356.z;'#10+
    '    }'#10+
    '}'#10+

    'vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& v_38 [[buffer(0)]], texture2d<float> joint_tex [[texture(0)]], sampler joint_texSmplr [[sampler(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    float4 param = in.position;'#10+
    '    float4 param_1 = in.normal;'#10+
    '    float4 param_2 = in.jweights;'#10+
    '    float4 param_3 = in.jindices * 255.0;'#10+
    '    float2 param_4 = in.inst_joint_uv;'#10+
    '    float4 param_5;'#10+
    '    float4 param_6;'#10+
    '    skinned_pos_nrm(param, param_1, param_2, param_3, param_4, param_5, param_6, v_38, joint_tex, joint_texSmplr);'#10+
    '    out.gl_Position = v_38.view_proj * float4(dot(param_5, in.inst_xxxx), dot(param_5, in.inst_yyyy), dot(param_5, in.inst_zzzz), 1.0);'#10+
    '    out.color = (float4(dot(param_6, in.inst_xxxx), dot(param_6, in.inst_yyyy), dot(param_6, in.inst_zzzz), 0.0).xyz + float3(1.0)) * 0.5;'#10+
    '    return out;'#10+
    '}';

const
  FS_SOURCE_METAL_MACOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_color [[color(0)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float3 color [[user(locn0)]];'#10+
    '};'#10+

    'fragment main0_out main0(main0_in in [[stage_in]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.frag_color = float4(in.color, 1.0);'#10+
    '    return out;'#10+
    '}';

{$ENDIF !SOKOL_METAL}

{$IFDEF SOKOL_METAL}
const
  VS_SOURCE_METAL_IOS =
    '#pragma clang diagnostic ignored "-Wmissing-prototypes"'#10+

    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct vs_params'#10+
    '{'#10+
    '    float4x4 view_proj;'#10+
    '    float joint_pixel_width;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float3 color [[user(locn0)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 position [[attribute(0)]];'#10+
    '    float4 normal [[attribute(1)]];'#10+
    '    float4 jindices [[attribute(2)]];'#10+
    '    float4 jweights [[attribute(3)]];'#10+
    '    float4 inst_xxxx [[attribute(4)]];'#10+
    '    float4 inst_yyyy [[attribute(5)]];'#10+
    '    float4 inst_zzzz [[attribute(6)]];'#10+
    '    float2 inst_joint_uv [[attribute(7)]];'#10+
    '};'#10+

    'static inline __attribute__((always_inline))'#10+
    'void skinned_pos_nrm(thread const float4& pos, thread const float4& nrm, thread const float4& skin_weights, thread const float4& skin_indices, thread const float2& joint_uv, thread float4& skin_pos, '+
      'thread float4& skin_nrm, constant vs_params& v_38, thread texture2d<float> joint_tex, thread const sampler joint_texSmplr)'#10+
    '{'#10+
    '    skin_pos = float4(0.0, 0.0, 0.0, 1.0);'#10+
    '    skin_nrm = float4(0.0);'#10+
    '    float4 _33 = skin_weights / float4(dot(skin_weights, float4(1.0)));'#10+
    '    float2 _44 = float2(v_38.joint_pixel_width, 0.0);'#10+
    '    float _49 = _33.x;'#10+
    '    if (_49 > 0.0)'#10+
    '    {'#10+
    '        float2 _68 = float2(joint_uv.x + ((3.0 * skin_indices.x) * v_38.joint_pixel_width), joint_uv.y);'#10+
    '        float4 _76 = joint_tex.sample(joint_texSmplr, _68, level(0.0));'#10+
    '        float4 _82 = joint_tex.sample(joint_texSmplr, (_68 + _44), level(0.0));'#10+
    '        float4 _90 = joint_tex.sample(joint_texSmplr, (_68 + (_44 * 2.0)), level(0.0));'#10+
    '        float4 _105 = skin_pos;'#10+
    '        float3 _107 = _105.xyz + (float3(dot(pos, _76), dot(pos, _82), dot(pos, _90)) * _49);'#10+
    '        skin_pos.x = _107.x;'#10+
    '        skin_pos.y = _107.y;'#10+
    '        skin_pos.z = _107.z;'#10+
    '        float4 _128 = skin_nrm;'#10+
    '        float3 _130 = _128.xyz + (float3(dot(nrm, _76), dot(nrm, _82), dot(nrm, _90)) * _49);'#10+
    '        skin_nrm.x = _130.x;'#10+
    '        skin_nrm.y = _130.y;'#10+
    '        skin_nrm.z = _130.z;'#10+
    '    }'#10+
    '    float _138 = _33.y;'#10+
    '    if (_138 > 0.0)'#10+
    '    {'#10+
    '        float2 _153 = float2(joint_uv.x + ((3.0 * skin_indices.y) * v_38.joint_pixel_width), joint_uv.y);'#10+
    '        float4 _156 = joint_tex.sample(joint_texSmplr, _153, level(0.0));'#10+
    '        float4 _161 = joint_tex.sample(joint_texSmplr, (_153 + _44), level(0.0));'#10+
    '        float4 _167 = joint_tex.sample(joint_texSmplr, (_153 + (_44 * 2.0)), level(0.0));'#10+
    '        float4 _181 = skin_pos;'#10+
    '        float3 _183 = _181.xyz + (float3(dot(pos, _156), dot(pos, _161), dot(pos, _167)) * _138);'#10+
    '        skin_pos.x = _183.x;'#10+
    '        skin_pos.y = _183.y;'#10+
    '        skin_pos.z = _183.z;'#10+
    '        float4 _203 = skin_nrm;'#10+
    '        float3 _205 = _203.xyz + (float3(dot(nrm, _156), dot(nrm, _161), dot(nrm, _167)) * _138);'#10+
    '        skin_nrm.x = _205.x;'#10+
    '        skin_nrm.y = _205.y;'#10+
    '        skin_nrm.z = _205.z;'#10+
    '    }'#10+
    '    float _213 = _33.z;'#10+
    '    if (_213 > 0.0)'#10+
    '    {'#10+
    '        float2 _228 = float2(joint_uv.x + ((3.0 * skin_indices.z) * v_38.joint_pixel_width), joint_uv.y);'#10+
    '        float4 _231 = joint_tex.sample(joint_texSmplr, _228, level(0.0));'#10+
    '        float4 _236 = joint_tex.sample(joint_texSmplr, (_228 + _44), level(0.0));'#10+
    '        float4 _242 = joint_tex.sample(joint_texSmplr, (_228 + (_44 * 2.0)), level(0.0));'#10+
    '        float4 _256 = skin_pos;'#10+
    '        float3 _258 = _256.xyz + (float3(dot(pos, _231), dot(pos, _236), dot(pos, _242)) * _213);'#10+
    '        skin_pos.x = _258.x;'#10+
    '        skin_pos.y = _258.y;'#10+
    '        skin_pos.z = _258.z;'#10+
    '        float4 _278 = skin_nrm;'#10+
    '        float3 _280 = _278.xyz + (float3(dot(nrm, _231), dot(nrm, _236), dot(nrm, _242)) * _213);'#10+
    '        skin_nrm.x = _280.x;'#10+
    '        skin_nrm.y = _280.y;'#10+
    '        skin_nrm.z = _280.z;'#10+
    '    }'#10+
    '    float _289 = _33.w;'#10+
    '    if (_289 > 0.0)'#10+
    '    {'#10+
    '        float2 _304 = float2(joint_uv.x + ((3.0 * skin_indices.w) * v_38.joint_pixel_width), joint_uv.y);'#10+
    '        float4 _307 = joint_tex.sample(joint_texSmplr, _304, level(0.0));'#10+
    '        float4 _312 = joint_tex.sample(joint_texSmplr, (_304 + _44), level(0.0));'#10+
    '        float4 _318 = joint_tex.sample(joint_texSmplr, (_304 + (_44 * 2.0)), level(0.0));'#10+
    '        float4 _332 = skin_pos;'#10+
    '        float3 _334 = _332.xyz + (float3(dot(pos, _307), dot(pos, _312), dot(pos, _318)) * _289);'#10+
    '        skin_pos.x = _334.x;'#10+
    '        skin_pos.y = _334.y;'#10+
    '        skin_pos.z = _334.z;'#10+
    '        float4 _354 = skin_nrm;'#10+
    '        float3 _356 = _354.xyz + (float3(dot(nrm, _307), dot(nrm, _312), dot(nrm, _318)) * _289);'#10+
    '        skin_nrm.x = _356.x;'#10+
    '        skin_nrm.y = _356.y;'#10+
    '        skin_nrm.z = _356.z;'#10+
    '    }'#10+
    '}'#10+

    'vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& v_38 [[buffer(0)]], texture2d<float> joint_tex [[texture(0)]], sampler joint_texSmplr [[sampler(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    float4 param = in.position;'#10+
    '    float4 param_1 = in.normal;'#10+
    '    float4 param_2 = in.jweights;'#10+
    '    float4 param_3 = in.jindices * 255.0;'#10+
    '    float2 param_4 = in.inst_joint_uv;'#10+
    '    float4 param_5;'#10+
    '    float4 param_6;'#10+
    '    skinned_pos_nrm(param, param_1, param_2, param_3, param_4, param_5, param_6, v_38, joint_tex, joint_texSmplr);'#10+
    '    out.gl_Position = v_38.view_proj * float4(dot(param_5, in.inst_xxxx), dot(param_5, in.inst_yyyy), dot(param_5, in.inst_zzzz), 1.0);'#10+
    '    out.color = (float4(dot(param_6, in.inst_xxxx), dot(param_6, in.inst_yyyy), dot(param_6, in.inst_zzzz), 0.0).xyz + float3(1.0)) * 0.5;'#10+
    '    return out;'#10+
    '}';

const
  FS_SOURCE_METAL_IOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_color [[color(0)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float3 color [[user(locn0)]];'#10+
    '};'#10+

    'fragment main0_out main0(main0_in in [[stage_in]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.frag_color = float4(in.color, 1.0);'#10+
    '    return out;'#10+
    '}';

{$ENDIF !SOKOL_METAL}

var
  GSkinnedShaderDesc: TNativeShaderDesc;

procedure InitSkinnedShaderDesc;
begin
  GSkinnedShaderDesc.Init;
  GSkinnedShaderDesc.Attrs[0].Init('position', 'TEXCOORD', 0);
  GSkinnedShaderDesc.Attrs[1].Init('normal', 'TEXCOORD', 1);
  GSkinnedShaderDesc.Attrs[2].Init('jindices', 'TEXCOORD', 2);
  GSkinnedShaderDesc.Attrs[3].Init('jweights', 'TEXCOORD', 3);
  GSkinnedShaderDesc.Attrs[4].Init('inst_xxxx', 'TEXCOORD', 4);
  GSkinnedShaderDesc.Attrs[5].Init('inst_yyyy', 'TEXCOORD', 5);
  GSkinnedShaderDesc.Attrs[6].Init('inst_zzzz', 'TEXCOORD', 6);
  GSkinnedShaderDesc.Attrs[7].Init('inst_joint_uv', 'TEXCOORD', 7);

  case TGfx.Backend of
    {$IFDEF SOKOL_GLCORE33}
    TBackend.GLCore33:
      begin
        GSkinnedShaderDesc.VS.Source := VS_SOURCE_GLSL330;
        GSkinnedShaderDesc.FS.Source := FS_SOURCE_GLSL330;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES2}
    TBackend.Gles2:
      begin
        GSkinnedShaderDesc.VS.Source := VS_SOURCE_GLSL100;
        GSkinnedShaderDesc.FS.Source := FS_SOURCE_GLSL100;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES3}
    TBackend.Gles3:
      begin
        GSkinnedShaderDesc.VS.Source := VS_SOURCE_GLSL300ES;
        GSkinnedShaderDesc.FS.Source := FS_SOURCE_GLSL300ES;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_D3D11}
    TBackend.D3D11:
      begin
        GSkinnedShaderDesc.VS.Source := VS_SOURCE_HLSL5;
        GSkinnedShaderDesc.FS.Source := FS_SOURCE_HLSL5;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalMacOS:
      begin
        GSkinnedShaderDesc.VS.Source := VS_SOURCE_METAL_MACOS;
        GSkinnedShaderDesc.FS.Source := FS_SOURCE_METAL_MACOS;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalIOS:
      begin
        GSkinnedShaderDesc.VS.Source := VS_SOURCE_METAL_IOS;
        GSkinnedShaderDesc.FS.Source := FS_SOURCE_METAL_IOS;
      end;
    {$ENDIF}
  else
    Assert(False)
  end;

  GSkinnedShaderDesc.vs.uniform_blocks[0].size := 80;
  GSkinnedShaderDesc.vs.uniform_blocks[0].layout := _SG_UNIFORMLAYOUT_STD140;
  if (TGfx.Backend.IsGL) then
    GSkinnedShaderDesc.vs.uniform_blocks[0].uniforms[0].Init('vs_params', _SG_UNIFORMTYPE_FLOAT4, 5);
  GSkinnedShaderDesc.vs.images[0].Init('joint_tex', _SG_IMAGETYPE_2D, _SG_SAMPLERTYPE_FLOAT);
  GSkinnedShaderDesc.&label := 'SkinnedShader';
end;

function SkinnedShaderDesc: PNativeShaderDesc;
begin
  if (GSkinnedShaderDesc.VS.Entry = nil) then
    InitSkinnedShaderDesc;

  Result := @GSkinnedShaderDesc;
end;

end.
