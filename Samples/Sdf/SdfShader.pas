unit SdfShader;
{ #version:1# (machine generated, don't edit!)

  Generated by sokol-shdc (https://github.com/floooh/sokol-tools)
  With Delphi modifications (https://github.com/neslib/Neslib.Sokol.Tools)

  Cmdline: sokol-shdc --input SdfShader.glsl --output SdfShader.pas

  Overview:

    Shader program 'sdf':
      Get shader desc: SdfShaderDesc()
      Vertex shader: vs
        Attribute slots:
          ATTR_VS_POSITION = 0
        Uniform block 'vs_params':
          Delphi record: TVSParams
          Bind slot: SLOT_VS_PARAMS = 0
      Fragment shader: fs


  Shader descriptor records:

    var SdfShader := TShader.Create(SdfShaderDesc);

  Vertex attribute locations for vertex shader 'vs':

    var PipDesc: TPipelineDesc;
    PipDesc.Init;
    PipDesc.Attrs[ATTR_VS_POSITION]. ...
    PipDesc. ...
    var Pip := TPipeline.Create(PipDesc);

  Image bind slots, use as index in TBindings.VSImages[] or .FSImages[]:


  Bind slot and Delphi record for uniform block 'VSParams':

    VSParams: TVSParams;
    VSParams.Aspect := ...;
    VSParams.Time := ...;
    TGfx.ApplyUniforms(TShaderStage.[VertexShader|FragmentShader], SLOT_VS_PARAMS, TRange.Create(VSParams));

}

{$INCLUDE 'Neslib.Sokol.inc'}

interface

uses
  Neslib.FastMath,
  Neslib.Sokol.Gfx;

const
  ATTR_VS_POSITION = 0;

const
  SLOT_VS_PARAMS = 0;

type
  TVSParams = packed record
  public
    Aspect: Single;
    Time: Single;
    _Pad8: array [0..7] of UInt8;
  end;

function SdfShaderDesc: PNativeShaderDesc;

implementation

uses
  Neslib.Sokol.Api;

{$IFDEF SOKOL_GLCORE33}
const
  VS_SOURCE_GLSL330 =
    '#version 330'#10+

    'uniform vec4 vs_params[1];'#10+
    'out float sin_t;'#10+
    'layout(location = 0) in vec4 position;'#10+
    'out vec2 pos;'#10+
    'out vec3 eye;'#10+
    'out vec3 fwd;'#10+
    'out vec3 right;'#10+
    'out vec3 up;'#10+

    'vec3 eye_pos(float time, vec3 center)'#10+
    '{'#10+
    '    return center + vec3(sin(time * 0.0500000007450580596923828125) * 3.0, sin(time * 0.100000001490116119384765625) * 2.0, cos(time * 0.0500000007450580596923828125) * 3.0);'#10+
    '}'#10+

    'void lookat(vec3 eye_1, vec3 center, vec3 up_1, inout vec3 out_fwd, inout vec3 out_right, out vec3 out_up)'#10+
    '{'#10+
    '    out_fwd = normalize(center - eye_1);'#10+
    '    out_right = normalize(cross(out_fwd, up_1));'#10+
    '    out_up = cross(out_right, out_fwd);'#10+
    '}'#10+

    'void main()'#10+
    '{'#10+
    '    sin_t = sin(vs_params[0].y * 0.5);'#10+
    '    gl_Position = position;'#10+
    '    pos.x = position.x * vs_params[0].x;'#10+
    '    pos.y = position.y;'#10+
    '    float param = vs_params[0].y * 5.0;'#10+
    '    vec3 param_1 = vec3(0.0);'#10+
    '    eye = eye_pos(param, param_1);'#10+
    '    vec3 param_2 = eye;'#10+
    '    vec3 param_3 = vec3(0.0);'#10+
    '    vec3 param_4 = vec3(0.0, 1.0, 0.0);'#10+
    '    vec3 param_5;'#10+
    '    vec3 param_6;'#10+
    '    vec3 param_7;'#10+
    '    lookat(param_2, param_3, param_4, param_5, param_6, param_7);'#10+
    '    fwd = param_5;'#10+
    '    right = param_6;'#10+
    '    up = param_7;'#10+
    '}';

const
  FS_SOURCE_GLSL330 =
    '#version 330'#10+

    'in vec3 eye;'#10+
    'in vec3 fwd;'#10+
    'in vec3 right;'#10+
    'in vec2 pos;'#10+
    'in vec3 up;'#10+
    'layout(location = 0) out vec4 frag_color;'#10+
    'in float sin_t;'#10+

    'float sd_sphere(vec3 p, float s)'#10+
    '{'#10+
    '    return length(p) - s;'#10+
    '}'#10+

    'float sd_mandelbulb(vec3 p, inout vec4 res_color)'#10+
    '{'#10+
    '    vec3 w = p;'#10+
    '    float _51 = dot(p, p);'#10+
    '    float m = _51;'#10+
    '    vec4 trap = vec4(abs(p), _51);'#10+
    '    float dz = 1.0;'#10+
    '    for (int i = 0; i < 4; i++)'#10+
    '    {'#10+
    '        float _78 = m * m;'#10+
    '        dz = ((8.0 * sqrt(((_78 * _78) * _78) * m)) * dz) + 1.0;'#10+
    '        float _102 = w.x * w.x;'#10+
    '        float _106 = _102 * _102;'#10+
    '        float _114 = w.y * w.y;'#10+
    '        float _126 = w.z * w.z;'#10+
    '        float _130 = _126 * _126;'#10+
    '        float _134 = _102 + _126;'#10+
    '        float _149 = inversesqrt((((((_134 * _134) * _134) * _134) * _134) * _134) * _134);'#10+
    '        float _163 = 6.0 * _102;'#10+
    '        float _172 = ((((_106 + (_114 * _114)) + _130) - ((6.0 * _114) * _126)) - (_163 * _114)) + ((2.0 * _126) * _102);'#10+
    '        float _178 = (_102 - _114) + _126;'#10+
    '        vec3 _664 = w;'#10+
    '        _664.x = p.x + ((((((((64.0 * w.x) * w.y) * w.z) * (_102 - _126)) * _178) * ((_106 - (_163 * _126)) + _130)) * _172) * _149);'#10+
    '        vec3 _666 = _664;'#10+
    '        _666.y = (p.y + (((((-16.0) * _114) * _134) * _178) * _178)) + (_172 * _172);'#10+
    '        vec3 _668 = _666;'#10+
    '        _668.z = p.z + ((((((-8.0) * w.y) * _178) * (((((_106 * _106) - (((28.0 * _106) * _102) * _126)) + ((70.0 * _106) * _130)) - (((28.0 * _102) * _126) * _130)) + (_130 * _130))) * _172) * '+
      '_149);'#10+
    '        w = _668;'#10+
    '        trap = min(trap, vec4(abs(_668), m));'#10+
    '        float _279 = dot(_668, _668);'#10+
    '        m = _279;'#10+
    '        if (_279 > 256.0)'#10+
    '        {'#10+
    '            break;'#10+
    '        }'#10+
    '    }'#10+
    '    res_color = vec4(m, trap.yzw);'#10+
    '    return ((0.25 * log(m)) * sqrt(m)) / dz;'#10+
    '}'#10+

    'float d_scene(vec3 p, out vec4 res_color)'#10+
    '{'#10+
    '    vec3 param = p;'#10+
    '    float param_1 = 1.10000002384185791015625;'#10+
    '    float _312 = sd_sphere(param, param_1);'#10+
    '    float d = _312;'#10+
    '    if (_312 < 0.100000001490116119384765625)'#10+
    '    {'#10+
    '        vec3 param_2 = p;'#10+
    '        vec4 param_3;'#10+
    '        float _321 = sd_mandelbulb(param_2, param_3);'#10+
    '        res_color = param_3;'#10+
    '        d = _321;'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        res_color = vec4(0.0);'#10+
    '    }'#10+
    '    return d;'#10+
    '}'#10+

    'vec3 surface_normal(vec3 p, float dp)'#10+
    '{'#10+
    '    vec3 param = p + vec3(0.001000000047497451305389404296875, 0.0, 0.0);'#10+
    '    vec4 param_1;'#10+
    '    float _337 = d_scene(param, param_1);'#10+
    '    vec3 param_2 = p + vec3(0.0, 0.001000000047497451305389404296875, 0.0);'#10+
    '    vec4 param_3;'#10+
    '    float _347 = d_scene(param_2, param_3);'#10+
    '    vec3 param_4 = p + vec3(0.0, 0.0, 0.001000000047497451305389404296875);'#10+
    '    vec4 param_5;'#10+
    '    float _357 = d_scene(param_4, param_5);'#10+
    '    return normalize(vec3(_337 - dp, _347 - dp, _357 - dp));'#10+
    '}'#10+

    'vec3 calc_color(vec3 ro, vec3 rd, float t, vec4 tra)'#10+
    '{'#10+
    '    vec3 param = ro + (rd * t);'#10+
    '    float param_1 = t;'#10+
    '    vec3 _379 = surface_normal(param, param_1);'#10+
    '    vec3 _386 = normalize(vec3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375) - rd);'#10+
    '    float _397 = clamp(0.0500000007450580596923828125 * log(tra.x), 0.0, 1.0);'#10+
    '    float _407 = clamp(dot(vec3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375), _379), 0.0, 1.0);'#10+
    '    return sqrt(pow(mix(mix(mix(vec3(0.00999999977648258209228515625), vec3(0.100000001490116119384765625, 0.20000000298023223876953125, 0.300000011920928955078125), vec3(clamp(tra.y, 0.0, 1.0))), '+
      'vec3(0.0199999995529651641845703125, 0.100000001490116119384765625, 0.300000011920928955078125), vec3(clamp(tra.z * tra.z, 0.0, 1.0))), vec3(0.300000011920928955078125, 0.100000001490116119384765625, '+
      '0.0199999995529651641845703125), vec3(clamp(pow(tra.w, 6.0), 0.0, 1.0))) * (((((vec3(10.5, 7.69999980926513671875, 4.900000095367431640625) * _407) + (vec3(1.0, 0.800000011920928955078125, '+
      '0.60000002384185791015625) * (clamp(0.5 + (0.5 * dot(vec3(-0.7070000171661376953125, 0.0, 0.7070000171661376953125), _379)), 0.0, 1.0) * _397))) + (vec3(0.1500000059604644775390625, '+
      '0.300000011920928955078125, 0.449999988079071044921875) * ((0.699999988079071044921875 + (0.300000011920928955078125 * _379.y)) * (0.20000000298023223876953125 + (0.800000011920928955078125 * '+
      '_397))))) + (vec3(0.875, 0.75, 0.625) * (0.0500000007450580596923828125 + (0.949999988079071044921875 * _397)))) + vec3((4.0 * clamp(1.0 + dot(rd, _379), 0.0, 1.0)) * _397)), '+
      'vec3(0.699999988079071044921875, 0.89999997615814208984375, 1.0)) + vec3(((pow(clamp(dot(_379, _386), 0.0, 1.0), 32.0) * _407) * (0.039999999105930328369140625 + (0.959999978542327880859375 * '+
      'pow(clamp(1.0 - dot(_386, vec3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375)), 0.0, 1.0), 5.0)))) * 15.0));'#10+
    '}'#10+

    'void main()'#10+
    '{'#10+
    '    vec3 _567 = ((eye + (fwd * 1.7999999523162841796875)) + (right * pos.x)) + (up * pos.y);'#10+
    '    vec3 _572 = normalize(_567 - eye);'#10+
    '    vec4 color = vec4(0.100000001490116119384765625, 0.20000000298023223876953125, 0.300000011920928955078125, 1.0);'#10+
    '    float t = 0.0;'#10+
    '    vec4 param_1;'#10+
    '    for (int i = 0; i < 96; i++)'#10+
    '    {'#10+
    '        vec3 _590 = _567 + (_572 * t);'#10+
    '        vec3 param = _590;'#10+
    '        float _596 = d_scene(param, param_1);'#10+
    '        if (_596 < 0.001000000047497451305389404296875)'#10+
    '        {'#10+
    '            vec3 param_2 = _590;'#10+
    '            vec3 param_3 = _572;'#10+
    '            float param_4 = _596;'#10+
    '            vec4 param_5 = param_1;'#10+
    '            vec3 _610 = calc_color(param_2, param_3, param_4, param_5);'#10+
    '            vec4 _649 = color;'#10+
    '            _649.x = _610.x;'#10+
    '            vec4 _651 = _649;'#10+
    '            _651.y = _610.y;'#10+
    '            vec4 _653 = _651;'#10+
    '            _653.z = _610.z;'#10+
    '            color = _653;'#10+
    '            break;'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            vec3 _626 = color.xyz + (vec3(0.0030000000260770320892333984375, 0.001000000047497451305389404296875, 0.0) * float(i));'#10+
    '            vec4 _655 = color;'#10+
    '            _655.x = _626.x;'#10+
    '            vec4 _657 = _655;'#10+
    '            _657.y = _626.y;'#10+
    '            vec4 _659 = _657;'#10+
    '            _659.z = _626.z;'#10+
    '            color = _659;'#10+
    '        }'#10+
    '        if (t > 3.0)'#10+
    '        {'#10+
    '            break;'#10+
    '        }'#10+
    '        t += _596;'#10+
    '    }'#10+
    '    frag_color = color;'#10+
    '}';

{$ENDIF !SOKOL_GLCORE33}

{$IFDEF SOKOL_GLES2}
const
  VS_SOURCE_GLSL100 =
    '#version 100'#10+

    'uniform vec4 vs_params[1];'#10+
    'varying float sin_t;'#10+
    'attribute vec4 position;'#10+
    'varying vec2 pos;'#10+
    'varying vec3 eye;'#10+
    'varying vec3 fwd;'#10+
    'varying vec3 right;'#10+
    'varying vec3 up;'#10+

    'vec3 eye_pos(float time, vec3 center)'#10+
    '{'#10+
    '    return center + vec3(sin(time * 0.0500000007450580596923828125) * 3.0, sin(time * 0.100000001490116119384765625) * 2.0, cos(time * 0.0500000007450580596923828125) * 3.0);'#10+
    '}'#10+

    'void lookat(vec3 eye_1, vec3 center, vec3 up_1, inout vec3 out_fwd, inout vec3 out_right, out vec3 out_up)'#10+
    '{'#10+
    '    out_fwd = normalize(center - eye_1);'#10+
    '    out_right = normalize(cross(out_fwd, up_1));'#10+
    '    out_up = cross(out_right, out_fwd);'#10+
    '}'#10+

    'void main()'#10+
    '{'#10+
    '    sin_t = sin(vs_params[0].y * 0.5);'#10+
    '    gl_Position = position;'#10+
    '    pos.x = position.x * vs_params[0].x;'#10+
    '    pos.y = position.y;'#10+
    '    float param = vs_params[0].y * 5.0;'#10+
    '    vec3 param_1 = vec3(0.0);'#10+
    '    eye = eye_pos(param, param_1);'#10+
    '    vec3 param_2 = eye;'#10+
    '    vec3 param_3 = vec3(0.0);'#10+
    '    vec3 param_4 = vec3(0.0, 1.0, 0.0);'#10+
    '    vec3 param_5;'#10+
    '    vec3 param_6;'#10+
    '    vec3 param_7;'#10+
    '    lookat(param_2, param_3, param_4, param_5, param_6, param_7);'#10+
    '    fwd = param_5;'#10+
    '    right = param_6;'#10+
    '    up = param_7;'#10+
    '}';

const
  FS_SOURCE_GLSL100 =
    '#version 100'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'varying highp vec3 eye;'#10+
    'varying highp vec3 fwd;'#10+
    'varying highp vec3 right;'#10+
    'varying highp vec2 pos;'#10+
    'varying highp vec3 up;'#10+
    'varying highp float sin_t;'#10+

    'highp float sd_sphere(highp vec3 p, highp float s)'#10+
    '{'#10+
    '    return length(p) - s;'#10+
    '}'#10+

    'highp float sd_mandelbulb(highp vec3 p, inout highp vec4 res_color)'#10+
    '{'#10+
    '    highp vec3 w = p;'#10+
    '    highp float _51 = dot(p, p);'#10+
    '    highp float m = _51;'#10+
    '    highp vec4 trap = vec4(abs(p), _51);'#10+
    '    highp float dz = 1.0;'#10+
    '    for (int i = 0; i < 4; i++)'#10+
    '    {'#10+
    '        highp float _78 = m * m;'#10+
    '        dz = ((8.0 * sqrt(((_78 * _78) * _78) * m)) * dz) + 1.0;'#10+
    '        highp float _102 = w.x * w.x;'#10+
    '        highp float _106 = _102 * _102;'#10+
    '        highp float _114 = w.y * w.y;'#10+
    '        highp float _126 = w.z * w.z;'#10+
    '        highp float _130 = _126 * _126;'#10+
    '        highp float _134 = _102 + _126;'#10+
    '        highp float _149 = inversesqrt((((((_134 * _134) * _134) * _134) * _134) * _134) * _134);'#10+
    '        highp float _163 = 6.0 * _102;'#10+
    '        highp float _172 = ((((_106 + (_114 * _114)) + _130) - ((6.0 * _114) * _126)) - (_163 * _114)) + ((2.0 * _126) * _102);'#10+
    '        highp float _178 = (_102 - _114) + _126;'#10+
    '        highp vec3 _664 = w;'#10+
    '        _664.x = p.x + ((((((((64.0 * w.x) * w.y) * w.z) * (_102 - _126)) * _178) * ((_106 - (_163 * _126)) + _130)) * _172) * _149);'#10+
    '        highp vec3 _666 = _664;'#10+
    '        _666.y = (p.y + (((((-16.0) * _114) * _134) * _178) * _178)) + (_172 * _172);'#10+
    '        highp vec3 _668 = _666;'#10+
    '        _668.z = p.z + ((((((-8.0) * w.y) * _178) * (((((_106 * _106) - (((28.0 * _106) * _102) * _126)) + ((70.0 * _106) * _130)) - (((28.0 * _102) * _126) * _130)) + (_130 * _130))) * _172) * '+
      '_149);'#10+
    '        w = _668;'#10+
    '        trap = min(trap, vec4(abs(_668), m));'#10+
    '        highp float _279 = dot(_668, _668);'#10+
    '        m = _279;'#10+
    '        if (_279 > 256.0)'#10+
    '        {'#10+
    '            break;'#10+
    '        }'#10+
    '    }'#10+
    '    res_color = vec4(m, trap.yzw);'#10+
    '    return ((0.25 * log(m)) * sqrt(m)) / dz;'#10+
    '}'#10+

    'highp float d_scene(highp vec3 p, out highp vec4 res_color)'#10+
    '{'#10+
    '    highp vec3 param = p;'#10+
    '    highp float param_1 = 1.10000002384185791015625;'#10+
    '    highp float _312 = sd_sphere(param, param_1);'#10+
    '    highp float d = _312;'#10+
    '    if (_312 < 0.100000001490116119384765625)'#10+
    '    {'#10+
    '        highp vec3 param_2 = p;'#10+
    '        highp vec4 param_3;'#10+
    '        highp float _321 = sd_mandelbulb(param_2, param_3);'#10+
    '        res_color = param_3;'#10+
    '        d = _321;'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        res_color = vec4(0.0);'#10+
    '    }'#10+
    '    return d;'#10+
    '}'#10+

    'highp vec3 surface_normal(highp vec3 p, highp float dp)'#10+
    '{'#10+
    '    highp vec3 param = p + vec3(0.001000000047497451305389404296875, 0.0, 0.0);'#10+
    '    highp vec4 param_1;'#10+
    '    highp float _337 = d_scene(param, param_1);'#10+
    '    highp vec3 param_2 = p + vec3(0.0, 0.001000000047497451305389404296875, 0.0);'#10+
    '    highp vec4 param_3;'#10+
    '    highp float _347 = d_scene(param_2, param_3);'#10+
    '    highp vec3 param_4 = p + vec3(0.0, 0.0, 0.001000000047497451305389404296875);'#10+
    '    highp vec4 param_5;'#10+
    '    highp float _357 = d_scene(param_4, param_5);'#10+
    '    return normalize(vec3(_337 - dp, _347 - dp, _357 - dp));'#10+
    '}'#10+

    'highp vec3 calc_color(highp vec3 ro, highp vec3 rd, highp float t, highp vec4 tra)'#10+
    '{'#10+
    '    highp vec3 param = ro + (rd * t);'#10+
    '    highp float param_1 = t;'#10+
    '    highp vec3 _379 = surface_normal(param, param_1);'#10+
    '    highp vec3 _386 = normalize(vec3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375) - rd);'#10+
    '    highp float _397 = clamp(0.0500000007450580596923828125 * log(tra.x), 0.0, 1.0);'#10+
    '    highp float _407 = clamp(dot(vec3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375), _379), 0.0, 1.0);'#10+
    '    return sqrt(pow(mix(mix(mix(vec3(0.00999999977648258209228515625), vec3(0.100000001490116119384765625, 0.20000000298023223876953125, 0.300000011920928955078125), vec3(clamp(tra.y, 0.0, 1.0))), '+
      'vec3(0.0199999995529651641845703125, 0.100000001490116119384765625, 0.300000011920928955078125), vec3(clamp(tra.z * tra.z, 0.0, 1.0))), vec3(0.300000011920928955078125, 0.100000001490116119384765625, '+
      '0.0199999995529651641845703125), vec3(clamp(pow(tra.w, 6.0), 0.0, 1.0))) * (((((vec3(10.5, 7.69999980926513671875, 4.900000095367431640625) * _407) + (vec3(1.0, 0.800000011920928955078125, '+
      '0.60000002384185791015625) * (clamp(0.5 + (0.5 * dot(vec3(-0.7070000171661376953125, 0.0, 0.7070000171661376953125), _379)), 0.0, 1.0) * _397))) + (vec3(0.1500000059604644775390625, '+
      '0.300000011920928955078125, 0.449999988079071044921875) * ((0.699999988079071044921875 + (0.300000011920928955078125 * _379.y)) * (0.20000000298023223876953125 + (0.800000011920928955078125 * '+
      '_397))))) + (vec3(0.875, 0.75, 0.625) * (0.0500000007450580596923828125 + (0.949999988079071044921875 * _397)))) + vec3((4.0 * clamp(1.0 + dot(rd, _379), 0.0, 1.0)) * _397)), '+
      'vec3(0.699999988079071044921875, 0.89999997615814208984375, 1.0)) + vec3(((pow(clamp(dot(_379, _386), 0.0, 1.0), 32.0) * _407) * (0.039999999105930328369140625 + (0.959999978542327880859375 * '+
      'pow(clamp(1.0 - dot(_386, vec3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375)), 0.0, 1.0), 5.0)))) * 15.0));'#10+
    '}'#10+

    'void main()'#10+
    '{'#10+
    '    highp vec3 _567 = ((eye + (fwd * 1.7999999523162841796875)) + (right * pos.x)) + (up * pos.y);'#10+
    '    highp vec3 _572 = normalize(_567 - eye);'#10+
    '    highp vec4 color = vec4(0.100000001490116119384765625, 0.20000000298023223876953125, 0.300000011920928955078125, 1.0);'#10+
    '    highp float t = 0.0;'#10+
    '    highp vec4 param_1;'#10+
    '    for (int i = 0; i < 96; i++)'#10+
    '    {'#10+
    '        highp vec3 _590 = _567 + (_572 * t);'#10+
    '        highp vec3 param = _590;'#10+
    '        highp float _596 = d_scene(param, param_1);'#10+
    '        if (_596 < 0.001000000047497451305389404296875)'#10+
    '        {'#10+
    '            highp vec3 param_2 = _590;'#10+
    '            highp vec3 param_3 = _572;'#10+
    '            highp float param_4 = _596;'#10+
    '            highp vec4 param_5 = param_1;'#10+
    '            highp vec3 _610 = calc_color(param_2, param_3, param_4, param_5);'#10+
    '            highp vec4 _649 = color;'#10+
    '            _649.x = _610.x;'#10+
    '            highp vec4 _651 = _649;'#10+
    '            _651.y = _610.y;'#10+
    '            highp vec4 _653 = _651;'#10+
    '            _653.z = _610.z;'#10+
    '            color = _653;'#10+
    '            break;'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            highp vec3 _626 = color.xyz + (vec3(0.0030000000260770320892333984375, 0.001000000047497451305389404296875, 0.0) * float(i));'#10+
    '            highp vec4 _655 = color;'#10+
    '            _655.x = _626.x;'#10+
    '            highp vec4 _657 = _655;'#10+
    '            _657.y = _626.y;'#10+
    '            highp vec4 _659 = _657;'#10+
    '            _659.z = _626.z;'#10+
    '            color = _659;'#10+
    '        }'#10+
    '        if (t > 3.0)'#10+
    '        {'#10+
    '            break;'#10+
    '        }'#10+
    '        t += _596;'#10+
    '    }'#10+
    '    gl_FragData[0] = color;'#10+
    '}';

{$ENDIF !SOKOL_GLES2}

{$IFDEF SOKOL_GLES3}
const
  VS_SOURCE_GLSL300ES =
    '#version 300 es'#10+

    'uniform vec4 vs_params[1];'#10+
    'out float sin_t;'#10+
    'layout(location = 0) in vec4 position;'#10+
    'out vec2 pos;'#10+
    'out vec3 eye;'#10+
    'out vec3 fwd;'#10+
    'out vec3 right;'#10+
    'out vec3 up;'#10+

    'vec3 eye_pos(float time, vec3 center)'#10+
    '{'#10+
    '    return center + vec3(sin(time * 0.0500000007450580596923828125) * 3.0, sin(time * 0.100000001490116119384765625) * 2.0, cos(time * 0.0500000007450580596923828125) * 3.0);'#10+
    '}'#10+

    'void lookat(vec3 eye_1, vec3 center, vec3 up_1, inout vec3 out_fwd, inout vec3 out_right, out vec3 out_up)'#10+
    '{'#10+
    '    out_fwd = normalize(center - eye_1);'#10+
    '    out_right = normalize(cross(out_fwd, up_1));'#10+
    '    out_up = cross(out_right, out_fwd);'#10+
    '}'#10+

    'void main()'#10+
    '{'#10+
    '    sin_t = sin(vs_params[0].y * 0.5);'#10+
    '    gl_Position = position;'#10+
    '    pos.x = position.x * vs_params[0].x;'#10+
    '    pos.y = position.y;'#10+
    '    float param = vs_params[0].y * 5.0;'#10+
    '    vec3 param_1 = vec3(0.0);'#10+
    '    eye = eye_pos(param, param_1);'#10+
    '    vec3 param_2 = eye;'#10+
    '    vec3 param_3 = vec3(0.0);'#10+
    '    vec3 param_4 = vec3(0.0, 1.0, 0.0);'#10+
    '    vec3 param_5;'#10+
    '    vec3 param_6;'#10+
    '    vec3 param_7;'#10+
    '    lookat(param_2, param_3, param_4, param_5, param_6, param_7);'#10+
    '    fwd = param_5;'#10+
    '    right = param_6;'#10+
    '    up = param_7;'#10+
    '}';

const
  FS_SOURCE_GLSL300ES =
    '#version 300 es'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'in highp vec3 eye;'#10+
    'in highp vec3 fwd;'#10+
    'in highp vec3 right;'#10+
    'in highp vec2 pos;'#10+
    'in highp vec3 up;'#10+
    'layout(location = 0) out highp vec4 frag_color;'#10+
    'in highp float sin_t;'#10+

    'highp float sd_sphere(highp vec3 p, highp float s)'#10+
    '{'#10+
    '    return length(p) - s;'#10+
    '}'#10+

    'highp float sd_mandelbulb(highp vec3 p, inout highp vec4 res_color)'#10+
    '{'#10+
    '    highp vec3 w = p;'#10+
    '    highp float _51 = dot(p, p);'#10+
    '    highp float m = _51;'#10+
    '    highp vec4 trap = vec4(abs(p), _51);'#10+
    '    highp float dz = 1.0;'#10+
    '    for (int i = 0; i < 4; i++)'#10+
    '    {'#10+
    '        highp float _78 = m * m;'#10+
    '        dz = ((8.0 * sqrt(((_78 * _78) * _78) * m)) * dz) + 1.0;'#10+
    '        highp float _102 = w.x * w.x;'#10+
    '        highp float _106 = _102 * _102;'#10+
    '        highp float _114 = w.y * w.y;'#10+
    '        highp float _126 = w.z * w.z;'#10+
    '        highp float _130 = _126 * _126;'#10+
    '        highp float _134 = _102 + _126;'#10+
    '        highp float _149 = inversesqrt((((((_134 * _134) * _134) * _134) * _134) * _134) * _134);'#10+
    '        highp float _163 = 6.0 * _102;'#10+
    '        highp float _172 = ((((_106 + (_114 * _114)) + _130) - ((6.0 * _114) * _126)) - (_163 * _114)) + ((2.0 * _126) * _102);'#10+
    '        highp float _178 = (_102 - _114) + _126;'#10+
    '        highp vec3 _664 = w;'#10+
    '        _664.x = p.x + ((((((((64.0 * w.x) * w.y) * w.z) * (_102 - _126)) * _178) * ((_106 - (_163 * _126)) + _130)) * _172) * _149);'#10+
    '        highp vec3 _666 = _664;'#10+
    '        _666.y = (p.y + (((((-16.0) * _114) * _134) * _178) * _178)) + (_172 * _172);'#10+
    '        highp vec3 _668 = _666;'#10+
    '        _668.z = p.z + ((((((-8.0) * w.y) * _178) * (((((_106 * _106) - (((28.0 * _106) * _102) * _126)) + ((70.0 * _106) * _130)) - (((28.0 * _102) * _126) * _130)) + (_130 * _130))) * _172) * '+
      '_149);'#10+
    '        w = _668;'#10+
    '        trap = min(trap, vec4(abs(_668), m));'#10+
    '        highp float _279 = dot(_668, _668);'#10+
    '        m = _279;'#10+
    '        if (_279 > 256.0)'#10+
    '        {'#10+
    '            break;'#10+
    '        }'#10+
    '    }'#10+
    '    res_color = vec4(m, trap.yzw);'#10+
    '    return ((0.25 * log(m)) * sqrt(m)) / dz;'#10+
    '}'#10+

    'highp float d_scene(highp vec3 p, out highp vec4 res_color)'#10+
    '{'#10+
    '    highp vec3 param = p;'#10+
    '    highp float param_1 = 1.10000002384185791015625;'#10+
    '    highp float _312 = sd_sphere(param, param_1);'#10+
    '    highp float d = _312;'#10+
    '    if (_312 < 0.100000001490116119384765625)'#10+
    '    {'#10+
    '        highp vec3 param_2 = p;'#10+
    '        highp vec4 param_3;'#10+
    '        highp float _321 = sd_mandelbulb(param_2, param_3);'#10+
    '        res_color = param_3;'#10+
    '        d = _321;'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        res_color = vec4(0.0);'#10+
    '    }'#10+
    '    return d;'#10+
    '}'#10+

    'highp vec3 surface_normal(highp vec3 p, highp float dp)'#10+
    '{'#10+
    '    highp vec3 param = p + vec3(0.001000000047497451305389404296875, 0.0, 0.0);'#10+
    '    highp vec4 param_1;'#10+
    '    highp float _337 = d_scene(param, param_1);'#10+
    '    highp vec3 param_2 = p + vec3(0.0, 0.001000000047497451305389404296875, 0.0);'#10+
    '    highp vec4 param_3;'#10+
    '    highp float _347 = d_scene(param_2, param_3);'#10+
    '    highp vec3 param_4 = p + vec3(0.0, 0.0, 0.001000000047497451305389404296875);'#10+
    '    highp vec4 param_5;'#10+
    '    highp float _357 = d_scene(param_4, param_5);'#10+
    '    return normalize(vec3(_337 - dp, _347 - dp, _357 - dp));'#10+
    '}'#10+

    'highp vec3 calc_color(highp vec3 ro, highp vec3 rd, highp float t, highp vec4 tra)'#10+
    '{'#10+
    '    highp vec3 param = ro + (rd * t);'#10+
    '    highp float param_1 = t;'#10+
    '    highp vec3 _379 = surface_normal(param, param_1);'#10+
    '    highp vec3 _386 = normalize(vec3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375) - rd);'#10+
    '    highp float _397 = clamp(0.0500000007450580596923828125 * log(tra.x), 0.0, 1.0);'#10+
    '    highp float _407 = clamp(dot(vec3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375), _379), 0.0, 1.0);'#10+
    '    return sqrt(pow(mix(mix(mix(vec3(0.00999999977648258209228515625), vec3(0.100000001490116119384765625, 0.20000000298023223876953125, 0.300000011920928955078125), vec3(clamp(tra.y, 0.0, 1.0))), '+
      'vec3(0.0199999995529651641845703125, 0.100000001490116119384765625, 0.300000011920928955078125), vec3(clamp(tra.z * tra.z, 0.0, 1.0))), vec3(0.300000011920928955078125, 0.100000001490116119384765625, '+
      '0.0199999995529651641845703125), vec3(clamp(pow(tra.w, 6.0), 0.0, 1.0))) * (((((vec3(10.5, 7.69999980926513671875, 4.900000095367431640625) * _407) + (vec3(1.0, 0.800000011920928955078125, '+
      '0.60000002384185791015625) * (clamp(0.5 + (0.5 * dot(vec3(-0.7070000171661376953125, 0.0, 0.7070000171661376953125), _379)), 0.0, 1.0) * _397))) + (vec3(0.1500000059604644775390625, '+
      '0.300000011920928955078125, 0.449999988079071044921875) * ((0.699999988079071044921875 + (0.300000011920928955078125 * _379.y)) * (0.20000000298023223876953125 + (0.800000011920928955078125 * '+
      '_397))))) + (vec3(0.875, 0.75, 0.625) * (0.0500000007450580596923828125 + (0.949999988079071044921875 * _397)))) + vec3((4.0 * clamp(1.0 + dot(rd, _379), 0.0, 1.0)) * _397)), '+
      'vec3(0.699999988079071044921875, 0.89999997615814208984375, 1.0)) + vec3(((pow(clamp(dot(_379, _386), 0.0, 1.0), 32.0) * _407) * (0.039999999105930328369140625 + (0.959999978542327880859375 * '+
      'pow(clamp(1.0 - dot(_386, vec3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375)), 0.0, 1.0), 5.0)))) * 15.0));'#10+
    '}'#10+

    'void main()'#10+
    '{'#10+
    '    highp vec3 _567 = ((eye + (fwd * 1.7999999523162841796875)) + (right * pos.x)) + (up * pos.y);'#10+
    '    highp vec3 _572 = normalize(_567 - eye);'#10+
    '    highp vec4 color = vec4(0.100000001490116119384765625, 0.20000000298023223876953125, 0.300000011920928955078125, 1.0);'#10+
    '    highp float t = 0.0;'#10+
    '    highp vec4 param_1;'#10+
    '    for (int i = 0; i < 96; i++)'#10+
    '    {'#10+
    '        highp vec3 _590 = _567 + (_572 * t);'#10+
    '        highp vec3 param = _590;'#10+
    '        highp float _596 = d_scene(param, param_1);'#10+
    '        if (_596 < 0.001000000047497451305389404296875)'#10+
    '        {'#10+
    '            highp vec3 param_2 = _590;'#10+
    '            highp vec3 param_3 = _572;'#10+
    '            highp float param_4 = _596;'#10+
    '            highp vec4 param_5 = param_1;'#10+
    '            highp vec3 _610 = calc_color(param_2, param_3, param_4, param_5);'#10+
    '            highp vec4 _649 = color;'#10+
    '            _649.x = _610.x;'#10+
    '            highp vec4 _651 = _649;'#10+
    '            _651.y = _610.y;'#10+
    '            highp vec4 _653 = _651;'#10+
    '            _653.z = _610.z;'#10+
    '            color = _653;'#10+
    '            break;'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            highp vec3 _626 = color.xyz + (vec3(0.0030000000260770320892333984375, 0.001000000047497451305389404296875, 0.0) * float(i));'#10+
    '            highp vec4 _655 = color;'#10+
    '            _655.x = _626.x;'#10+
    '            highp vec4 _657 = _655;'#10+
    '            _657.y = _626.y;'#10+
    '            highp vec4 _659 = _657;'#10+
    '            _659.z = _626.z;'#10+
    '            color = _659;'#10+
    '        }'#10+
    '        if (t > 3.0)'#10+
    '        {'#10+
    '            break;'#10+
    '        }'#10+
    '        t += _596;'#10+
    '    }'#10+
    '    frag_color = color;'#10+
    '}';

{$ENDIF !SOKOL_GLES3}

{$IFDEF SOKOL_D3D11}
const
  VS_SOURCE_HLSL5 =
    'cbuffer vs_params : register(b0)'#10+
    '{'#10+
    '    float _62_aspect : packoffset(c0);'#10+
    '    float _62_time : packoffset(c0.y);'#10+
    '};'#10+


    'static float4 gl_Position;'#10+
    'static float sin_t;'#10+
    'static float4 position;'#10+
    'static float2 pos;'#10+
    'static float3 eye;'#10+
    'static float3 fwd;'#10+
    'static float3 right;'#10+
    'static float3 up;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float4 position : TEXCOORD0;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float2 pos : TEXCOORD0;'#10+
    '    float3 eye : TEXCOORD1;'#10+
    '    float3 up : TEXCOORD2;'#10+
    '    float3 right : TEXCOORD3;'#10+
    '    float3 fwd : TEXCOORD4;'#10+
    '    float sin_t : TEXCOORD5;'#10+
    '    float4 gl_Position : SV_Position;'#10+
    '};'#10+

    'float3 eye_pos(float time, float3 center)'#10+
    '{'#10+
    '    return center + float3(sin(time * 0.0500000007450580596923828125f) * 3.0f, sin(time * 0.100000001490116119384765625f) * 2.0f, cos(time * 0.0500000007450580596923828125f) * 3.0f);'#10+
    '}'#10+

    'void lookat(float3 eye_1, float3 center, float3 up_1, inout float3 out_fwd, inout float3 out_right, out float3 out_up)'#10+
    '{'#10+
    '    out_fwd = normalize(center - eye_1);'#10+
    '    out_right = normalize(cross(out_fwd, up_1));'#10+
    '    out_up = cross(out_right, out_fwd);'#10+
    '}'#10+

    'void vert_main()'#10+
    '{'#10+
    '    sin_t = sin(_62_time * 0.5f);'#10+
    '    gl_Position = position;'#10+
    '    pos.x = position.x * _62_aspect;'#10+
    '    pos.y = position.y;'#10+
    '    float param = _62_time * 5.0f;'#10+
    '    float3 param_1 = 0.0f.xxx;'#10+
    '    eye = eye_pos(param, param_1);'#10+
    '    float3 param_2 = eye;'#10+
    '    float3 param_3 = 0.0f.xxx;'#10+
    '    float3 param_4 = float3(0.0f, 1.0f, 0.0f);'#10+
    '    float3 param_5;'#10+
    '    float3 param_6;'#10+
    '    float3 param_7;'#10+
    '    lookat(param_2, param_3, param_4, param_5, param_6, param_7);'#10+
    '    fwd = param_5;'#10+
    '    right = param_6;'#10+
    '    up = param_7;'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    position = stage_input.position;'#10+
    '    vert_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.gl_Position = gl_Position;'#10+
    '    stage_output.sin_t = sin_t;'#10+
    '    stage_output.pos = pos;'#10+
    '    stage_output.eye = eye;'#10+
    '    stage_output.fwd = fwd;'#10+
    '    stage_output.right = right;'#10+
    '    stage_output.up = up;'#10+
    '    return stage_output;'#10+
    '}';

const
  FS_SOURCE_HLSL5 =
    'static float3 eye;'#10+
    'static float3 fwd;'#10+
    'static float3 right;'#10+
    'static float2 pos;'#10+
    'static float3 up;'#10+
    'static float4 frag_color;'#10+
    'static float sin_t;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float2 pos : TEXCOORD0;'#10+
    '    float3 eye : TEXCOORD1;'#10+
    '    float3 up : TEXCOORD2;'#10+
    '    float3 right : TEXCOORD3;'#10+
    '    float3 fwd : TEXCOORD4;'#10+
    '    float sin_t : TEXCOORD5;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float4 frag_color : SV_Target0;'#10+
    '};'#10+

    'float sd_sphere(float3 p, float s)'#10+
    '{'#10+
    '    return length(p) - s;'#10+
    '}'#10+

    'float sd_mandelbulb(float3 p, inout float4 res_color)'#10+
    '{'#10+
    '    float3 w = p;'#10+
    '    float _51 = dot(p, p);'#10+
    '    float m = _51;'#10+
    '    float4 trap = float4(abs(p), _51);'#10+
    '    float dz = 1.0f;'#10+
    '    for (int i = 0; i < 4; i++)'#10+
    '    {'#10+
    '        float _78 = m * m;'#10+
    '        dz = ((8.0f * sqrt(((_78 * _78) * _78) * m)) * dz) + 1.0f;'#10+
    '        float _102 = w.x * w.x;'#10+
    '        float _106 = _102 * _102;'#10+
    '        float _114 = w.y * w.y;'#10+
    '        float _126 = w.z * w.z;'#10+
    '        float _130 = _126 * _126;'#10+
    '        float _134 = _102 + _126;'#10+
    '        float _149 = rsqrt((((((_134 * _134) * _134) * _134) * _134) * _134) * _134);'#10+
    '        float _163 = 6.0f * _102;'#10+
    '        float _172 = ((((_106 + (_114 * _114)) + _130) - ((6.0f * _114) * _126)) - (_163 * _114)) + ((2.0f * _126) * _102);'#10+
    '        float _178 = (_102 - _114) + _126;'#10+
    '        float3 _664 = w;'#10+
    '        _664.x = p.x + ((((((((64.0f * w.x) * w.y) * w.z) * (_102 - _126)) * _178) * ((_106 - (_163 * _126)) + _130)) * _172) * _149);'#10+
    '        float3 _666 = _664;'#10+
    '        _666.y = (p.y + (((((-16.0f) * _114) * _134) * _178) * _178)) + (_172 * _172);'#10+
    '        float3 _668 = _666;'#10+
    '        _668.z = p.z + ((((((-8.0f) * w.y) * _178) * (((((_106 * _106) - (((28.0f * _106) * _102) * _126)) + ((70.0f * _106) * _130)) - (((28.0f * _102) * _126) * _130)) + (_130 * _130))) * _172) * '+
      '_149);'#10+
    '        w = _668;'#10+
    '        trap = min(trap, float4(abs(_668), m));'#10+
    '        float _279 = dot(_668, _668);'#10+
    '        m = _279;'#10+
    '        if (_279 > 256.0f)'#10+
    '        {'#10+
    '            break;'#10+
    '        }'#10+
    '    }'#10+
    '    res_color = float4(m, trap.yzw);'#10+
    '    return ((0.25f * log(m)) * sqrt(m)) / dz;'#10+
    '}'#10+

    'float d_scene(float3 p, out float4 res_color)'#10+
    '{'#10+
    '    float3 param = p;'#10+
    '    float param_1 = 1.10000002384185791015625f;'#10+
    '    float _312 = sd_sphere(param, param_1);'#10+
    '    float d = _312;'#10+
    '    if (_312 < 0.100000001490116119384765625f)'#10+
    '    {'#10+
    '        float3 param_2 = p;'#10+
    '        float4 param_3;'#10+
    '        float _321 = sd_mandelbulb(param_2, param_3);'#10+
    '        res_color = param_3;'#10+
    '        d = _321;'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        res_color = 0.0f.xxxx;'#10+
    '    }'#10+
    '    return d;'#10+
    '}'#10+

    'float3 surface_normal(float3 p, float dp)'#10+
    '{'#10+
    '    float3 param = p + float3(0.001000000047497451305389404296875f, 0.0f, 0.0f);'#10+
    '    float4 param_1;'#10+
    '    float _337 = d_scene(param, param_1);'#10+
    '    float3 param_2 = p + float3(0.0f, 0.001000000047497451305389404296875f, 0.0f);'#10+
    '    float4 param_3;'#10+
    '    float _347 = d_scene(param_2, param_3);'#10+
    '    float3 param_4 = p + float3(0.0f, 0.0f, 0.001000000047497451305389404296875f);'#10+
    '    float4 param_5;'#10+
    '    float _357 = d_scene(param_4, param_5);'#10+
    '    return normalize(float3(_337 - dp, _347 - dp, _357 - dp));'#10+
    '}'#10+

    'float3 calc_color(float3 ro, float3 rd, float t, float4 tra)'#10+
    '{'#10+
    '    float3 param = ro + (rd * t);'#10+
    '    float param_1 = t;'#10+
    '    float3 _379 = surface_normal(param, param_1);'#10+
    '    float3 _386 = normalize(float3(0.57700002193450927734375f, 0.57700002193450927734375f, -0.57700002193450927734375f) - rd);'#10+
    '    float _397 = clamp(0.0500000007450580596923828125f * log(tra.x), 0.0f, 1.0f);'#10+
    '    float _407 = clamp(dot(float3(0.57700002193450927734375f, 0.57700002193450927734375f, -0.57700002193450927734375f), _379), 0.0f, 1.0f);'#10+
    '    return sqrt(pow(lerp(lerp(lerp(0.00999999977648258209228515625f.xxx, float3(0.100000001490116119384765625f, 0.20000000298023223876953125f, 0.300000011920928955078125f), clamp(tra.y, 0.0f, '+
      '1.0f).xxx), float3(0.0199999995529651641845703125f, 0.100000001490116119384765625f, 0.300000011920928955078125f), clamp(tra.z * tra.z, 0.0f, 1.0f).xxx), float3(0.300000011920928955078125f, '+
      '0.100000001490116119384765625f, 0.0199999995529651641845703125f), clamp(pow(tra.w, 6.0f), 0.0f, 1.0f).xxx) * (((((float3(10.5f, 7.69999980926513671875f, 4.900000095367431640625f) * _407) + '+
      '(float3(1.0f, 0.800000011920928955078125f, 0.60000002384185791015625f) * (clamp(0.5f + (0.5f * dot(float3(-0.7070000171661376953125f, 0.0f, 0.7070000171661376953125f), _379)), 0.0f, 1.0f) * _397))) + '+
      '(float3(0.1500000059604644775390625f, 0.300000011920928955078125f, 0.449999988079071044921875f) * ((0.699999988079071044921875f + (0.300000011920928955078125f * _379.y)) * '+
      '(0.20000000298023223876953125f + (0.800000011920928955078125f * _397))))) + (float3(0.875f, 0.75f, 0.625f) * (0.0500000007450580596923828125f + (0.949999988079071044921875f * _397)))) + ((4.0f * '+
      'clamp(1.0f + dot(rd, _379), 0.0f, 1.0f)) * _397).xxx), float3(0.699999988079071044921875f, 0.89999997615814208984375f, 1.0f)) + (((pow(clamp(dot(_379, _386), 0.0f, 1.0f), 32.0f) * _407) * '+
      '(0.039999999105930328369140625f + (0.959999978542327880859375f * pow(clamp(1.0f - dot(_386, float3(0.57700002193450927734375f, 0.57700002193450927734375f, -0.57700002193450927734375f)), 0.0f, 1.0f), '+
      '5.0f)))) * 15.0f).xxx);'#10+
    '}'#10+

    'void frag_main()'#10+
    '{'#10+
    '    float3 _567 = ((eye + (fwd * 1.7999999523162841796875f)) + (right * pos.x)) + (up * pos.y);'#10+
    '    float3 _572 = normalize(_567 - eye);'#10+
    '    float4 color = float4(0.100000001490116119384765625f, 0.20000000298023223876953125f, 0.300000011920928955078125f, 1.0f);'#10+
    '    float t = 0.0f;'#10+
    '    float4 param_1;'#10+
    '    for (int i = 0; i < 96; i++)'#10+
    '    {'#10+
    '        float3 _590 = _567 + (_572 * t);'#10+
    '        float3 param = _590;'#10+
    '        float _596 = d_scene(param, param_1);'#10+
    '        if (_596 < 0.001000000047497451305389404296875f)'#10+
    '        {'#10+
    '            float3 param_2 = _590;'#10+
    '            float3 param_3 = _572;'#10+
    '            float param_4 = _596;'#10+
    '            float4 param_5 = param_1;'#10+
    '            float3 _610 = calc_color(param_2, param_3, param_4, param_5);'#10+
    '            float4 _649 = color;'#10+
    '            _649.x = _610.x;'#10+
    '            float4 _651 = _649;'#10+
    '            _651.y = _610.y;'#10+
    '            float4 _653 = _651;'#10+
    '            _653.z = _610.z;'#10+
    '            color = _653;'#10+
    '            break;'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            float3 _626 = color.xyz + (float3(0.0030000000260770320892333984375f, 0.001000000047497451305389404296875f, 0.0f) * float(i));'#10+
    '            float4 _655 = color;'#10+
    '            _655.x = _626.x;'#10+
    '            float4 _657 = _655;'#10+
    '            _657.y = _626.y;'#10+
    '            float4 _659 = _657;'#10+
    '            _659.z = _626.z;'#10+
    '            color = _659;'#10+
    '        }'#10+
    '        if (t > 3.0f)'#10+
    '        {'#10+
    '            break;'#10+
    '        }'#10+
    '        t += _596;'#10+
    '    }'#10+
    '    frag_color = color;'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    eye = stage_input.eye;'#10+
    '    fwd = stage_input.fwd;'#10+
    '    right = stage_input.right;'#10+
    '    pos = stage_input.pos;'#10+
    '    up = stage_input.up;'#10+
    '    sin_t = stage_input.sin_t;'#10+
    '    frag_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.frag_color = frag_color;'#10+
    '    return stage_output;'#10+
    '}';

{$ENDIF !SOKOL_D3D11}

{$IFDEF SOKOL_METAL}
const
  VS_SOURCE_METAL_MACOS =
    '#pragma clang diagnostic ignored "-Wmissing-prototypes"'#10+

    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct vs_params'#10+
    '{'#10+
    '    float aspect;'#10+
    '    float time;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float2 pos [[user(locn0)]];'#10+
    '    float3 eye [[user(locn1)]];'#10+
    '    float3 up [[user(locn2)]];'#10+
    '    float3 right [[user(locn3)]];'#10+
    '    float3 fwd [[user(locn4)]];'#10+
    '    float sin_t [[user(locn5)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 position [[attribute(0)]];'#10+
    '};'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 eye_pos(thread const float& time, thread const float3& center)'#10+
    '{'#10+
    '    return center + float3(sin(time * 0.0500000007450580596923828125) * 3.0, sin(time * 0.100000001490116119384765625) * 2.0, cos(time * 0.0500000007450580596923828125) * 3.0);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'void lookat(thread const float3& eye, thread const float3& center, thread const float3& up, thread float3& out_fwd, thread float3& out_right, thread float3& out_up)'#10+
    '{'#10+
    '    out_fwd = fast::normalize(center - eye);'#10+
    '    out_right = fast::normalize(cross(out_fwd, up));'#10+
    '    out_up = cross(out_right, out_fwd);'#10+
    '}'#10+

    'vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _62 [[buffer(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.sin_t = sin(_62.time * 0.5);'#10+
    '    out.gl_Position = in.position;'#10+
    '    out.pos.x = in.position.x * _62.aspect;'#10+
    '    out.pos.y = in.position.y;'#10+
    '    float param = _62.time * 5.0;'#10+
    '    float3 param_1 = float3(0.0);'#10+
    '    out.eye = eye_pos(param, param_1);'#10+
    '    float3 param_2 = out.eye;'#10+
    '    float3 param_3 = float3(0.0);'#10+
    '    float3 param_4 = float3(0.0, 1.0, 0.0);'#10+
    '    float3 param_5;'#10+
    '    float3 param_6;'#10+
    '    float3 param_7;'#10+
    '    lookat(param_2, param_3, param_4, param_5, param_6, param_7);'#10+
    '    out.fwd = param_5;'#10+
    '    out.right = param_6;'#10+
    '    out.up = param_7;'#10+
    '    return out;'#10+
    '}';

const
  FS_SOURCE_METAL_MACOS =
    '#pragma clang diagnostic ignored "-Wmissing-prototypes"'#10+

    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_color [[color(0)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float2 pos [[user(locn0)]];'#10+
    '    float3 eye [[user(locn1)]];'#10+
    '    float3 up [[user(locn2)]];'#10+
    '    float3 right [[user(locn3)]];'#10+
    '    float3 fwd [[user(locn4)]];'#10+
    '};'#10+

    'static inline __attribute__((always_inline))'#10+
    'float sd_sphere(thread const float3& p, thread const float& s)'#10+
    '{'#10+
    '    return length(p) - s;'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float sd_mandelbulb(thread const float3& p, thread float4& res_color)'#10+
    '{'#10+
    '    float3 w = p;'#10+
    '    float _51 = dot(p, p);'#10+
    '    float m = _51;'#10+
    '    float4 trap = float4(abs(p), _51);'#10+
    '    float dz = 1.0;'#10+
    '    for (int i = 0; i < 4; i++)'#10+
    '    {'#10+
    '        float _78 = m * m;'#10+
    '        dz = ((8.0 * sqrt(((_78 * _78) * _78) * m)) * dz) + 1.0;'#10+
    '        float _102 = w.x * w.x;'#10+
    '        float _106 = _102 * _102;'#10+
    '        float _114 = w.y * w.y;'#10+
    '        float _126 = w.z * w.z;'#10+
    '        float _130 = _126 * _126;'#10+
    '        float _134 = _102 + _126;'#10+
    '        float _149 = rsqrt((((((_134 * _134) * _134) * _134) * _134) * _134) * _134);'#10+
    '        float _163 = 6.0 * _102;'#10+
    '        float _172 = ((((_106 + (_114 * _114)) + _130) - ((6.0 * _114) * _126)) - (_163 * _114)) + ((2.0 * _126) * _102);'#10+
    '        float _178 = (_102 - _114) + _126;'#10+
    '        float3 _664 = w;'#10+
    '        _664.x = p.x + ((((((((64.0 * w.x) * w.y) * w.z) * (_102 - _126)) * _178) * ((_106 - (_163 * _126)) + _130)) * _172) * _149);'#10+
    '        float3 _666 = _664;'#10+
    '        _666.y = (p.y + (((((-16.0) * _114) * _134) * _178) * _178)) + (_172 * _172);'#10+
    '        float3 _668 = _666;'#10+
    '        _668.z = p.z + ((((((-8.0) * w.y) * _178) * (((((_106 * _106) - (((28.0 * _106) * _102) * _126)) + ((70.0 * _106) * _130)) - (((28.0 * _102) * _126) * _130)) + (_130 * _130))) * _172) * '+
      '_149);'#10+
    '        w = _668;'#10+
    '        trap = fast::min(trap, float4(abs(_668), m));'#10+
    '        float _279 = dot(_668, _668);'#10+
    '        m = _279;'#10+
    '        if (_279 > 256.0)'#10+
    '        {'#10+
    '            break;'#10+
    '        }'#10+
    '    }'#10+
    '    res_color = float4(m, trap.yzw);'#10+
    '    return ((0.25 * log(m)) * sqrt(m)) / dz;'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float d_scene(thread const float3& p, thread float4& res_color)'#10+
    '{'#10+
    '    float3 param = p;'#10+
    '    float param_1 = 1.10000002384185791015625;'#10+
    '    float _312 = sd_sphere(param, param_1);'#10+
    '    float d = _312;'#10+
    '    if (_312 < 0.100000001490116119384765625)'#10+
    '    {'#10+
    '        float3 param_2 = p;'#10+
    '        float4 param_3;'#10+
    '        float _321 = sd_mandelbulb(param_2, param_3);'#10+
    '        res_color = param_3;'#10+
    '        d = _321;'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        res_color = float4(0.0);'#10+
    '    }'#10+
    '    return d;'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 surface_normal(thread const float3& p, thread const float& dp)'#10+
    '{'#10+
    '    float3 param = p + float3(0.001000000047497451305389404296875, 0.0, 0.0);'#10+
    '    float4 param_1;'#10+
    '    float _337 = d_scene(param, param_1);'#10+
    '    float3 param_2 = p + float3(0.0, 0.001000000047497451305389404296875, 0.0);'#10+
    '    float4 param_3;'#10+
    '    float _347 = d_scene(param_2, param_3);'#10+
    '    float3 param_4 = p + float3(0.0, 0.0, 0.001000000047497451305389404296875);'#10+
    '    float4 param_5;'#10+
    '    float _357 = d_scene(param_4, param_5);'#10+
    '    return fast::normalize(float3(_337 - dp, _347 - dp, _357 - dp));'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 calc_color(thread const float3& ro, thread const float3& rd, thread const float& t, thread const float4& tra)'#10+
    '{'#10+
    '    float3 param = ro + (rd * t);'#10+
    '    float param_1 = t;'#10+
    '    float3 _379 = surface_normal(param, param_1);'#10+
    '    float3 _386 = fast::normalize(float3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375) - rd);'#10+
    '    float _397 = fast::clamp(0.0500000007450580596923828125 * log(tra.x), 0.0, 1.0);'#10+
    '    float _407 = fast::clamp(dot(float3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375), _379), 0.0, 1.0);'#10+
    '    return sqrt(pow(mix(mix(mix(float3(0.00999999977648258209228515625), float3(0.100000001490116119384765625, 0.20000000298023223876953125, 0.300000011920928955078125), float3(fast::clamp(tra.y, '+
      '0.0, 1.0))), float3(0.0199999995529651641845703125, 0.100000001490116119384765625, 0.300000011920928955078125), float3(fast::clamp(tra.z * tra.z, 0.0, 1.0))), float3(0.300000011920928955078125, '+
      '0.100000001490116119384765625, 0.0199999995529651641845703125), float3(fast::clamp(pow(tra.w, 6.0), 0.0, 1.0))) * (((((float3(10.5, 7.69999980926513671875, 4.900000095367431640625) * _407) + '+
      '(float3(1.0, 0.800000011920928955078125, 0.60000002384185791015625) * (fast::clamp(0.5 + (0.5 * dot(float3(-0.7070000171661376953125, 0.0, 0.7070000171661376953125), _379)), 0.0, 1.0) * _397))) + '+
      '(float3(0.1500000059604644775390625, 0.300000011920928955078125, 0.449999988079071044921875) * ((0.699999988079071044921875 + (0.300000011920928955078125 * _379.y)) * (0.20000000298023223876953125 + '+
      '(0.800000011920928955078125 * _397))))) + (float3(0.875, 0.75, 0.625) * (0.0500000007450580596923828125 + (0.949999988079071044921875 * _397)))) + float3((4.0 * fast::clamp(1.0 + dot(rd, _379), 0.0, '+
      '1.0)) * _397)), float3(0.699999988079071044921875, 0.89999997615814208984375, 1.0)) + float3(((pow(fast::clamp(dot(_379, _386), 0.0, 1.0), 32.0) * _407) * (0.039999999105930328369140625 + '+
      '(0.959999978542327880859375 * pow(fast::clamp(1.0 - dot(_386, float3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375)), 0.0, 1.0), 5.0)))) * 15.0));'#10+
    '}'#10+

    'fragment main0_out main0(main0_in in [[stage_in]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    float3 _567 = ((in.eye + (in.fwd * 1.7999999523162841796875)) + (in.right * in.pos.x)) + (in.up * in.pos.y);'#10+
    '    float3 _572 = fast::normalize(_567 - in.eye);'#10+
    '    float4 color = float4(0.100000001490116119384765625, 0.20000000298023223876953125, 0.300000011920928955078125, 1.0);'#10+
    '    float t = 0.0;'#10+
    '    float4 param_1;'#10+
    '    for (int i = 0; i < 96; i++)'#10+
    '    {'#10+
    '        float3 _590 = _567 + (_572 * t);'#10+
    '        float3 param = _590;'#10+
    '        float _596 = d_scene(param, param_1);'#10+
    '        if (_596 < 0.001000000047497451305389404296875)'#10+
    '        {'#10+
    '            float3 param_2 = _590;'#10+
    '            float3 param_3 = _572;'#10+
    '            float param_4 = _596;'#10+
    '            float4 param_5 = param_1;'#10+
    '            float3 _610 = calc_color(param_2, param_3, param_4, param_5);'#10+
    '            float4 _649 = color;'#10+
    '            _649.x = _610.x;'#10+
    '            float4 _651 = _649;'#10+
    '            _651.y = _610.y;'#10+
    '            float4 _653 = _651;'#10+
    '            _653.z = _610.z;'#10+
    '            color = _653;'#10+
    '            break;'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            float3 _626 = color.xyz + (float3(0.0030000000260770320892333984375, 0.001000000047497451305389404296875, 0.0) * float(i));'#10+
    '            float4 _655 = color;'#10+
    '            _655.x = _626.x;'#10+
    '            float4 _657 = _655;'#10+
    '            _657.y = _626.y;'#10+
    '            float4 _659 = _657;'#10+
    '            _659.z = _626.z;'#10+
    '            color = _659;'#10+
    '        }'#10+
    '        if (t > 3.0)'#10+
    '        {'#10+
    '            break;'#10+
    '        }'#10+
    '        t += _596;'#10+
    '    }'#10+
    '    out.frag_color = color;'#10+
    '    return out;'#10+
    '}';

{$ENDIF !SOKOL_METAL}

{$IFDEF SOKOL_METAL}
const
  VS_SOURCE_METAL_IOS =
    '#pragma clang diagnostic ignored "-Wmissing-prototypes"'#10+

    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct vs_params'#10+
    '{'#10+
    '    float aspect;'#10+
    '    float time;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float2 pos [[user(locn0)]];'#10+
    '    float3 eye [[user(locn1)]];'#10+
    '    float3 up [[user(locn2)]];'#10+
    '    float3 right [[user(locn3)]];'#10+
    '    float3 fwd [[user(locn4)]];'#10+
    '    float sin_t [[user(locn5)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 position [[attribute(0)]];'#10+
    '};'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 eye_pos(thread const float& time, thread const float3& center)'#10+
    '{'#10+
    '    return center + float3(sin(time * 0.0500000007450580596923828125) * 3.0, sin(time * 0.100000001490116119384765625) * 2.0, cos(time * 0.0500000007450580596923828125) * 3.0);'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'void lookat(thread const float3& eye, thread const float3& center, thread const float3& up, thread float3& out_fwd, thread float3& out_right, thread float3& out_up)'#10+
    '{'#10+
    '    out_fwd = fast::normalize(center - eye);'#10+
    '    out_right = fast::normalize(cross(out_fwd, up));'#10+
    '    out_up = cross(out_right, out_fwd);'#10+
    '}'#10+

    'vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _62 [[buffer(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.sin_t = sin(_62.time * 0.5);'#10+
    '    out.gl_Position = in.position;'#10+
    '    out.pos.x = in.position.x * _62.aspect;'#10+
    '    out.pos.y = in.position.y;'#10+
    '    float param = _62.time * 5.0;'#10+
    '    float3 param_1 = float3(0.0);'#10+
    '    out.eye = eye_pos(param, param_1);'#10+
    '    float3 param_2 = out.eye;'#10+
    '    float3 param_3 = float3(0.0);'#10+
    '    float3 param_4 = float3(0.0, 1.0, 0.0);'#10+
    '    float3 param_5;'#10+
    '    float3 param_6;'#10+
    '    float3 param_7;'#10+
    '    lookat(param_2, param_3, param_4, param_5, param_6, param_7);'#10+
    '    out.fwd = param_5;'#10+
    '    out.right = param_6;'#10+
    '    out.up = param_7;'#10+
    '    return out;'#10+
    '}';

const
  FS_SOURCE_METAL_IOS =
    '#pragma clang diagnostic ignored "-Wmissing-prototypes"'#10+

    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_color [[color(0)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float2 pos [[user(locn0)]];'#10+
    '    float3 eye [[user(locn1)]];'#10+
    '    float3 up [[user(locn2)]];'#10+
    '    float3 right [[user(locn3)]];'#10+
    '    float3 fwd [[user(locn4)]];'#10+
    '};'#10+

    'static inline __attribute__((always_inline))'#10+
    'float sd_sphere(thread const float3& p, thread const float& s)'#10+
    '{'#10+
    '    return length(p) - s;'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float sd_mandelbulb(thread const float3& p, thread float4& res_color)'#10+
    '{'#10+
    '    float3 w = p;'#10+
    '    float _51 = dot(p, p);'#10+
    '    float m = _51;'#10+
    '    float4 trap = float4(abs(p), _51);'#10+
    '    float dz = 1.0;'#10+
    '    for (int i = 0; i < 4; i++)'#10+
    '    {'#10+
    '        float _78 = m * m;'#10+
    '        dz = ((8.0 * sqrt(((_78 * _78) * _78) * m)) * dz) + 1.0;'#10+
    '        float _102 = w.x * w.x;'#10+
    '        float _106 = _102 * _102;'#10+
    '        float _114 = w.y * w.y;'#10+
    '        float _126 = w.z * w.z;'#10+
    '        float _130 = _126 * _126;'#10+
    '        float _134 = _102 + _126;'#10+
    '        float _149 = rsqrt((((((_134 * _134) * _134) * _134) * _134) * _134) * _134);'#10+
    '        float _163 = 6.0 * _102;'#10+
    '        float _172 = ((((_106 + (_114 * _114)) + _130) - ((6.0 * _114) * _126)) - (_163 * _114)) + ((2.0 * _126) * _102);'#10+
    '        float _178 = (_102 - _114) + _126;'#10+
    '        float3 _664 = w;'#10+
    '        _664.x = p.x + ((((((((64.0 * w.x) * w.y) * w.z) * (_102 - _126)) * _178) * ((_106 - (_163 * _126)) + _130)) * _172) * _149);'#10+
    '        float3 _666 = _664;'#10+
    '        _666.y = (p.y + (((((-16.0) * _114) * _134) * _178) * _178)) + (_172 * _172);'#10+
    '        float3 _668 = _666;'#10+
    '        _668.z = p.z + ((((((-8.0) * w.y) * _178) * (((((_106 * _106) - (((28.0 * _106) * _102) * _126)) + ((70.0 * _106) * _130)) - (((28.0 * _102) * _126) * _130)) + (_130 * _130))) * _172) * '+
      '_149);'#10+
    '        w = _668;'#10+
    '        trap = fast::min(trap, float4(abs(_668), m));'#10+
    '        float _279 = dot(_668, _668);'#10+
    '        m = _279;'#10+
    '        if (_279 > 256.0)'#10+
    '        {'#10+
    '            break;'#10+
    '        }'#10+
    '    }'#10+
    '    res_color = float4(m, trap.yzw);'#10+
    '    return ((0.25 * log(m)) * sqrt(m)) / dz;'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float d_scene(thread const float3& p, thread float4& res_color)'#10+
    '{'#10+
    '    float3 param = p;'#10+
    '    float param_1 = 1.10000002384185791015625;'#10+
    '    float _312 = sd_sphere(param, param_1);'#10+
    '    float d = _312;'#10+
    '    if (_312 < 0.100000001490116119384765625)'#10+
    '    {'#10+
    '        float3 param_2 = p;'#10+
    '        float4 param_3;'#10+
    '        float _321 = sd_mandelbulb(param_2, param_3);'#10+
    '        res_color = param_3;'#10+
    '        d = _321;'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        res_color = float4(0.0);'#10+
    '    }'#10+
    '    return d;'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 surface_normal(thread const float3& p, thread const float& dp)'#10+
    '{'#10+
    '    float3 param = p + float3(0.001000000047497451305389404296875, 0.0, 0.0);'#10+
    '    float4 param_1;'#10+
    '    float _337 = d_scene(param, param_1);'#10+
    '    float3 param_2 = p + float3(0.0, 0.001000000047497451305389404296875, 0.0);'#10+
    '    float4 param_3;'#10+
    '    float _347 = d_scene(param_2, param_3);'#10+
    '    float3 param_4 = p + float3(0.0, 0.0, 0.001000000047497451305389404296875);'#10+
    '    float4 param_5;'#10+
    '    float _357 = d_scene(param_4, param_5);'#10+
    '    return fast::normalize(float3(_337 - dp, _347 - dp, _357 - dp));'#10+
    '}'#10+

    'static inline __attribute__((always_inline))'#10+
    'float3 calc_color(thread const float3& ro, thread const float3& rd, thread const float& t, thread const float4& tra)'#10+
    '{'#10+
    '    float3 param = ro + (rd * t);'#10+
    '    float param_1 = t;'#10+
    '    float3 _379 = surface_normal(param, param_1);'#10+
    '    float3 _386 = fast::normalize(float3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375) - rd);'#10+
    '    float _397 = fast::clamp(0.0500000007450580596923828125 * log(tra.x), 0.0, 1.0);'#10+
    '    float _407 = fast::clamp(dot(float3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375), _379), 0.0, 1.0);'#10+
    '    return sqrt(pow(mix(mix(mix(float3(0.00999999977648258209228515625), float3(0.100000001490116119384765625, 0.20000000298023223876953125, 0.300000011920928955078125), float3(fast::clamp(tra.y, '+
      '0.0, 1.0))), float3(0.0199999995529651641845703125, 0.100000001490116119384765625, 0.300000011920928955078125), float3(fast::clamp(tra.z * tra.z, 0.0, 1.0))), float3(0.300000011920928955078125, '+
      '0.100000001490116119384765625, 0.0199999995529651641845703125), float3(fast::clamp(pow(tra.w, 6.0), 0.0, 1.0))) * (((((float3(10.5, 7.69999980926513671875, 4.900000095367431640625) * _407) + '+
      '(float3(1.0, 0.800000011920928955078125, 0.60000002384185791015625) * (fast::clamp(0.5 + (0.5 * dot(float3(-0.7070000171661376953125, 0.0, 0.7070000171661376953125), _379)), 0.0, 1.0) * _397))) + '+
      '(float3(0.1500000059604644775390625, 0.300000011920928955078125, 0.449999988079071044921875) * ((0.699999988079071044921875 + (0.300000011920928955078125 * _379.y)) * (0.20000000298023223876953125 + '+
      '(0.800000011920928955078125 * _397))))) + (float3(0.875, 0.75, 0.625) * (0.0500000007450580596923828125 + (0.949999988079071044921875 * _397)))) + float3((4.0 * fast::clamp(1.0 + dot(rd, _379), 0.0, '+
      '1.0)) * _397)), float3(0.699999988079071044921875, 0.89999997615814208984375, 1.0)) + float3(((pow(fast::clamp(dot(_379, _386), 0.0, 1.0), 32.0) * _407) * (0.039999999105930328369140625 + '+
      '(0.959999978542327880859375 * pow(fast::clamp(1.0 - dot(_386, float3(0.57700002193450927734375, 0.57700002193450927734375, -0.57700002193450927734375)), 0.0, 1.0), 5.0)))) * 15.0));'#10+
    '}'#10+

    'fragment main0_out main0(main0_in in [[stage_in]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    float3 _567 = ((in.eye + (in.fwd * 1.7999999523162841796875)) + (in.right * in.pos.x)) + (in.up * in.pos.y);'#10+
    '    float3 _572 = fast::normalize(_567 - in.eye);'#10+
    '    float4 color = float4(0.100000001490116119384765625, 0.20000000298023223876953125, 0.300000011920928955078125, 1.0);'#10+
    '    float t = 0.0;'#10+
    '    float4 param_1;'#10+
    '    for (int i = 0; i < 96; i++)'#10+
    '    {'#10+
    '        float3 _590 = _567 + (_572 * t);'#10+
    '        float3 param = _590;'#10+
    '        float _596 = d_scene(param, param_1);'#10+
    '        if (_596 < 0.001000000047497451305389404296875)'#10+
    '        {'#10+
    '            float3 param_2 = _590;'#10+
    '            float3 param_3 = _572;'#10+
    '            float param_4 = _596;'#10+
    '            float4 param_5 = param_1;'#10+
    '            float3 _610 = calc_color(param_2, param_3, param_4, param_5);'#10+
    '            float4 _649 = color;'#10+
    '            _649.x = _610.x;'#10+
    '            float4 _651 = _649;'#10+
    '            _651.y = _610.y;'#10+
    '            float4 _653 = _651;'#10+
    '            _653.z = _610.z;'#10+
    '            color = _653;'#10+
    '            break;'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            float3 _626 = color.xyz + (float3(0.0030000000260770320892333984375, 0.001000000047497451305389404296875, 0.0) * float(i));'#10+
    '            float4 _655 = color;'#10+
    '            _655.x = _626.x;'#10+
    '            float4 _657 = _655;'#10+
    '            _657.y = _626.y;'#10+
    '            float4 _659 = _657;'#10+
    '            _659.z = _626.z;'#10+
    '            color = _659;'#10+
    '        }'#10+
    '        if (t > 3.0)'#10+
    '        {'#10+
    '            break;'#10+
    '        }'#10+
    '        t += _596;'#10+
    '    }'#10+
    '    out.frag_color = color;'#10+
    '    return out;'#10+
    '}';

{$ENDIF !SOKOL_METAL}

var
  GSdfShaderDesc: TNativeShaderDesc;

procedure InitSdfShaderDesc;
begin
  GSdfShaderDesc.Init;
  GSdfShaderDesc.Attrs[0].Init('position', 'TEXCOORD', 0);

  case TGfx.Backend of
    {$IFDEF SOKOL_GLCORE33}
    TBackend.GLCore33:
      begin
        GSdfShaderDesc.VS.Source := VS_SOURCE_GLSL330;
        GSdfShaderDesc.FS.Source := FS_SOURCE_GLSL330;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES2}
    TBackend.Gles2:
      begin
        GSdfShaderDesc.VS.Source := VS_SOURCE_GLSL100;
        GSdfShaderDesc.FS.Source := FS_SOURCE_GLSL100;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES3}
    TBackend.Gles3:
      begin
        GSdfShaderDesc.VS.Source := VS_SOURCE_GLSL300ES;
        GSdfShaderDesc.FS.Source := FS_SOURCE_GLSL300ES;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_D3D11}
    TBackend.D3D11:
      begin
        GSdfShaderDesc.VS.Source := VS_SOURCE_HLSL5;
        GSdfShaderDesc.FS.Source := FS_SOURCE_HLSL5;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalMacOS:
      begin
        GSdfShaderDesc.VS.Source := VS_SOURCE_METAL_MACOS;
        GSdfShaderDesc.FS.Source := FS_SOURCE_METAL_MACOS;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalIOS:
      begin
        GSdfShaderDesc.VS.Source := VS_SOURCE_METAL_IOS;
        GSdfShaderDesc.FS.Source := FS_SOURCE_METAL_IOS;
      end;
    {$ENDIF}
  else
    Assert(False)
  end;

  GSdfShaderDesc.vs.uniform_blocks[0].size := 16;
  GSdfShaderDesc.vs.uniform_blocks[0].layout := _SG_UNIFORMLAYOUT_STD140;
  if (TGfx.Backend.IsGL) then
    GSdfShaderDesc.vs.uniform_blocks[0].uniforms[0].Init('vs_params', _SG_UNIFORMTYPE_FLOAT4, 1);
  GSdfShaderDesc.&label := 'SdfShader';
end;

function SdfShaderDesc: PNativeShaderDesc;
begin
  if (GSdfShaderDesc.VS.Entry = nil) then
    InitSdfShaderDesc;

  Result := @GSdfShaderDesc;
end;

end.
