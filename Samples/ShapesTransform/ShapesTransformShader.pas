unit ShapesTransformShader;
{ #version:1# (machine generated, don't edit!)

  Generated by sokol-shdc (https://github.com/floooh/sokol-tools)
  With Delphi modifications (https://github.com/neslib/Neslib.Sokol.Tools)

  Cmdline: sokol-shdc --input ShapesTransformShader.glsl --output ShapesTransformShader.pas

  Overview:

    Shader program 'shapes':
      Get shader desc: ShapesShaderDesc()
      Vertex shader: vs
        Attribute slots:
          ATTR_VS_POSITION = 0
          ATTR_VS_NORMAL = 1
          ATTR_VS_TEXCOORD = 2
          ATTR_VS_COLOR0 = 3
        Uniform block 'vs_params':
          Delphi record: TVSParams
          Bind slot: SLOT_VS_PARAMS = 0
      Fragment shader: fs


  Shader descriptor records:

    var ShapesShader := TShader.Create(ShapesShaderDesc);

  Vertex attribute locations for vertex shader 'vs':

    var PipDesc: TPipelineDesc;
    PipDesc.Init;
    PipDesc.Attrs[ATTR_VS_POSITION]. ...
    PipDesc.Attrs[ATTR_VS_NORMAL]. ...
    PipDesc.Attrs[ATTR_VS_TEXCOORD]. ...
    PipDesc.Attrs[ATTR_VS_COLOR0]. ...
    PipDesc. ...
    var Pip := TPipeline.Create(PipDesc);

  Image bind slots, use as index in TBindings.VSImages[] or .FSImages[]:


  Bind slot and Delphi record for uniform block 'VSParams':

    VSParams: TVSParams;
    VSParams.DrawMode := ...;
    VSParams.Mvp := ...;
    TGfx.ApplyUniforms(TShaderStage.[VertexShader|FragmentShader], SLOT_VS_PARAMS, TRange.Create(VSParams));

}

{$INCLUDE 'Neslib.Sokol.inc'}

interface

uses
  Neslib.FastMath,
  Neslib.Sokol.Gfx;

const
  ATTR_VS_POSITION = 0;
  ATTR_VS_NORMAL = 1;
  ATTR_VS_TEXCOORD = 2;
  ATTR_VS_COLOR0 = 3;

const
  SLOT_VS_PARAMS = 0;

type
  TVSParams = packed record
  public
    DrawMode: Single;
    _Pad4: array [0..11] of UInt8;
    Mvp: TMatrix4;
  end;

function ShapesShaderDesc: PNativeShaderDesc;

implementation

uses
  Neslib.Sokol.Api;

{$IFDEF SOKOL_GLCORE33}
const
  VS_SOURCE_GLSL330 =
    '#version 330'#10+

    'uniform vec4 vs_params[5];'#10+
    'layout(location = 0) in vec4 position;'#10+
    'out vec4 color;'#10+
    'layout(location = 1) in vec3 normal;'#10+
    'layout(location = 2) in vec2 texcoord;'#10+
    'layout(location = 3) in vec4 color0;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_Position = mat4(vs_params[1], vs_params[2], vs_params[3], vs_params[4]) * position;'#10+
    '    if (vs_params[0].x == 0.0)'#10+
    '    {'#10+
    '        color = vec4((normal + vec3(1.0)) * 0.5, 1.0);'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        if (vs_params[0].x == 1.0)'#10+
    '        {'#10+
    '            color = vec4(texcoord, 0.0, 1.0);'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            color = color0;'#10+
    '        }'#10+
    '    }'#10+
    '}';

const
  FS_SOURCE_GLSL330 =
    '#version 330'#10+

    'layout(location = 0) out vec4 frag_color;'#10+
    'in vec4 color;'#10+

    'void main()'#10+
    '{'#10+
    '    frag_color = color;'#10+
    '}';

{$ENDIF !SOKOL_GLCORE33}

{$IFDEF SOKOL_GLES2}
const
  VS_SOURCE_GLSL100 =
    '#version 100'#10+

    'uniform vec4 vs_params[5];'#10+
    'attribute vec4 position;'#10+
    'varying vec4 color;'#10+
    'attribute vec3 normal;'#10+
    'attribute vec2 texcoord;'#10+
    'attribute vec4 color0;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_Position = mat4(vs_params[1], vs_params[2], vs_params[3], vs_params[4]) * position;'#10+
    '    if (vs_params[0].x == 0.0)'#10+
    '    {'#10+
    '        color = vec4((normal + vec3(1.0)) * 0.5, 1.0);'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        if (vs_params[0].x == 1.0)'#10+
    '        {'#10+
    '            color = vec4(texcoord, 0.0, 1.0);'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            color = color0;'#10+
    '        }'#10+
    '    }'#10+
    '}';

const
  FS_SOURCE_GLSL100 =
    '#version 100'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'varying highp vec4 color;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_FragData[0] = color;'#10+
    '}';

{$ENDIF !SOKOL_GLES2}

{$IFDEF SOKOL_GLES3}
const
  VS_SOURCE_GLSL300ES =
    '#version 300 es'#10+

    'uniform vec4 vs_params[5];'#10+
    'layout(location = 0) in vec4 position;'#10+
    'out vec4 color;'#10+
    'layout(location = 1) in vec3 normal;'#10+
    'layout(location = 2) in vec2 texcoord;'#10+
    'layout(location = 3) in vec4 color0;'#10+

    'void main()'#10+
    '{'#10+
    '    gl_Position = mat4(vs_params[1], vs_params[2], vs_params[3], vs_params[4]) * position;'#10+
    '    if (vs_params[0].x == 0.0)'#10+
    '    {'#10+
    '        color = vec4((normal + vec3(1.0)) * 0.5, 1.0);'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        if (vs_params[0].x == 1.0)'#10+
    '        {'#10+
    '            color = vec4(texcoord, 0.0, 1.0);'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            color = color0;'#10+
    '        }'#10+
    '    }'#10+
    '}';

const
  FS_SOURCE_GLSL300ES =
    '#version 300 es'#10+
    'precision mediump float;'#10+
    'precision highp int;'#10+

    'layout(location = 0) out highp vec4 frag_color;'#10+
    'in highp vec4 color;'#10+

    'void main()'#10+
    '{'#10+
    '    frag_color = color;'#10+
    '}';

{$ENDIF !SOKOL_GLES3}

{$IFDEF SOKOL_D3D11}
const
  VS_SOURCE_HLSL5 =
    'cbuffer vs_params : register(b0)'#10+
    '{'#10+
    '    float _21_draw_mode : packoffset(c0);'#10+
    '    row_major float4x4 _21_mvp : packoffset(c1);'#10+
    '};'#10+


    'static float4 gl_Position;'#10+
    'static float4 position;'#10+
    'static float4 color;'#10+
    'static float3 normal;'#10+
    'static float2 texcoord;'#10+
    'static float4 color0;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float4 position : TEXCOORD0;'#10+
    '    float3 normal : TEXCOORD1;'#10+
    '    float2 texcoord : TEXCOORD2;'#10+
    '    float4 color0 : TEXCOORD3;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float4 color : TEXCOORD0;'#10+
    '    float4 gl_Position : SV_Position;'#10+
    '};'#10+

    'void vert_main()'#10+
    '{'#10+
    '    gl_Position = mul(position, _21_mvp);'#10+
    '    if (_21_draw_mode == 0.0f)'#10+
    '    {'#10+
    '        color = float4((normal + 1.0f.xxx) * 0.5f, 1.0f);'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        if (_21_draw_mode == 1.0f)'#10+
    '        {'#10+
    '            color = float4(texcoord, 0.0f, 1.0f);'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            color = color0;'#10+
    '        }'#10+
    '    }'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    position = stage_input.position;'#10+
    '    normal = stage_input.normal;'#10+
    '    texcoord = stage_input.texcoord;'#10+
    '    color0 = stage_input.color0;'#10+
    '    vert_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.gl_Position = gl_Position;'#10+
    '    stage_output.color = color;'#10+
    '    return stage_output;'#10+
    '}';

const
  FS_SOURCE_HLSL5 =
    'static float4 frag_color;'#10+
    'static float4 color;'#10+

    'struct SPIRV_Cross_Input'#10+
    '{'#10+
    '    float4 color : TEXCOORD0;'#10+
    '};'#10+

    'struct SPIRV_Cross_Output'#10+
    '{'#10+
    '    float4 frag_color : SV_Target0;'#10+
    '};'#10+

    'void frag_main()'#10+
    '{'#10+
    '    frag_color = color;'#10+
    '}'#10+

    'SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)'#10+
    '{'#10+
    '    color = stage_input.color;'#10+
    '    frag_main();'#10+
    '    SPIRV_Cross_Output stage_output;'#10+
    '    stage_output.frag_color = frag_color;'#10+
    '    return stage_output;'#10+
    '}';

{$ENDIF !SOKOL_D3D11}

{$IFDEF SOKOL_METAL}
const
  VS_SOURCE_METAL_MACOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct vs_params'#10+
    '{'#10+
    '    float draw_mode;'#10+
    '    float4x4 mvp;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 color [[user(locn0)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 position [[attribute(0)]];'#10+
    '    float3 normal [[attribute(1)]];'#10+
    '    float2 texcoord [[attribute(2)]];'#10+
    '    float4 color0 [[attribute(3)]];'#10+
    '};'#10+

    'vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _21 [[buffer(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.gl_Position = _21.mvp * in.position;'#10+
    '    if (_21.draw_mode == 0.0)'#10+
    '    {'#10+
    '        out.color = float4((in.normal + float3(1.0)) * 0.5, 1.0);'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        if (_21.draw_mode == 1.0)'#10+
    '        {'#10+
    '            out.color = float4(in.texcoord, 0.0, 1.0);'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            out.color = in.color0;'#10+
    '        }'#10+
    '    }'#10+
    '    return out;'#10+
    '}';

const
  FS_SOURCE_METAL_MACOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_color [[color(0)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 color [[user(locn0)]];'#10+
    '};'#10+

    'fragment main0_out main0(main0_in in [[stage_in]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.frag_color = in.color;'#10+
    '    return out;'#10+
    '}';

{$ENDIF !SOKOL_METAL}

{$IFDEF SOKOL_METAL}
const
  VS_SOURCE_METAL_IOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct vs_params'#10+
    '{'#10+
    '    float draw_mode;'#10+
    '    float4x4 mvp;'#10+
    '};'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 color [[user(locn0)]];'#10+
    '    float4 gl_Position [[position]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 position [[attribute(0)]];'#10+
    '    float3 normal [[attribute(1)]];'#10+
    '    float2 texcoord [[attribute(2)]];'#10+
    '    float4 color0 [[attribute(3)]];'#10+
    '};'#10+

    'vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _21 [[buffer(0)]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.gl_Position = _21.mvp * in.position;'#10+
    '    if (_21.draw_mode == 0.0)'#10+
    '    {'#10+
    '        out.color = float4((in.normal + float3(1.0)) * 0.5, 1.0);'#10+
    '    }'#10+
    '    else'#10+
    '    {'#10+
    '        if (_21.draw_mode == 1.0)'#10+
    '        {'#10+
    '            out.color = float4(in.texcoord, 0.0, 1.0);'#10+
    '        }'#10+
    '        else'#10+
    '        {'#10+
    '            out.color = in.color0;'#10+
    '        }'#10+
    '    }'#10+
    '    return out;'#10+
    '}';

const
  FS_SOURCE_METAL_IOS =
    '#include <metal_stdlib>'#10+
    '#include <simd/simd.h>'#10+

    'using namespace metal;'#10+

    'struct main0_out'#10+
    '{'#10+
    '    float4 frag_color [[color(0)]];'#10+
    '};'#10+

    'struct main0_in'#10+
    '{'#10+
    '    float4 color [[user(locn0)]];'#10+
    '};'#10+

    'fragment main0_out main0(main0_in in [[stage_in]])'#10+
    '{'#10+
    '    main0_out out = {};'#10+
    '    out.frag_color = in.color;'#10+
    '    return out;'#10+
    '}';

{$ENDIF !SOKOL_METAL}

var
  GShapesShaderDesc: TNativeShaderDesc;

procedure InitShapesShaderDesc;
begin
  GShapesShaderDesc.Init;
  GShapesShaderDesc.Attrs[0].Init('position', 'TEXCOORD', 0);
  GShapesShaderDesc.Attrs[1].Init('normal', 'TEXCOORD', 1);
  GShapesShaderDesc.Attrs[2].Init('texcoord', 'TEXCOORD', 2);
  GShapesShaderDesc.Attrs[3].Init('color0', 'TEXCOORD', 3);

  case TGfx.Backend of
    {$IFDEF SOKOL_GLCORE33}
    TBackend.GLCore33:
      begin
        GShapesShaderDesc.VS.Source := VS_SOURCE_GLSL330;
        GShapesShaderDesc.FS.Source := FS_SOURCE_GLSL330;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES2}
    TBackend.Gles2:
      begin
        GShapesShaderDesc.VS.Source := VS_SOURCE_GLSL100;
        GShapesShaderDesc.FS.Source := FS_SOURCE_GLSL100;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_GLES3}
    TBackend.Gles3:
      begin
        GShapesShaderDesc.VS.Source := VS_SOURCE_GLSL300ES;
        GShapesShaderDesc.FS.Source := FS_SOURCE_GLSL300ES;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_D3D11}
    TBackend.D3D11:
      begin
        GShapesShaderDesc.VS.Source := VS_SOURCE_HLSL5;
        GShapesShaderDesc.FS.Source := FS_SOURCE_HLSL5;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalMacOS:
      begin
        GShapesShaderDesc.VS.Source := VS_SOURCE_METAL_MACOS;
        GShapesShaderDesc.FS.Source := FS_SOURCE_METAL_MACOS;
      end;
    {$ENDIF}

    {$IFDEF SOKOL_METAL}
    TBackend.MetalIOS:
      begin
        GShapesShaderDesc.VS.Source := VS_SOURCE_METAL_IOS;
        GShapesShaderDesc.FS.Source := FS_SOURCE_METAL_IOS;
      end;
    {$ENDIF}
  else
    Assert(False)
  end;

  GShapesShaderDesc.vs.uniform_blocks[0].size := 80;
  GShapesShaderDesc.vs.uniform_blocks[0].layout := _SG_UNIFORMLAYOUT_STD140;
  if (TGfx.Backend.IsGL) then
    GShapesShaderDesc.vs.uniform_blocks[0].uniforms[0].Init('vs_params', _SG_UNIFORMTYPE_FLOAT4, 5);
  GShapesShaderDesc.&label := 'ShapesShader';
end;

function ShapesShaderDesc: PNativeShaderDesc;
begin
  if (GShapesShaderDesc.VS.Entry = nil) then
    InitShapesShaderDesc;

  Result := @GShapesShaderDesc;
end;

end.
